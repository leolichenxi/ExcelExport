---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lichenxi02.
--- DateTime: 2021/8/25 15:47
---


function table_read_only(t)
    local temp= {}
    local mt = {
        __index = t,
        __newindex = function(t, k, v)
            error('error write to a read-only table with key = ' .. tostring(k)..', value ='..tostring(v))
        end
    }
    setmetatable(temp, mt)
    return temp
end

function NewConfig(data,tableIndexes)
    local t = {}
    for k,v in pairs(tableIndexes) do
        t[k] = data[v]
    end
    return t
end
--local TestGlobalTemplate =  require ("Config/TestGlobalTemplate")
--
--local file = io.open("out_flatbuffer_bin/TestGlobalTemplate.bin")
--local buff =  file:read("*a")
--file:close()
--local offset = 0
-----@type TestGlobalTemplate
--local t = TestGlobalTemplate.GetRootAsTestGlobalTemplate(buff,offset)
--print(t:TestString1())
--print(t:TestString())
--local a = t:TestObj1():A()
--t:TestObj1():A()
--print(a)

Logger = require("Logger")

--local Position = {}
--local Position__mt = {}
--function Position.New()
--    local o = {}
--    setmetatable(o, {__index = Position__mt})
--    return o
--end
--
--local Template = {}
--local Template__mt = {
--    Id = 1,
--    --Position = nil,
--    --Test  = 22
--}
----
--function Template__mt:GetId()
--    return self.Id
--end
--
--function Template__mt:GetId()
--    return self.Id
--end
--
--function Template.New()
--    local o = {Id = 100}
--    setmetatable(o, {__index = Template__mt,__newindex = function (t, k, v) error("error write to a read-only table with key = " .. tostring(k)..", value ="..tostring(v)) end,})
--    --setmetatable(o, {__index = Template__mt})
--    return o
--end
--
--local test = Template.New()
--local test1 = Template.New()
--for k in ipairs(test) do
--    print(k)
--end
--test.Id = 10
--print((test1))
--print(test:GetId())
--print(test1:GetId())

collectgarbage("collect")
collectgarbage("stop")
local a = collectgarbage("count")
--local StoryCfgConfig = require("StoryCfgConfig1")
--local y = StoryCfgConfig.GetConfig(99990041)
--y.CacheCount = 100
--y = table_read_only(y)
--print(y.CacheCount )
--print(y.CacheCount)

 size =  {}
size.a = 10
size.aa = 10
--size[1] = nil
--size[2] = nil
--table.remove(size,1)
--table.remove(size,1)
local b = collectgarbage("count")
local size = (b-a)
print(size .. " mb")
---@type TestTableArraysTemplate
--local TestTableArraysTemplate = require("TestTableArraysTemplate1")
--
--local t = TestTableArraysTemplate.GetTableByIndex(5)
--Logger.LogInfo(t.born_position.x)