//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Config
{
    
    
    public class GlobalTemplate : IGenerateObject
    {
        
        /// <summary>
        /// 名字字数限制
        /// <summary>
        public int NameLimit { get; private set; }
        
        /// <summary>
        /// 玩家进入游戏时初始获得物品掉落组
        /// <summary>
        public int DefaultDropGroup { get; private set; }
        
        /// <summary>
        /// 改名消耗（单位：宝石）
        /// <summary>
        public int ChangeNameCost { get; private set; }
        
        /// <summary>
        /// 每恢复一点体力所需时间（单位：分钟）
        /// <summary>
        public int PlayeEnergyRecoverTime { get; private set; }
        
        /// <summary>
        /// 各等级可上阵英雄数量，现在的等级对应的是玩家等级
        /// <summary>
        public FieldHeroNumLimit_[] FieldHeroNumLimits { get; private set; }
        
        /// <summary>
        /// 阵容名字字数限制
        /// <summary>
        public int FormationNameLimit { get; private set; }
        
        /// <summary>
        /// 同职业的魔物上阵不能超过x个
        /// <summary>
        public int FormationCareerLimit { get; private set; }
        
        /// <summary>
        /// 队伍1-队伍3默认初始英雄及站位
        /// <summary>
        public int[] InitialFormaitonHeros { get; private set; }
        
        /// <summary>
        /// 玩家可设置X个队伍
        /// <summary>
        public int FormationCount { get; private set; }
        
        /// <summary>
        /// 英雄普通奥义数量上限
        /// <summary>
        public int HeroNormalTalentCountLimit { get; private set; }
        
        /// <summary>
        /// 英雄生命属性权重值
        /// <summary>
        public int HeroHealthCorrectionBase { get; private set; }
        
        /// <summary>
        /// 英雄生命属性权重系数
        /// <summary>
        public double HeroHealthCorrectionCoe { get; private set; }
        
        /// <summary>
        /// 英雄攻击属性权重值
        /// <summary>
        public int HeroAttackCorrectionBase { get; private set; }
        
        /// <summary>
        /// 英雄攻击属性权重系数
        /// <summary>
        public double HeroAttackCorrectionCoe { get; private set; }
        
        /// <summary>
        /// 英雄闪避属性权重值
        /// <summary>
        public int HeroDodgeCorrectionBase { get; private set; }
        
        /// <summary>
        /// 英雄闪避属性权重系数
        /// <summary>
        public double HeroDodgeCorrectionCoe { get; private set; }
        
        /// <summary>
        /// 英雄暴击属性权重值
        /// <summary>
        public int HeroCritCorrectionBase { get; private set; }
        
        /// <summary>
        /// 英雄暴击属性权重系数
        /// <summary>
        public double HeroCritCorrectionCoe { get; private set; }
        
        /// <summary>
        /// 英雄暴击属性权重值
        /// <summary>
        public int HeroBlckCorrectionBase { get; private set; }
        
        /// <summary>
        /// 英雄暴击属性权重系数
        /// <summary>
        public double HeroBlckCorrectionCoe { get; private set; }
        
        /// <summary>
        /// 生命显示系数
        /// <summary>
        public double ShowHealthCoe { get; private set; }
        
        /// <summary>
        /// 攻击显示系数
        /// <summary>
        public double ShowAttackCoe { get; private set; }
        
        /// <summary>
        /// 闪避显示系数
        /// <summary>
        public double ShowDodgeCoe { get; private set; }
        
        /// <summary>
        /// 暴击显示系数
        /// <summary>
        public double ShowCritCoe { get; private set; }
        
        /// <summary>
        /// 体质显示系数
        /// <summary>
        public double ShowVitCoe { get; private set; }
        
        /// <summary>
        /// 力量显示系数
        /// <summary>
        public double ShowStrCoe { get; private set; }
        
        /// <summary>
        /// 敏捷显示系数
        /// <summary>
        public double ShowAgiCoe { get; private set; }
        
        /// <summary>
        /// 暴击显示系数
        /// <summary>
        public double ShowDexCoe { get; private set; }
        
        /// <summary>
        /// 伤害减免显示系数
        /// <summary>
        public double ShowDefenseNumCoe { get; private set; }
        
        /// <summary>
        /// 伤害抗性显示系数
        /// <summary>
        public double ShowDefenseRateCoe { get; private set; }
        
        /// <summary>
        /// 克制强度显示系数
        /// <summary>
        public double ShowElementCoe { get; private set; }
        
        /// <summary>
        /// 暴击伤害显示系数
        /// <summary>
        public double ShowCritDamCoe { get; private set; }
        
        /// <summary>
        /// 闪避战斗力修正
        /// <summary>
        public double DodgePowerCorrection { get; private set; }
        
        /// <summary>
        /// 暴击战斗力修正
        /// <summary>
        public double CritPowerCorrection { get; private set; }
        
        /// <summary>
        /// 格档战斗力修正
        /// <summary>
        public double BlockPowerCorrection { get; private set; }
        
        /// <summary>
        /// 英雄个体值评价（(0,Num1]是C，(Num1,Num2]是B，(Num2,Num3]是A，大于Num3是S）
        /// <summary>
        public HeroAttributeEvaluation_ HeroAttributeEvaluation { get; private set; }
        
        /// <summary>
        /// 英雄不同星级对应的等级上限，数组第一项为1星对应的等级上限
        /// <summary>
        public int[] HeroLevelLimits { get; private set; }
        
        /// <summary>
        /// 英雄星级上限
        /// <summary>
        public int HeroStarLimit { get; private set; }
        
        /// <summary>
        /// 英雄不同星级升星所需消耗的同星副卡数量，数组第一项为1星升2星时所需数量
        /// <summary>
        public int[] HeroStarUpNeedCards { get; private set; }
        
        /// <summary>
        /// 英雄不同星级升星所需消耗的金币数量，数组第一项为1星升2星时所需数量
        /// <summary>
        public int[] HeroStarUpNeedGolds { get; private set; }
        
        /// <summary>
        /// 当英雄升到指定星级时，可获得1个奥义，从英雄表里的奥义库中随机1个(新增字段！！！）
        /// <summary>
        public int[] HeroStarUpGainNormalTalents { get; private set; }
        
        /// <summary>
        /// 英雄不同星级取消升星时返还的副卡数量，数组第一项为1星升2星取消时返还的数量（删除了放弃升星结果的操作，该字段删除）
        /// <summary>
        public int[] HeroStarUpCancelGiveCards { get; private set; }
        
        /// <summary>
        /// 英雄取消升星时消耗的金币比例（删除了放弃升星结果的操作，该字段删除）
        /// <summary>
        public double HeroStarUpCancelGiveGold { get; private set; }
        
        /// <summary>
        /// 英雄不同星级学习时所需消耗的金币数量，数组第一项为1星所需数量
        /// <summary>
        public int[] HeroLearningNeedGolds { get; private set; }
        
        /// <summary>
        /// 英雄不同星级在不同阶数时进阶所需消耗的同卡数量，数组第一项为1星时所需数量，Class1表示0阶升1阶所需数量
        /// <summary>
        public HeroClassNeedCard_[] HeroClassNeedCards { get; private set; }
        
        /// <summary>
        /// 英雄特训返还英雄经验比例
        /// <summary>
        public double HeroSkillTrainingGiveExpCoe { get; private set; }
        
        /// <summary>
        /// 金币免费召唤冷却时间，单位：分钟
        /// <summary>
        public int NormalLotteryFreeTime { get; private set; }
        
        /// <summary>
        /// 氪金免费召唤冷却时间，单位：分钟
        /// <summary>
        public int SpecialLotteryFreeTime { get; private set; }
        
        /// <summary>
        /// 单张抽卡券消耗的钻石
        /// <summary>
        public int LotteryTicketDiamondCost { get; private set; }
        
        /// <summary>
        /// 氪金召唤价格（单次消耗的抽卡券，10次消耗的抽卡券）
        /// <summary>
        public SpecialLotteryPrice_ SpecialLotteryPrice { get; private set; }
        
        /// <summary>
        /// 氪金非第10次单抽；10连抽排除必出（紫/橙）外剩余的抽卡次数调用卡池的权重（保底数量、超级蛋几率）
        /// <summary>
        public SpecialLotteryOneDrawNormalNum_ SpecialLotteryOneDrawNormalNum { get; private set; }
        
        /// <summary>
        /// 累计氪金&活动抽到第n次，未获得橙卡，则本次必定给一张橙卡
        /// <summary>
        public int OrangeCardBaseCount { get; private set; }
        
        /// <summary>
        /// 抽卡所获积分（氪金抽、活动抽），若钻石/活动抽如果是十连，积分需要x10
        /// <summary>
        public LotteryPointBonus_ LotteryPointBonus { get; private set; }
        
        /// <summary>
        /// 活动非第10次单抽；10连抽排除必出（紫/橙）外剩余的抽卡次数调用卡池的权重（保底数量、超级蛋几率）
        ///对应【限时召唤配置表】里的卡池
        /// <summary>
        public ActivityLotteryOneDrawNormalNum_ ActivityLotteryOneDrawNormalNum { get; private set; }
        
        /// <summary>
        /// 特殊事件概率
        /// <summary>
        public double SpecialWorkProbility { get; private set; }
        
        /// <summary>
        /// 金币矿洞,建材矿洞，饮品工坊产出一份资源需要的时间（单位：秒）
        /// <summary>
        public int HeroWorkPickRewardInterval { get; private set; }
        
        /// <summary>
        /// 美食工坊（产魔物经验药水）产出一份资源需要的时间（单位：秒）
        /// <summary>
        public int HeroWorkHeroExpPickRewardInterval { get; private set; }
        
        /// <summary>
        /// 月岩矿洞，金币矿洞，美食区，饮品区资源出现间隔动画（单位：秒）
        /// <summary>
        public int[] ResourceAnimationIntervals { get; private set; }
        
        /// <summary>
        /// 勘探井/烹饪屋的【一键领取】按钮解锁等级（勘探井/烹饪屋的等级，非玩家等级）
        /// <summary>
        public int AllRecivedIconUnlockLevel { get; private set; }
        
        /// <summary>
        /// 排行榜入榜人数（显示前50名的玩家信息）
        /// <summary>
        public int RankListNumber { get; private set; }
        
        /// <summary>
        /// 超过x名，显示未上榜
        /// <summary>
        public int RankLimitNumer { get; private set; }
        
        /// <summary>
        /// 排行榜刷新时间（秒数）
        /// <summary>
        public int ListRefreshTime { get; private set; }
        
        /// <summary>
        /// 蓝色装备合成碎片数
        /// <summary>
        public int BlueEquipmentSyntheticNumber { get; private set; }
        
        /// <summary>
        /// 紫色装备合成碎片数
        /// <summary>
        public int PurpleEquipmentSyntheticNumber { get; private set; }
        
        /// <summary>
        /// 金色装备合成碎片数
        /// <summary>
        public int GoldenEquipmentSyntheticNumber { get; private set; }
        
        /// <summary>
        /// 装备分解获得物品掉落组（从白色品质到金色品质）
        /// <summary>
        public int[] GoldenEquipmentSyntheticNumbers { get; private set; }
        
        /// <summary>
        /// 闯关普通模式消耗体力（关卡类型为1的）
        /// <summary>
        public int NormalDuplicateEnergyCost { get; private set; }
        
        /// <summary>
        /// 迷宫消耗体力（关卡类型为6）
        /// <summary>
        public int ChallengeDuplicateEnergyCost { get; private set; }
        
        /// <summary>
        /// 玩家最多同时能升级多少建筑
        /// <summary>
        public int BuildingUpgradeMaxCount { get; private set; }
        
        /// <summary>
        /// 取消升级返回的资源
        /// <summary>
        public double BuildingUpgradeReturnFactor { get; private set; }
        
        /// <summary>
        /// 使用钻石加速升级的钻石花费系数
        /// <summary>
        public double BuildingUpgradeDiamondCost { get; private set; }
        
        /// <summary>
        /// 每张工作加速券的钻石价格，每张工作加速券固定加速30分钟
        /// <summary>
        public int WorkSpeedUpDiamondCost { get; private set; }
        
        /// <summary>
        /// PVP挑战冷却时间，单位是秒
        /// <summary>
        public int PvpCoolDownTime { get; private set; }
        
        /// <summary>
        /// 每日PVP进攻免费次数
        /// <summary>
        public int PvpAttackFreeTimes { get; private set; }
        
        /// <summary>
        /// PVP每周结算日
        /// <summary>
        public int PvpSettlementDayPerWeek { get; private set; }
        
        /// <summary>
        /// PVP每周和每日结算时间
        /// <summary>
        public string PvpSettlementTimePerWeek { get; private set; }
        
        /// <summary>
        /// 返还科技材料系数
        /// <summary>
        public double ReturnTechnologyMaterialPercentage { get; private set; }
        
        /// <summary>
        /// 小姐姐等级上限
        /// <summary>
        public int LordLevelLimted { get; private set; }
        
        /// <summary>
        /// 背包装备最多可承载上限（超过则发邮件给玩家）
        /// <summary>
        public int EquipmentBagLimted { get; private set; }
        
        /// <summary>
        /// 重置魔王小姐姐科技树消耗的充值币数量
        /// <summary>
        public int TechnologyResetCost { get; private set; }
        
        /// <summary>
        /// 1-10级酒馆对应的任务品质权重
        /// <summary>
        public DailyTaskWeight_[] DailyTaskWeights { get; private set; }
        
        /// <summary>
        /// 酒馆等级对应的候选任务数量
        /// <summary>
        public ReleaseTaskCount_[] ReleaseTaskCounts { get; private set; }
        
        /// <summary>
        /// 酒馆等级对应的可接任务数量
        /// <summary>
        public ReceiveTaskCount_[] ReceiveTaskCounts { get; private set; }
        
        /// <summary>
        /// 酒馆/羁绊对白框默认展示时间（单位：毫秒）
        /// <summary>
        public int TavernSpeechShowTime { get; private set; }
        
        /// <summary>
        /// 酒馆对白每隔一定时间，播放一次（单位：毫秒）
        /// <summary>
        public int TavernSpeechAppearInterval { get; private set; }
        
        /// <summary>
        /// 英雄评价字数限制
        /// <summary>
        public int HeroCommentWordLimit { get; private set; }
        
        /// <summary>
        /// 53条里最多只能出现你的评论N条，超过给到限制
        /// <summary>
        public int HeroCommentCountLimit { get; private set; }
        
        /// <summary>
        /// 评价除了点赞的3条，另外保留N条推荐数据
        /// <summary>
        public int HeroCommentNumber { get; private set; }
        
        /// <summary>
        /// 评论除了点赞的3条，另外保留N条最新数据
        /// <summary>
        public int HeroCommentLatestNumber { get; private set; }
        
        /// <summary>
        /// 主界面滚动广告图滚动间隔时间（单位：毫秒）
        /// <summary>
        public int AdvertisingMapInterval { get; private set; }
        
        /// <summary>
        /// 系统&玩家邮件上限封数（单位：封）
        /// <summary>
        public int EmailLimited { get; private set; }
        
        /// <summary>
        /// 服务器数配置表中的邮件过期天数（单位：天），超过天数自动删除，但如果是已读并领取附件，则立即自动删除
        /// <summary>
        public int SystemEmailExpireTime { get; private set; }
        
        /// <summary>
        /// 预设信件由系统推送给比发信人等级低的玩家。等级差为数组，若无符合条件的人，则扩大区间。
        /// <summary>
        public int[] PrizeEmailPlayerLevels { get; private set; }
        
        /// <summary>
        /// 预设信件收件人条件（最近x小时未收到过预设信件）
        ///最近yCommendFriendLoginTime）小时有上线过
        /// <summary>
        public int PrizeEmailPlayerReceiveEmailCondition { get; private set; }
        
        /// <summary>
        /// 同一封预设邮件最多可同时发送给N个陌生玩家
        /// <summary>
        public int PrizeEmailSendStrangerNum { get; private set; }
        
        /// <summary>
        /// 发送预设邮件后可获得奖励
        /// <summary>
        public PrizeEmailSendReward_ PrizeEmailSendReward { get; private set; }
        
        /// <summary>
        /// 预设信件可编辑x字留言
        /// <summary>
        public int PrizeEmailMessageCount { get; private set; }
        
        /// <summary>
        /// 陌生人回复预设信件可获得的奖励
        /// <summary>
        public PrizeEmailStrangerReplyReward_ PrizeEmailStrangerReplyReward { get; private set; }
        
        /// <summary>
        /// 可保存x封玩家邮件
        /// <summary>
        public int PlayerEmailSaveCount { get; private set; }
        
        /// <summary>
        /// 每天给同一个玩家发送信件数上限
        /// <summary>
        public int PlayerEmailDailySendCount { get; private set; }
        
        /// <summary>
        /// 邮件标题字数限制
        /// <summary>
        public int EmailTitleCount { get; private set; }
        
        /// <summary>
        /// 纯交流信件（以及非首次发送的谜题信件）可编辑x字留言
        /// <summary>
        public int FreedomEmailMessageCount { get; private set; }
        
        /// <summary>
        /// 选择收件人时，【最近】页签下显示最近联系过的10个玩家
        /// <summary>
        public int EmailLatestConnectPersonCount { get; private set; }
        
        /// <summary>
        /// 购买体力次数和每次购买消耗元气石数量
        /// <summary>
        public EnergyRecoverPayment_[] EnergyRecoverPayments { get; private set; }
        
        /// <summary>
        /// 每日购买体力次数和花费重置时间
        /// <summary>
        public string PaymentResetTime { get; private set; }
        
        /// <summary>
        /// 英雄契约上限数量
        /// <summary>
        public int HeroContractMaxNumber { get; private set; }
        
        /// <summary>
        /// 每次升星可解锁开启契约数量
        /// <summary>
        public int HeroStarUpContractNnlockNumber { get; private set; }
        
        /// <summary>
        /// 单个契约上的潜力插槽数
        /// <summary>
        public int HeroContractSlotCount { get; private set; }
        
        /// <summary>
        /// 默认拥有契约数量
        /// <summary>
        public int DefaultContractNumber { get; private set; }
        
        /// <summary>
        /// 契约编号以及对应的限制插入英雄星级
        /// <summary>
        public ContractStarslimit_[] ContractStarslimits { get; private set; }
        
        /// <summary>
        /// 每次插槽的献身英雄需求数量
        /// <summary>
        public int HeroInjectionContractCount { get; private set; }
        
        /// <summary>
        /// 默认解锁赠送契约的英雄星级限制
        /// <summary>
        public int DefaultContractUnlockHeroStars { get; private set; }
        
        /// <summary>
        /// 契约插槽解锁等级限制(*举例1:1:20，第1份契约的第1个插槽需要20级解锁)
        /// <summary>
        public HeroContractUnlockSlotLevel_[] HeroContractUnlockSlotLevels { get; private set; }
        
        /// <summary>
        /// 小姐姐装备战斗力系数：攻击，爆击率，爆击伤害
        /// <summary>
        public double[] LordEquipPowerKeys { get; private set; }
        
        /// <summary>
        /// 天梯赛上赛季数据清除时间，单位为秒（*举例新赛季为2018/8/6 00:00:00开启，则清除数据为提前1小时的2018/8/5 23:00:00）
        /// <summary>
        public int PvpDataCleanTime { get; private set; }
        
        /// <summary>
        /// PVP天梯赛每次可作为挑战目标选择的人数
        /// <summary>
        public int PvpTargetPlayerCount { get; private set; }
        
        /// <summary>
        /// 天梯每次花费钻石可增加额外挑战的次数
        /// <summary>
        public int PvpDailyBuyEachPayAttackTimes { get; private set; }
        
        /// <summary>
        /// 每天重置PVP刷新购买价格和次数的时间
        /// <summary>
        public string PvpRefreshSettingTime { get; private set; }
        
        /// <summary>
        /// 赛季结束后间隔至发送奖励的时间，单位为秒
        /// <summary>
        public int PvpSeasonSettleTime { get; private set; }
        
        /// <summary>
        /// 天梯比赛战斗结束基础分数变动值
        /// <summary>
        public int PvpBaseChallengeScore { get; private set; }
        
        /// <summary>
        /// 天梯每日奖励发放时间
        /// <summary>
        public string PvpDailyRewardSendTime { get; private set; }
        
        /// <summary>
        /// 刷新按钮点击操作冷却时间，单位是毫秒
        /// <summary>
        public int RefreshPublicCoolDownTime { get; private set; }
        
        /// <summary>
        /// 龙之宝库消耗体力值（关卡类型2）
        /// <summary>
        public int DailyPlayGoldCost { get; private set; }
        
        /// <summary>
        /// 龙之宝库每天可挑战次数
        /// <summary>
        public int DailyPlayGoldTimes { get; private set; }
        
        /// <summary>
        /// 龙之宝库挑战倒计时，单位是毫秒
        /// <summary>
        public int GoldChallengeCountdown { get; private set; }
        
        /// <summary>
        /// 龙之宝库挑战开始前倒计时，单位是毫秒
        /// <summary>
        public int GoldChallengeStartCountdown { get; private set; }
        
        /// <summary>
        /// 女巫甜点屋消耗体力值（关卡类型3）
        /// <summary>
        public int DailyPlayExperienceCost { get; private set; }
        
        /// <summary>
        /// 女巫甜点屋每天可挑战次数
        /// <summary>
        public int DailyPlayExperienceTimes { get; private set; }
        
        /// <summary>
        /// 挑战倒计时，单位是毫秒
        /// <summary>
        public int ExperienceChallengeCountdown { get; private set; }
        
        /// <summary>
        /// 挑战开始前倒计时，单位是毫秒
        /// <summary>
        public int ExperienceChallengeStartCountdown { get; private set; }
        
        /// <summary>
        /// 不同类型的礼物增加的好感度值(精致的礼物，普通礼物，糟糕的礼物）
        /// <summary>
        public int[] GiftAddFavorCounts { get; private set; }
        
        /// <summary>
        /// 羁绊关卡消耗体力（关卡类型8）
        /// <summary>
        public int FavorDuplicateEnergyCost { get; private set; }
        
        /// <summary>
        /// 英雄主属性潜能SABC的分值
        /// <summary>
        public int[] HeroPropertyGradeScores { get; private set; }
        
        /// <summary>
        /// 英雄主属性潜能分值≥配置值时，被认为是高潜能英雄，抽卡展示界面需有特殊动画
        /// <summary>
        public int HighGradeScore { get; private set; }
        
        /// <summary>
        /// 每次推送N个符合条件的好友
        /// <summary>
        public int CommendFriendCount { get; private set; }
        
        /// <summary>
        /// 推荐好友的上下等级差,若无符合条件的，则扩展区间
        /// <summary>
        public int[] CommendFriendLevels { get; private set; }
        
        /// <summary>
        /// 推荐好友的登入时间（单位：小时），最近N小时内有上线过
        /// <summary>
        public int CommendFriendLoginTime { get; private set; }
        
        /// <summary>
        /// 好友系统每天可赠送x个人礼物
        /// <summary>
        public int FriendDailySendGiftCount { get; private set; }
        
        /// <summary>
        /// 好友系统每天可接收x个人的礼物
        /// <summary>
        public int FriendDailyReceiveGiftCount { get; private set; }
        
        /// <summary>
        /// 赠送礼物，双方可增加的亲密度数
        /// <summary>
        public int FriendSendGiftFriendshipPoint { get; private set; }
        
        /// <summary>
        /// 每天与单个玩家增加的亲密度上限
        /// <summary>
        public int DailyFriendshipPointGainLimit { get; private set; }
        
        /// <summary>
        /// 保存最近N条好友申请条目，超过从最早一条开始删
        /// <summary>
        public int FriendApplicationCount { get; private set; }
        
        /// <summary>
        /// 显示最近N个联系人（发生过私聊、信件交互的）
        /// <summary>
        public int RecentContactCount { get; private set; }
        
        /// <summary>
        /// 进阶次数对应的进阶技能类型，1类型为绝技、2类型为天赋、3类型为必杀（终结技）
        /// <summary>
        public HeroClassAdvanceSkill_[] HeroClassAdvanceSkills { get; private set; }
        
        /// <summary>
        /// 强化等级和可附魔条目对应
        /// <summary>
        public EquipmentEnhanceEnchantCount_[] EquipmentEnhanceEnchantCounts { get; private set; }
        
        /// <summary>
        /// 装备需要突破上限的强化等级
        /// <summary>
        public int[] EquipmentEnhanceBreakLevels { get; private set; }
        
        /// <summary>
        /// 装备强化总等级上限
        /// <summary>
        public int EquipmentEnhanceLevelMax { get; private set; }
        
        /// <summary>
        /// 不同品质附魔卷轴消耗价格
        /// <summary>
        public EquipmentEnchantPay_[] EquipmentEnchantPays { get; private set; }
        
        /// <summary>
        /// 契约编号以及对应的插槽插入英雄的需求数量
        /// <summary>
        public HeroContractNeedHeroNumber_[] HeroContractNeedHeroNumbers { get; private set; }
        
        /// <summary>
        /// 世界频道发言频率冷却时间（s）
        /// <summary>
        public int ChatSendMessageFrequency { get; private set; }
        
        /// <summary>
        /// 世界/公会/私聊发言文字数字限制
        /// <summary>
        public int ChatWordsLimitation { get; private set; }
        
        /// <summary>
        /// 世界频道在线期间聊天数量保存（条），超过数量从最早一条开始删
        /// <summary>
        public int WorldChatSaveNumber { get; private set; }
        
        /// <summary>
        /// 公会频道在线期间聊天数量保存（条），超过数量从最早一条开始删
        /// <summary>
        public int GuildChatSaveNumber { get; private set; }
        
        /// <summary>
        /// 私聊频道在线期间聊天数量保存（条），超过数量从最早一条开始删
        /// <summary>
        public int PrivateChatSaveNumber { get; private set; }
        
        /// <summary>
        /// 系统频道在线期间聊天数量保存（条），超过数量从最早一条开始删
        /// <summary>
        public int SystemChatSaveNumber { get; private set; }
        
        /// <summary>
        /// 语音时长（单位 s）
        /// <summary>
        public int VoiceChatTime { get; private set; }
        
        /// <summary>
        /// 界面跳转层数限制。超过层数做拦截（包括弹窗）。从进入主界面开始计算
        /// <summary>
        public int DropInterfaceLimit { get; private set; }
        
        /// <summary>
        /// 非法收藏家消耗体力值
        /// <summary>
        public int DailyPlayEquipmentMaterialsCost { get; private set; }
        
        /// <summary>
        /// 非法收藏家每天可挑战次数
        /// <summary>
        public int DailyPlayEquipmentMaterialsTimes { get; private set; }
        
        /// <summary>
        /// 挑战倒计时
        /// <summary>
        public int EquipmentMaterialsChallengeCountdown { get; private set; }
        
        /// <summary>
        /// 挑战开始前倒计时
        /// <summary>
        public int EquipmentMaterialsChallengeStartCountdown { get; private set; }
        
        /// <summary>
        /// 光明邮政总部消耗体力值
        /// <summary>
        public int DailyPlayContractMaterialsCost { get; private set; }
        
        /// <summary>
        /// 光明邮政总部每天可挑战次数
        /// <summary>
        public int DailyPlayContractMaterialsTimes { get; private set; }
        
        /// <summary>
        /// 挑战倒计时
        /// <summary>
        public int ContractMaterialsChallengeCountdown { get; private set; }
        
        /// <summary>
        /// 挑战开始前倒计时
        /// <summary>
        public int ContractMaterialsChallengeStartCountdown { get; private set; }
        
        /// <summary>
        /// 测试发信，填写收件人id（测试完后删除）
        /// <summary>
        public int TestEmailToSb { get; private set; }
        
        /// <summary>
        /// 树叶飘落间隔时间（单位:毫秒）
        /// <summary>
        public int LeafFallInterval { get; private set; }
        
        /// <summary>
        /// 树叶飘落1次消耗的时间（单位：毫秒）
        /// <summary>
        public int LeafFallTime { get; private set; }
        
        /// <summary>
        /// 月卡续费时间（到期前N天可购买）（单位：天）
        /// <summary>
        public int MonthCardRebuyTime { get; private set; }
        
        /// <summary>
        /// buff卡，普通月卡，豪华月卡生效天数（单位：天），仅供客户端显示用
        /// <summary>
        public int[] MonthCardEffectTimes { get; private set; }
        
        /// <summary>
        /// 每日签到从哪个id开始循环（注：配置7的倍数+1）
        /// <summary>
        public int DailyBonusCycleId { get; private set; }
        
        /// <summary>
        /// 新手开启或关闭（0=关闭 1=开启）
        /// <summary>
        public int GuideCondition { get; private set; }
        
        /// <summary>
        /// 新手跳过结算的房间id
        /// <summary>
        public int GuideSkipResultRoomId { get; private set; }
        
        /// <summary>
        /// 未强化的装备品质返还金币
        /// <summary>
        public EquipmentDecomposeGoldReturn_[] EquipmentDecomposeGoldReturns { get; private set; }
        
        /// <summary>
        /// 品质返还材料和数量
        /// <summary>
        public EquipmentDecomposeMaterialReturn_[] EquipmentDecomposeMaterialReturns { get; private set; }
        
        /// <summary>
        /// 不同品质装备在拆解后的返还系数
        /// <summary>
        public double[] EquipmentDecomposeReturnCoefficients { get; private set; }
        
        /// <summary>
        /// 单次同时拆解装备的上限数量
        /// <summary>
        public int EquipmentDecomposeMax { get; private set; }
        
        /// <summary>
        /// 每日购买体力次数
        /// <summary>
        public int BuyEnergy { get; private set; }
        
        /// <summary>
        /// 每日购买天梯次数
        /// <summary>
        public int BuyCrossPerson { get; private set; }
        
        /// <summary>
        /// 每日珍奇市场刷新次数
        /// <summary>
        public int TreasureShopRefresh { get; private set; }
        
        /// <summary>
        /// 每日竞技商店可刷新次数
        /// <summary>
        public int LadderShopRefresh { get; private set; }
        
        /// <summary>
        /// 每日公会商店可刷新次数
        /// <summary>
        public int GuildShopRefresh { get; private set; }
        
        /// <summary>
        /// 每日魔法工坊可刷新次数
        /// <summary>
        public int PointShopRefresh { get; private set; }
        
        /// <summary>
        /// 每日魔骸商店可刷新次数
        /// <summary>
        public int DecompositionShopRefresh { get; private set; }
        
        /// <summary>
        /// 每日龙之宝库可购买挑战次数
        /// <summary>
        public int DailyPlayGoldRefresh { get; private set; }
        
        /// <summary>
        /// 每日女巫甜点屋可购买次数
        /// <summary>
        public int DailyPlayExpRefresh { get; private set; }
        
        /// <summary>
        /// 每日非法收藏家可购买次数
        /// <summary>
        public int DailyPlayEquipmentMaterialsRefresh { get; private set; }
        
        /// <summary>
        /// 每日光明邮政总部可购买次数
        /// <summary>
        public int DailyPlayContractMaterialsRefresh { get; private set; }
        
        /// <summary>
        /// 每日血月潮汐可购买次数
        /// <summary>
        public int BossRushRefresh { get; private set; }
        
        /// <summary>
        /// 当玩家队伍达到指定等级后，有几率触发npc。
        /// <summary>
        public int BuildingNpcAppearLevel { get; private set; }
        
        /// <summary>
        /// npc触发概率（万分比）
        /// <summary>
        public int BuildingNpcAppearRate { get; private set; }
        
        /// <summary>
        /// 每天最多会触发n次npc入场，每日0点刷新。
        /// <summary>
        public int BuildingNpcAppearDailyTimes { get; private set; }
        
        /// <summary>
        /// 板娘出现后停留时间（单位：分钟）
        /// <summary>
        public int BuildingNpcStayTimes { get; private set; }
        
        /// <summary>
        /// 自继承形象预览读取魔物星级
        /// <summary>
        public int[] ShowHeroPreviewStars { get; private set; }
        
        /// <summary>
        /// 每日签到活动默认npc形象
        /// <summary>
        public int ActivityDailySignNpc { get; private set; }
        
        /// <summary>
        /// 魔物星级解锁对应系统（Type1绝技2必杀3天赋4进阶5新形象6契约）
        /// <summary>
        public StarRisingUnlock_[] StarRisingUnlocks { get; private set; }
        
        /// <summary>
        /// 1=龙之宝库（对应关卡类型2）  2=女巫甜点屋（关卡类型3）3=非法收藏家（关卡类型4） 4=光明邮政总局（关卡类型5）
        /// <summary>
        public int[] DailyPlayEntryShowLists { get; private set; }
        
        /// <summary>
        /// 挂机时间上限（单位：小时），大于配置值时，将不继续产收益。
        /// <summary>
        public int HangUpTimeLimit { get; private set; }
        
        /// <summary>
        /// 不同个挂机时间播放不同动画，一共4种(单位：秒）
        /// <summary>
        public int[] HangUpRewardAnimations { get; private set; }
        
        /// <summary>
        /// 挂机敌方单个怪物受击n次死亡
        /// <summary>
        public int HangUpKillEnemyCount { get; private set; }
        
        /// <summary>
        /// 英雄升级金币消耗
        /// <summary>
        public int HeroLevelUpgradeGoldCost { get; private set; }
        
        /// <summary>
        /// 关卡类型为1的战斗，当通关指定关卡后，出现【下一关】按钮
        /// <summary>
        public int DuplicateNextButtonUnlock { get; private set; }
        
        /// <summary>
        /// 荣耀竞技场调用的关卡id
        /// <summary>
        public int PvpDuplicateId { get; private set; }
        
        /// <summary>
        /// 主界面广告图滚动间隔时间（单位：秒）
        /// <summary>
        public int HomePageActivityImageRollingInterval { get; private set; }
        
        /// <summary>
        /// 未成年人禁止游戏时间段
        /// <summary>
        public string ChildForbidTime { get; private set; }
        
        /// <summary>
        /// 未成年人的游戏时间限制，工作日90分钟，节假日180分钟，配置单位均为分钟
        /// <summary>
        public ChildPlayTime_ ChildPlayTime { get; private set; }
        
        /// <summary>
        /// 英雄重置的费用
        /// <summary>
        public int HeroResetCost { get; private set; }
        
        /// <summary>
        /// 英雄重置的最小等级，用于列表里显示的等级
        /// <summary>
        public int HeoResetMinLevel { get; private set; }
        
        /// <summary>
        /// 创建公会消耗钻石
        /// <summary>
        public int CreateGuildCost { get; private set; }
        
        /// <summary>
        /// 离开公会多长时间不可以加入（单位：秒）
        /// <summary>
        public int AddGuildTime { get; private set; }
        
        /// <summary>
        /// 公会名称限制汉字数量
        /// <summary>
        public int GuildNameLimit { get; private set; }
        
        /// <summary>
        /// 最多同时申请几个公会
        /// <summary>
        public int GuildJoinMaxCount { get; private set; }
        
        /// <summary>
        /// 公会申请列表最大人数
        /// <summary>
        public int GuildApplyListCount { get; private set; }
        
        /// <summary>
        /// 副会长人数
        /// <summary>
        public int GuildVicePresidentCount { get; private set; }
        
        /// <summary>
        /// 成员人数
        /// <summary>
        public int GuildUserCount { get; private set; }
        
        /// <summary>
        /// 公会总人数
        /// <summary>
        public int GuildAllUserCount { get; private set; }
        
        /// <summary>
        /// 公会公告字符长度（汉字）
        /// <summary>
        public int GuildAnnouncementCount { get; private set; }
        
        /// <summary>
        /// 公会援助英雄数量(最多出借4个，不然UI放不下）
        /// <summary>
        public int GuildAssistanceHeroCount { get; private set; }
        
        /// <summary>
        /// 公会图标（最多配置12个）
        /// <summary>
        public string[] GuildIcons { get; private set; }
        
        /// <summary>
        /// 公会援助请求次数（每日00：00刷新）
        /// <summary>
        public int GuildSeekHelpNum { get; private set; }
        
        /// <summary>
        /// 酒馆任务给工会增加活跃度
        /// <summary>
        public int TavernTaskBrisk { get; private set; }
        
        /// <summary>
        /// 工会副本每天每个委托可挑战次数
        /// <summary>
        public int GveMapBattleCount { get; private set; }
        
        /// <summary>
        /// 公会副本玩家牌库地、水、火、风各元素卡牌数量（总和四元素相加总数）
        /// <summary>
        public int[] GveDuplicateCardElementCounts { get; private set; }
        
        /// <summary>
        /// 公会副本玩家每回合补充手牌的最大数量
        /// <summary>
        public int GveDuplicateHandCard { get; private set; }
        
        /// <summary>
        /// 公会副本回合准备时间
        /// <summary>
        public int GveDuplicateRoundTime { get; private set; }
        
        /// <summary>
        /// 公会副本胜利移除卡牌数量
        /// <summary>
        public int GveDuplicateWinDeleteCardCount { get; private set; }
        
        /// <summary>
        /// 公会副本失败移除卡牌数量
        /// <summary>
        public int GveDuplicateLoseDeleteCardCount { get; private set; }
        
        /// <summary>
        /// 公会副本结束判定任意一方移除卡排数量大于等于该值
        /// <summary>
        public int GveDuplicateOverCardCount { get; private set; }
        
        /// <summary>
        /// 公会副本每张牌扣除BOSS血量系数
        /// <summary>
        public int GveDuplicateBossLossHpCount { get; private set; }
        
        /// <summary>
        /// 公会副本对BOSS每造成1点伤害获得金币系数
        /// <summary>
        public int GveDuplicateRewardGold { get; private set; }
        
        public void Read(IConfigElement element)
        {
            this.NameLimit = GeneratorUtility.Get(element, "NameLimit",this.NameLimit);
            this.DefaultDropGroup = GeneratorUtility.Get(element, "DefaultDropGroup",this.DefaultDropGroup);
            this.ChangeNameCost = GeneratorUtility.Get(element, "ChangeNameCost",this.ChangeNameCost);
            this.PlayeEnergyRecoverTime = GeneratorUtility.Get(element, "PlayeEnergyRecoverTime",this.PlayeEnergyRecoverTime);
            this.FieldHeroNumLimits = GeneratorUtility.Get(element, "FieldHeroNumLimits",this.FieldHeroNumLimits);
            this.FormationNameLimit = GeneratorUtility.Get(element, "FormationNameLimit",this.FormationNameLimit);
            this.FormationCareerLimit = GeneratorUtility.Get(element, "FormationCareerLimit",this.FormationCareerLimit);
            this.InitialFormaitonHeros = GeneratorUtility.Get(element, "InitialFormaitonHeros",this.InitialFormaitonHeros);
            this.FormationCount = GeneratorUtility.Get(element, "FormationCount",this.FormationCount);
            this.HeroNormalTalentCountLimit = GeneratorUtility.Get(element, "HeroNormalTalentCountLimit",this.HeroNormalTalentCountLimit);
            this.HeroHealthCorrectionBase = GeneratorUtility.Get(element, "HeroHealthCorrectionBase",this.HeroHealthCorrectionBase);
            this.HeroHealthCorrectionCoe = GeneratorUtility.Get(element, "HeroHealthCorrectionCoe",this.HeroHealthCorrectionCoe);
            this.HeroAttackCorrectionBase = GeneratorUtility.Get(element, "HeroAttackCorrectionBase",this.HeroAttackCorrectionBase);
            this.HeroAttackCorrectionCoe = GeneratorUtility.Get(element, "HeroAttackCorrectionCoe",this.HeroAttackCorrectionCoe);
            this.HeroDodgeCorrectionBase = GeneratorUtility.Get(element, "HeroDodgeCorrectionBase",this.HeroDodgeCorrectionBase);
            this.HeroDodgeCorrectionCoe = GeneratorUtility.Get(element, "HeroDodgeCorrectionCoe",this.HeroDodgeCorrectionCoe);
            this.HeroCritCorrectionBase = GeneratorUtility.Get(element, "HeroCritCorrectionBase",this.HeroCritCorrectionBase);
            this.HeroCritCorrectionCoe = GeneratorUtility.Get(element, "HeroCritCorrectionCoe",this.HeroCritCorrectionCoe);
            this.HeroBlckCorrectionBase = GeneratorUtility.Get(element, "HeroBlckCorrectionBase",this.HeroBlckCorrectionBase);
            this.HeroBlckCorrectionCoe = GeneratorUtility.Get(element, "HeroBlckCorrectionCoe",this.HeroBlckCorrectionCoe);
            this.ShowHealthCoe = GeneratorUtility.Get(element, "ShowHealthCoe",this.ShowHealthCoe);
            this.ShowAttackCoe = GeneratorUtility.Get(element, "ShowAttackCoe",this.ShowAttackCoe);
            this.ShowDodgeCoe = GeneratorUtility.Get(element, "ShowDodgeCoe",this.ShowDodgeCoe);
            this.ShowCritCoe = GeneratorUtility.Get(element, "ShowCritCoe",this.ShowCritCoe);
            this.ShowVitCoe = GeneratorUtility.Get(element, "ShowVitCoe",this.ShowVitCoe);
            this.ShowStrCoe = GeneratorUtility.Get(element, "ShowStrCoe",this.ShowStrCoe);
            this.ShowAgiCoe = GeneratorUtility.Get(element, "ShowAgiCoe",this.ShowAgiCoe);
            this.ShowDexCoe = GeneratorUtility.Get(element, "ShowDexCoe",this.ShowDexCoe);
            this.ShowDefenseNumCoe = GeneratorUtility.Get(element, "ShowDefenseNumCoe",this.ShowDefenseNumCoe);
            this.ShowDefenseRateCoe = GeneratorUtility.Get(element, "ShowDefenseRateCoe",this.ShowDefenseRateCoe);
            this.ShowElementCoe = GeneratorUtility.Get(element, "ShowElementCoe",this.ShowElementCoe);
            this.ShowCritDamCoe = GeneratorUtility.Get(element, "ShowCritDamCoe",this.ShowCritDamCoe);
            this.DodgePowerCorrection = GeneratorUtility.Get(element, "DodgePowerCorrection",this.DodgePowerCorrection);
            this.CritPowerCorrection = GeneratorUtility.Get(element, "CritPowerCorrection",this.CritPowerCorrection);
            this.BlockPowerCorrection = GeneratorUtility.Get(element, "BlockPowerCorrection",this.BlockPowerCorrection);
            this.HeroAttributeEvaluation = GeneratorUtility.Get(element, "HeroAttributeEvaluation",this.HeroAttributeEvaluation);
            this.HeroLevelLimits = GeneratorUtility.Get(element, "HeroLevelLimits",this.HeroLevelLimits);
            this.HeroStarLimit = GeneratorUtility.Get(element, "HeroStarLimit",this.HeroStarLimit);
            this.HeroStarUpNeedCards = GeneratorUtility.Get(element, "HeroStarUpNeedCards",this.HeroStarUpNeedCards);
            this.HeroStarUpNeedGolds = GeneratorUtility.Get(element, "HeroStarUpNeedGolds",this.HeroStarUpNeedGolds);
            this.HeroStarUpGainNormalTalents = GeneratorUtility.Get(element, "HeroStarUpGainNormalTalents",this.HeroStarUpGainNormalTalents);
            this.HeroStarUpCancelGiveCards = GeneratorUtility.Get(element, "HeroStarUpCancelGiveCards",this.HeroStarUpCancelGiveCards);
            this.HeroStarUpCancelGiveGold = GeneratorUtility.Get(element, "HeroStarUpCancelGiveGold",this.HeroStarUpCancelGiveGold);
            this.HeroLearningNeedGolds = GeneratorUtility.Get(element, "HeroLearningNeedGolds",this.HeroLearningNeedGolds);
            this.HeroClassNeedCards = GeneratorUtility.Get(element, "HeroClassNeedCards",this.HeroClassNeedCards);
            this.HeroSkillTrainingGiveExpCoe = GeneratorUtility.Get(element, "HeroSkillTrainingGiveExpCoe",this.HeroSkillTrainingGiveExpCoe);
            this.NormalLotteryFreeTime = GeneratorUtility.Get(element, "NormalLotteryFreeTime",this.NormalLotteryFreeTime);
            this.SpecialLotteryFreeTime = GeneratorUtility.Get(element, "SpecialLotteryFreeTime",this.SpecialLotteryFreeTime);
            this.LotteryTicketDiamondCost = GeneratorUtility.Get(element, "LotteryTicketDiamondCost",this.LotteryTicketDiamondCost);
            this.SpecialLotteryPrice = GeneratorUtility.Get(element, "SpecialLotteryPrice",this.SpecialLotteryPrice);
            this.SpecialLotteryOneDrawNormalNum = GeneratorUtility.Get(element, "SpecialLotteryOneDrawNormalNum",this.SpecialLotteryOneDrawNormalNum);
            this.OrangeCardBaseCount = GeneratorUtility.Get(element, "OrangeCardBaseCount",this.OrangeCardBaseCount);
            this.LotteryPointBonus = GeneratorUtility.Get(element, "LotteryPointBonus",this.LotteryPointBonus);
            this.ActivityLotteryOneDrawNormalNum = GeneratorUtility.Get(element, "ActivityLotteryOneDrawNormalNum",this.ActivityLotteryOneDrawNormalNum);
            this.SpecialWorkProbility = GeneratorUtility.Get(element, "SpecialWorkProbility",this.SpecialWorkProbility);
            this.HeroWorkPickRewardInterval = GeneratorUtility.Get(element, "HeroWorkPickRewardInterval",this.HeroWorkPickRewardInterval);
            this.HeroWorkHeroExpPickRewardInterval = GeneratorUtility.Get(element, "HeroWorkHeroExpPickRewardInterval",this.HeroWorkHeroExpPickRewardInterval);
            this.ResourceAnimationIntervals = GeneratorUtility.Get(element, "ResourceAnimationIntervals",this.ResourceAnimationIntervals);
            this.AllRecivedIconUnlockLevel = GeneratorUtility.Get(element, "AllRecivedIconUnlockLevel",this.AllRecivedIconUnlockLevel);
            this.RankListNumber = GeneratorUtility.Get(element, "RankListNumber",this.RankListNumber);
            this.RankLimitNumer = GeneratorUtility.Get(element, "RankLimitNumer",this.RankLimitNumer);
            this.ListRefreshTime = GeneratorUtility.Get(element, "ListRefreshTime",this.ListRefreshTime);
            this.BlueEquipmentSyntheticNumber = GeneratorUtility.Get(element, "BlueEquipmentSyntheticNumber",this.BlueEquipmentSyntheticNumber);
            this.PurpleEquipmentSyntheticNumber = GeneratorUtility.Get(element, "PurpleEquipmentSyntheticNumber",this.PurpleEquipmentSyntheticNumber);
            this.GoldenEquipmentSyntheticNumber = GeneratorUtility.Get(element, "GoldenEquipmentSyntheticNumber",this.GoldenEquipmentSyntheticNumber);
            this.GoldenEquipmentSyntheticNumbers = GeneratorUtility.Get(element, "GoldenEquipmentSyntheticNumbers",this.GoldenEquipmentSyntheticNumbers);
            this.NormalDuplicateEnergyCost = GeneratorUtility.Get(element, "NormalDuplicateEnergyCost",this.NormalDuplicateEnergyCost);
            this.ChallengeDuplicateEnergyCost = GeneratorUtility.Get(element, "ChallengeDuplicateEnergyCost",this.ChallengeDuplicateEnergyCost);
            this.BuildingUpgradeMaxCount = GeneratorUtility.Get(element, "BuildingUpgradeMaxCount",this.BuildingUpgradeMaxCount);
            this.BuildingUpgradeReturnFactor = GeneratorUtility.Get(element, "BuildingUpgradeReturnFactor",this.BuildingUpgradeReturnFactor);
            this.BuildingUpgradeDiamondCost = GeneratorUtility.Get(element, "BuildingUpgradeDiamondCost",this.BuildingUpgradeDiamondCost);
            this.WorkSpeedUpDiamondCost = GeneratorUtility.Get(element, "WorkSpeedUpDiamondCost",this.WorkSpeedUpDiamondCost);
            this.PvpCoolDownTime = GeneratorUtility.Get(element, "PvpCoolDownTime",this.PvpCoolDownTime);
            this.PvpAttackFreeTimes = GeneratorUtility.Get(element, "PvpAttackFreeTimes",this.PvpAttackFreeTimes);
            this.PvpSettlementDayPerWeek = GeneratorUtility.Get(element, "PvpSettlementDayPerWeek",this.PvpSettlementDayPerWeek);
            this.PvpSettlementTimePerWeek = GeneratorUtility.Get(element, "PvpSettlementTimePerWeek",this.PvpSettlementTimePerWeek);
            this.ReturnTechnologyMaterialPercentage = GeneratorUtility.Get(element, "ReturnTechnologyMaterialPercentage",this.ReturnTechnologyMaterialPercentage);
            this.LordLevelLimted = GeneratorUtility.Get(element, "LordLevelLimted",this.LordLevelLimted);
            this.EquipmentBagLimted = GeneratorUtility.Get(element, "EquipmentBagLimted",this.EquipmentBagLimted);
            this.TechnologyResetCost = GeneratorUtility.Get(element, "TechnologyResetCost",this.TechnologyResetCost);
            this.DailyTaskWeights = GeneratorUtility.Get(element, "DailyTaskWeights",this.DailyTaskWeights);
            this.ReleaseTaskCounts = GeneratorUtility.Get(element, "ReleaseTaskCounts",this.ReleaseTaskCounts);
            this.ReceiveTaskCounts = GeneratorUtility.Get(element, "ReceiveTaskCounts",this.ReceiveTaskCounts);
            this.TavernSpeechShowTime = GeneratorUtility.Get(element, "TavernSpeechShowTime",this.TavernSpeechShowTime);
            this.TavernSpeechAppearInterval = GeneratorUtility.Get(element, "TavernSpeechAppearInterval",this.TavernSpeechAppearInterval);
            this.HeroCommentWordLimit = GeneratorUtility.Get(element, "HeroCommentWordLimit",this.HeroCommentWordLimit);
            this.HeroCommentCountLimit = GeneratorUtility.Get(element, "HeroCommentCountLimit",this.HeroCommentCountLimit);
            this.HeroCommentNumber = GeneratorUtility.Get(element, "HeroCommentNumber",this.HeroCommentNumber);
            this.HeroCommentLatestNumber = GeneratorUtility.Get(element, "HeroCommentLatestNumber",this.HeroCommentLatestNumber);
            this.AdvertisingMapInterval = GeneratorUtility.Get(element, "AdvertisingMapInterval",this.AdvertisingMapInterval);
            this.EmailLimited = GeneratorUtility.Get(element, "EmailLimited",this.EmailLimited);
            this.SystemEmailExpireTime = GeneratorUtility.Get(element, "SystemEmailExpireTime",this.SystemEmailExpireTime);
            this.PrizeEmailPlayerLevels = GeneratorUtility.Get(element, "PrizeEmailPlayerLevels",this.PrizeEmailPlayerLevels);
            this.PrizeEmailPlayerReceiveEmailCondition = GeneratorUtility.Get(element, "PrizeEmailPlayerReceiveEmailCondition",this.PrizeEmailPlayerReceiveEmailCondition);
            this.PrizeEmailSendStrangerNum = GeneratorUtility.Get(element, "PrizeEmailSendStrangerNum",this.PrizeEmailSendStrangerNum);
            this.PrizeEmailSendReward = GeneratorUtility.Get(element, "PrizeEmailSendReward",this.PrizeEmailSendReward);
            this.PrizeEmailMessageCount = GeneratorUtility.Get(element, "PrizeEmailMessageCount",this.PrizeEmailMessageCount);
            this.PrizeEmailStrangerReplyReward = GeneratorUtility.Get(element, "PrizeEmailStrangerReplyReward",this.PrizeEmailStrangerReplyReward);
            this.PlayerEmailSaveCount = GeneratorUtility.Get(element, "PlayerEmailSaveCount",this.PlayerEmailSaveCount);
            this.PlayerEmailDailySendCount = GeneratorUtility.Get(element, "PlayerEmailDailySendCount",this.PlayerEmailDailySendCount);
            this.EmailTitleCount = GeneratorUtility.Get(element, "EmailTitleCount",this.EmailTitleCount);
            this.FreedomEmailMessageCount = GeneratorUtility.Get(element, "FreedomEmailMessageCount",this.FreedomEmailMessageCount);
            this.EmailLatestConnectPersonCount = GeneratorUtility.Get(element, "EmailLatestConnectPersonCount",this.EmailLatestConnectPersonCount);
            this.EnergyRecoverPayments = GeneratorUtility.Get(element, "EnergyRecoverPayments",this.EnergyRecoverPayments);
            this.PaymentResetTime = GeneratorUtility.Get(element, "PaymentResetTime",this.PaymentResetTime);
            this.HeroContractMaxNumber = GeneratorUtility.Get(element, "HeroContractMaxNumber",this.HeroContractMaxNumber);
            this.HeroStarUpContractNnlockNumber = GeneratorUtility.Get(element, "HeroStarUpContractNnlockNumber",this.HeroStarUpContractNnlockNumber);
            this.HeroContractSlotCount = GeneratorUtility.Get(element, "HeroContractSlotCount",this.HeroContractSlotCount);
            this.DefaultContractNumber = GeneratorUtility.Get(element, "DefaultContractNumber",this.DefaultContractNumber);
            this.ContractStarslimits = GeneratorUtility.Get(element, "ContractStarslimits",this.ContractStarslimits);
            this.HeroInjectionContractCount = GeneratorUtility.Get(element, "HeroInjectionContractCount",this.HeroInjectionContractCount);
            this.DefaultContractUnlockHeroStars = GeneratorUtility.Get(element, "DefaultContractUnlockHeroStars",this.DefaultContractUnlockHeroStars);
            this.HeroContractUnlockSlotLevels = GeneratorUtility.Get(element, "HeroContractUnlockSlotLevels",this.HeroContractUnlockSlotLevels);
            this.LordEquipPowerKeys = GeneratorUtility.Get(element, "LordEquipPowerKeys",this.LordEquipPowerKeys);
            this.PvpDataCleanTime = GeneratorUtility.Get(element, "PvpDataCleanTime",this.PvpDataCleanTime);
            this.PvpTargetPlayerCount = GeneratorUtility.Get(element, "PvpTargetPlayerCount",this.PvpTargetPlayerCount);
            this.PvpDailyBuyEachPayAttackTimes = GeneratorUtility.Get(element, "PvpDailyBuyEachPayAttackTimes",this.PvpDailyBuyEachPayAttackTimes);
            this.PvpRefreshSettingTime = GeneratorUtility.Get(element, "PvpRefreshSettingTime",this.PvpRefreshSettingTime);
            this.PvpSeasonSettleTime = GeneratorUtility.Get(element, "PvpSeasonSettleTime",this.PvpSeasonSettleTime);
            this.PvpBaseChallengeScore = GeneratorUtility.Get(element, "PvpBaseChallengeScore",this.PvpBaseChallengeScore);
            this.PvpDailyRewardSendTime = GeneratorUtility.Get(element, "PvpDailyRewardSendTime",this.PvpDailyRewardSendTime);
            this.RefreshPublicCoolDownTime = GeneratorUtility.Get(element, "RefreshPublicCoolDownTime",this.RefreshPublicCoolDownTime);
            this.DailyPlayGoldCost = GeneratorUtility.Get(element, "DailyPlayGoldCost",this.DailyPlayGoldCost);
            this.DailyPlayGoldTimes = GeneratorUtility.Get(element, "DailyPlayGoldTimes",this.DailyPlayGoldTimes);
            this.GoldChallengeCountdown = GeneratorUtility.Get(element, "GoldChallengeCountdown",this.GoldChallengeCountdown);
            this.GoldChallengeStartCountdown = GeneratorUtility.Get(element, "GoldChallengeStartCountdown",this.GoldChallengeStartCountdown);
            this.DailyPlayExperienceCost = GeneratorUtility.Get(element, "DailyPlayExperienceCost",this.DailyPlayExperienceCost);
            this.DailyPlayExperienceTimes = GeneratorUtility.Get(element, "DailyPlayExperienceTimes",this.DailyPlayExperienceTimes);
            this.ExperienceChallengeCountdown = GeneratorUtility.Get(element, "ExperienceChallengeCountdown",this.ExperienceChallengeCountdown);
            this.ExperienceChallengeStartCountdown = GeneratorUtility.Get(element, "ExperienceChallengeStartCountdown",this.ExperienceChallengeStartCountdown);
            this.GiftAddFavorCounts = GeneratorUtility.Get(element, "GiftAddFavorCounts",this.GiftAddFavorCounts);
            this.FavorDuplicateEnergyCost = GeneratorUtility.Get(element, "FavorDuplicateEnergyCost",this.FavorDuplicateEnergyCost);
            this.HeroPropertyGradeScores = GeneratorUtility.Get(element, "HeroPropertyGradeScores",this.HeroPropertyGradeScores);
            this.HighGradeScore = GeneratorUtility.Get(element, "HighGradeScore",this.HighGradeScore);
            this.CommendFriendCount = GeneratorUtility.Get(element, "CommendFriendCount",this.CommendFriendCount);
            this.CommendFriendLevels = GeneratorUtility.Get(element, "CommendFriendLevels",this.CommendFriendLevels);
            this.CommendFriendLoginTime = GeneratorUtility.Get(element, "CommendFriendLoginTime",this.CommendFriendLoginTime);
            this.FriendDailySendGiftCount = GeneratorUtility.Get(element, "FriendDailySendGiftCount",this.FriendDailySendGiftCount);
            this.FriendDailyReceiveGiftCount = GeneratorUtility.Get(element, "FriendDailyReceiveGiftCount",this.FriendDailyReceiveGiftCount);
            this.FriendSendGiftFriendshipPoint = GeneratorUtility.Get(element, "FriendSendGiftFriendshipPoint",this.FriendSendGiftFriendshipPoint);
            this.DailyFriendshipPointGainLimit = GeneratorUtility.Get(element, "DailyFriendshipPointGainLimit",this.DailyFriendshipPointGainLimit);
            this.FriendApplicationCount = GeneratorUtility.Get(element, "FriendApplicationCount",this.FriendApplicationCount);
            this.RecentContactCount = GeneratorUtility.Get(element, "RecentContactCount",this.RecentContactCount);
            this.HeroClassAdvanceSkills = GeneratorUtility.Get(element, "HeroClassAdvanceSkills",this.HeroClassAdvanceSkills);
            this.EquipmentEnhanceEnchantCounts = GeneratorUtility.Get(element, "EquipmentEnhanceEnchantCounts",this.EquipmentEnhanceEnchantCounts);
            this.EquipmentEnhanceBreakLevels = GeneratorUtility.Get(element, "EquipmentEnhanceBreakLevels",this.EquipmentEnhanceBreakLevels);
            this.EquipmentEnhanceLevelMax = GeneratorUtility.Get(element, "EquipmentEnhanceLevelMax",this.EquipmentEnhanceLevelMax);
            this.EquipmentEnchantPays = GeneratorUtility.Get(element, "EquipmentEnchantPays",this.EquipmentEnchantPays);
            this.HeroContractNeedHeroNumbers = GeneratorUtility.Get(element, "HeroContractNeedHeroNumbers",this.HeroContractNeedHeroNumbers);
            this.ChatSendMessageFrequency = GeneratorUtility.Get(element, "ChatSendMessageFrequency",this.ChatSendMessageFrequency);
            this.ChatWordsLimitation = GeneratorUtility.Get(element, "ChatWordsLimitation",this.ChatWordsLimitation);
            this.WorldChatSaveNumber = GeneratorUtility.Get(element, "WorldChatSaveNumber",this.WorldChatSaveNumber);
            this.GuildChatSaveNumber = GeneratorUtility.Get(element, "GuildChatSaveNumber",this.GuildChatSaveNumber);
            this.PrivateChatSaveNumber = GeneratorUtility.Get(element, "PrivateChatSaveNumber",this.PrivateChatSaveNumber);
            this.SystemChatSaveNumber = GeneratorUtility.Get(element, "SystemChatSaveNumber",this.SystemChatSaveNumber);
            this.VoiceChatTime = GeneratorUtility.Get(element, "VoiceChatTime",this.VoiceChatTime);
            this.DropInterfaceLimit = GeneratorUtility.Get(element, "DropInterfaceLimit",this.DropInterfaceLimit);
            this.DailyPlayEquipmentMaterialsCost = GeneratorUtility.Get(element, "DailyPlayEquipmentMaterialsCost",this.DailyPlayEquipmentMaterialsCost);
            this.DailyPlayEquipmentMaterialsTimes = GeneratorUtility.Get(element, "DailyPlayEquipmentMaterialsTimes",this.DailyPlayEquipmentMaterialsTimes);
            this.EquipmentMaterialsChallengeCountdown = GeneratorUtility.Get(element, "EquipmentMaterialsChallengeCountdown",this.EquipmentMaterialsChallengeCountdown);
            this.EquipmentMaterialsChallengeStartCountdown = GeneratorUtility.Get(element, "EquipmentMaterialsChallengeStartCountdown",this.EquipmentMaterialsChallengeStartCountdown);
            this.DailyPlayContractMaterialsCost = GeneratorUtility.Get(element, "DailyPlayContractMaterialsCost",this.DailyPlayContractMaterialsCost);
            this.DailyPlayContractMaterialsTimes = GeneratorUtility.Get(element, "DailyPlayContractMaterialsTimes",this.DailyPlayContractMaterialsTimes);
            this.ContractMaterialsChallengeCountdown = GeneratorUtility.Get(element, "ContractMaterialsChallengeCountdown",this.ContractMaterialsChallengeCountdown);
            this.ContractMaterialsChallengeStartCountdown = GeneratorUtility.Get(element, "ContractMaterialsChallengeStartCountdown",this.ContractMaterialsChallengeStartCountdown);
            this.TestEmailToSb = GeneratorUtility.Get(element, "TestEmailToSb",this.TestEmailToSb);
            this.LeafFallInterval = GeneratorUtility.Get(element, "LeafFallInterval",this.LeafFallInterval);
            this.LeafFallTime = GeneratorUtility.Get(element, "LeafFallTime",this.LeafFallTime);
            this.MonthCardRebuyTime = GeneratorUtility.Get(element, "MonthCardRebuyTime",this.MonthCardRebuyTime);
            this.MonthCardEffectTimes = GeneratorUtility.Get(element, "MonthCardEffectTimes",this.MonthCardEffectTimes);
            this.DailyBonusCycleId = GeneratorUtility.Get(element, "DailyBonusCycleId",this.DailyBonusCycleId);
            this.GuideCondition = GeneratorUtility.Get(element, "GuideCondition",this.GuideCondition);
            this.GuideSkipResultRoomId = GeneratorUtility.Get(element, "GuideSkipResultRoomId",this.GuideSkipResultRoomId);
            this.EquipmentDecomposeGoldReturns = GeneratorUtility.Get(element, "EquipmentDecomposeGoldReturns",this.EquipmentDecomposeGoldReturns);
            this.EquipmentDecomposeMaterialReturns = GeneratorUtility.Get(element, "EquipmentDecomposeMaterialReturns",this.EquipmentDecomposeMaterialReturns);
            this.EquipmentDecomposeReturnCoefficients = GeneratorUtility.Get(element, "EquipmentDecomposeReturnCoefficients",this.EquipmentDecomposeReturnCoefficients);
            this.EquipmentDecomposeMax = GeneratorUtility.Get(element, "EquipmentDecomposeMax",this.EquipmentDecomposeMax);
            this.BuyEnergy = GeneratorUtility.Get(element, "BuyEnergy",this.BuyEnergy);
            this.BuyCrossPerson = GeneratorUtility.Get(element, "BuyCrossPerson",this.BuyCrossPerson);
            this.TreasureShopRefresh = GeneratorUtility.Get(element, "TreasureShopRefresh",this.TreasureShopRefresh);
            this.LadderShopRefresh = GeneratorUtility.Get(element, "LadderShopRefresh",this.LadderShopRefresh);
            this.GuildShopRefresh = GeneratorUtility.Get(element, "GuildShopRefresh",this.GuildShopRefresh);
            this.PointShopRefresh = GeneratorUtility.Get(element, "PointShopRefresh",this.PointShopRefresh);
            this.DecompositionShopRefresh = GeneratorUtility.Get(element, "DecompositionShopRefresh",this.DecompositionShopRefresh);
            this.DailyPlayGoldRefresh = GeneratorUtility.Get(element, "DailyPlayGoldRefresh",this.DailyPlayGoldRefresh);
            this.DailyPlayExpRefresh = GeneratorUtility.Get(element, "DailyPlayExpRefresh",this.DailyPlayExpRefresh);
            this.DailyPlayEquipmentMaterialsRefresh = GeneratorUtility.Get(element, "DailyPlayEquipmentMaterialsRefresh",this.DailyPlayEquipmentMaterialsRefresh);
            this.DailyPlayContractMaterialsRefresh = GeneratorUtility.Get(element, "DailyPlayContractMaterialsRefresh",this.DailyPlayContractMaterialsRefresh);
            this.BossRushRefresh = GeneratorUtility.Get(element, "BossRushRefresh",this.BossRushRefresh);
            this.BuildingNpcAppearLevel = GeneratorUtility.Get(element, "BuildingNpcAppearLevel",this.BuildingNpcAppearLevel);
            this.BuildingNpcAppearRate = GeneratorUtility.Get(element, "BuildingNpcAppearRate",this.BuildingNpcAppearRate);
            this.BuildingNpcAppearDailyTimes = GeneratorUtility.Get(element, "BuildingNpcAppearDailyTimes",this.BuildingNpcAppearDailyTimes);
            this.BuildingNpcStayTimes = GeneratorUtility.Get(element, "BuildingNpcStayTimes",this.BuildingNpcStayTimes);
            this.ShowHeroPreviewStars = GeneratorUtility.Get(element, "ShowHeroPreviewStars",this.ShowHeroPreviewStars);
            this.ActivityDailySignNpc = GeneratorUtility.Get(element, "ActivityDailySignNpc",this.ActivityDailySignNpc);
            this.StarRisingUnlocks = GeneratorUtility.Get(element, "StarRisingUnlocks",this.StarRisingUnlocks);
            this.DailyPlayEntryShowLists = GeneratorUtility.Get(element, "DailyPlayEntryShowLists",this.DailyPlayEntryShowLists);
            this.HangUpTimeLimit = GeneratorUtility.Get(element, "HangUpTimeLimit",this.HangUpTimeLimit);
            this.HangUpRewardAnimations = GeneratorUtility.Get(element, "HangUpRewardAnimations",this.HangUpRewardAnimations);
            this.HangUpKillEnemyCount = GeneratorUtility.Get(element, "HangUpKillEnemyCount",this.HangUpKillEnemyCount);
            this.HeroLevelUpgradeGoldCost = GeneratorUtility.Get(element, "HeroLevelUpgradeGoldCost",this.HeroLevelUpgradeGoldCost);
            this.DuplicateNextButtonUnlock = GeneratorUtility.Get(element, "DuplicateNextButtonUnlock",this.DuplicateNextButtonUnlock);
            this.PvpDuplicateId = GeneratorUtility.Get(element, "PvpDuplicateId",this.PvpDuplicateId);
            this.HomePageActivityImageRollingInterval = GeneratorUtility.Get(element, "HomePageActivityImageRollingInterval",this.HomePageActivityImageRollingInterval);
            this.ChildForbidTime = GeneratorUtility.Get(element, "ChildForbidTime",this.ChildForbidTime);
            this.ChildPlayTime = GeneratorUtility.Get(element, "ChildPlayTime",this.ChildPlayTime);
            this.HeroResetCost = GeneratorUtility.Get(element, "HeroResetCost",this.HeroResetCost);
            this.HeoResetMinLevel = GeneratorUtility.Get(element, "HeoResetMinLevel",this.HeoResetMinLevel);
            this.CreateGuildCost = GeneratorUtility.Get(element, "CreateGuildCost",this.CreateGuildCost);
            this.AddGuildTime = GeneratorUtility.Get(element, "AddGuildTime",this.AddGuildTime);
            this.GuildNameLimit = GeneratorUtility.Get(element, "GuildNameLimit",this.GuildNameLimit);
            this.GuildJoinMaxCount = GeneratorUtility.Get(element, "GuildJoinMaxCount",this.GuildJoinMaxCount);
            this.GuildApplyListCount = GeneratorUtility.Get(element, "GuildApplyListCount",this.GuildApplyListCount);
            this.GuildVicePresidentCount = GeneratorUtility.Get(element, "GuildVicePresidentCount",this.GuildVicePresidentCount);
            this.GuildUserCount = GeneratorUtility.Get(element, "GuildUserCount",this.GuildUserCount);
            this.GuildAllUserCount = GeneratorUtility.Get(element, "GuildAllUserCount",this.GuildAllUserCount);
            this.GuildAnnouncementCount = GeneratorUtility.Get(element, "GuildAnnouncementCount",this.GuildAnnouncementCount);
            this.GuildAssistanceHeroCount = GeneratorUtility.Get(element, "GuildAssistanceHeroCount",this.GuildAssistanceHeroCount);
            this.GuildIcons = GeneratorUtility.Get(element, "GuildIcons",this.GuildIcons);
            this.GuildSeekHelpNum = GeneratorUtility.Get(element, "GuildSeekHelpNum",this.GuildSeekHelpNum);
            this.TavernTaskBrisk = GeneratorUtility.Get(element, "TavernTaskBrisk",this.TavernTaskBrisk);
            this.GveMapBattleCount = GeneratorUtility.Get(element, "GveMapBattleCount",this.GveMapBattleCount);
            this.GveDuplicateCardElementCounts = GeneratorUtility.Get(element, "GveDuplicateCardElementCounts",this.GveDuplicateCardElementCounts);
            this.GveDuplicateHandCard = GeneratorUtility.Get(element, "GveDuplicateHandCard",this.GveDuplicateHandCard);
            this.GveDuplicateRoundTime = GeneratorUtility.Get(element, "GveDuplicateRoundTime",this.GveDuplicateRoundTime);
            this.GveDuplicateWinDeleteCardCount = GeneratorUtility.Get(element, "GveDuplicateWinDeleteCardCount",this.GveDuplicateWinDeleteCardCount);
            this.GveDuplicateLoseDeleteCardCount = GeneratorUtility.Get(element, "GveDuplicateLoseDeleteCardCount",this.GveDuplicateLoseDeleteCardCount);
            this.GveDuplicateOverCardCount = GeneratorUtility.Get(element, "GveDuplicateOverCardCount",this.GveDuplicateOverCardCount);
            this.GveDuplicateBossLossHpCount = GeneratorUtility.Get(element, "GveDuplicateBossLossHpCount",this.GveDuplicateBossLossHpCount);
            this.GveDuplicateRewardGold = GeneratorUtility.Get(element, "GveDuplicateRewardGold",this.GveDuplicateRewardGold);
            this.OnInit();
        }
        
        /// <summary>
        /// Init Function
        /// <summary>
        public virtual void OnInit()
        {
        }
        
        public static GlobalTemplate Load()
        {
            return Load<GlobalTemplate>();
        }
        
        public static T Load<T>()
            where T : GlobalTemplate, new ()
        {
            return GeneratorUtility.Load<T>("GlobalTemplate");
        }
        
        public sealed class FieldHeroNumLimit_ : IGenerateObject
        {
            
            public int Level { get; private set; }
            
            public int Num { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Level = GeneratorUtility.Get(element, "Level",this.Level);
                this.Num = GeneratorUtility.Get(element, "Num",this.Num);
            }
        }
        
        // 英雄个体值评价（(0,Num1]是C，(Num1,Num2]是B，(Num2,Num3]是A，大于Num3是S）
        public sealed class HeroAttributeEvaluation_ : IGenerateObject
        {
            
            public int Num1 { get; private set; }
            
            public int Num2 { get; private set; }
            
            public int Num3 { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Num1 = GeneratorUtility.Get(element, "Num1",this.Num1);
                this.Num2 = GeneratorUtility.Get(element, "Num2",this.Num2);
                this.Num3 = GeneratorUtility.Get(element, "Num3",this.Num3);
            }
        }
        
        public sealed class HeroClassNeedCard_ : IGenerateObject
        {
            
            public int Class1 { get; private set; }
            
            public int Class2 { get; private set; }
            
            public int Class3 { get; private set; }
            
            public int Class4 { get; private set; }
            
            public int Class5 { get; private set; }
            
            public int Class6 { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Class1 = GeneratorUtility.Get(element, "Class1",this.Class1);
                this.Class2 = GeneratorUtility.Get(element, "Class2",this.Class2);
                this.Class3 = GeneratorUtility.Get(element, "Class3",this.Class3);
                this.Class4 = GeneratorUtility.Get(element, "Class4",this.Class4);
                this.Class5 = GeneratorUtility.Get(element, "Class5",this.Class5);
                this.Class6 = GeneratorUtility.Get(element, "Class6",this.Class6);
            }
        }
        
        // 氪金召唤价格（单次消耗的抽卡券，10次消耗的抽卡券）
        public sealed class SpecialLotteryPrice_ : IGenerateObject
        {
            
            public int Once { get; private set; }
            
            public int TenTimes { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Once = GeneratorUtility.Get(element, "Once",this.Once);
                this.TenTimes = GeneratorUtility.Get(element, "TenTimes",this.TenTimes);
            }
        }
        
        // 氪金非第10次单抽；10连抽排除必出（紫/橙）外剩余的抽卡次数调用卡池的权重（保底数量、超级蛋几率）
        public class SpecialLotteryOneDrawNormalNum_ : IGenerateObject
        {
            
            public int Base { get; private set; }
            
            public int ExtraRate { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Base = GeneratorUtility.Get(element, "Base",this.Base);
                this.ExtraRate = GeneratorUtility.Get(element, "ExtraRate",this.ExtraRate);
            }
        }
        
        // 抽卡所获积分（氪金抽、活动抽），若钻石/活动抽如果是十连，积分需要x10
        public sealed class LotteryPointBonus_ : IGenerateObject
        {
            
            public int Special { get; private set; }
            
            public int Activity { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Special = GeneratorUtility.Get(element, "Special",this.Special);
                this.Activity = GeneratorUtility.Get(element, "Activity",this.Activity);
            }
        }
        
        public sealed class ActivityLotteryOneDrawNormalNum_ : SpecialLotteryOneDrawNormalNum_
        {
        }
        
        public sealed class DailyTaskWeight_ : IGenerateObject
        {
            
            public int WhiteWeight { get; private set; }
            
            public int GreenWeight { get; private set; }
            
            public int BlueWeight { get; private set; }
            
            public int PurpleWeight { get; private set; }
            
            public int OrangeWeight { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.WhiteWeight = GeneratorUtility.Get(element, "WhiteWeight",this.WhiteWeight);
                this.GreenWeight = GeneratorUtility.Get(element, "GreenWeight",this.GreenWeight);
                this.BlueWeight = GeneratorUtility.Get(element, "BlueWeight",this.BlueWeight);
                this.PurpleWeight = GeneratorUtility.Get(element, "PurpleWeight",this.PurpleWeight);
                this.OrangeWeight = GeneratorUtility.Get(element, "OrangeWeight",this.OrangeWeight);
            }
        }
        
        public class ReleaseTaskCount_ : IGenerateObject
        {
            
            public int Min { get; private set; }
            
            public int Max { get; private set; }
            
            public int Count { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Min = GeneratorUtility.Get(element, "Min",this.Min);
                this.Max = GeneratorUtility.Get(element, "Max",this.Max);
                this.Count = GeneratorUtility.Get(element, "Count",this.Count);
            }
        }
        
        public sealed class ReceiveTaskCount_ : ReleaseTaskCount_
        {
        }
        
        // 发送预设邮件后可获得奖励
        public class PrizeEmailSendReward_ : IGenerateObject
        {
            
            public int Type { get; private set; }
            
            public int Id { get; private set; }
            
            public int Count { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Type = GeneratorUtility.Get(element, "Type",this.Type);
                this.Id = GeneratorUtility.Get(element, "Id",this.Id);
                this.Count = GeneratorUtility.Get(element, "Count",this.Count);
            }
        }
        
        public sealed class PrizeEmailStrangerReplyReward_ : PrizeEmailSendReward_
        {
        }
        
        public sealed class EnergyRecoverPayment_ : IGenerateObject
        {
            
            public int Times { get; private set; }
            
            public int Count { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Times = GeneratorUtility.Get(element, "Times",this.Times);
                this.Count = GeneratorUtility.Get(element, "Count",this.Count);
            }
        }
        
        public sealed class ContractStarslimit_ : IGenerateObject
        {
            
            public int Contract { get; private set; }
            
            public int Stars { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Contract = GeneratorUtility.Get(element, "Contract",this.Contract);
                this.Stars = GeneratorUtility.Get(element, "Stars",this.Stars);
            }
        }
        
        public sealed class HeroContractUnlockSlotLevel_ : IGenerateObject
        {
            
            public int Contrack { get; private set; }
            
            public int Slot { get; private set; }
            
            public int Level { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Contrack = GeneratorUtility.Get(element, "Contrack",this.Contrack);
                this.Slot = GeneratorUtility.Get(element, "Slot",this.Slot);
                this.Level = GeneratorUtility.Get(element, "Level",this.Level);
            }
        }
        
        public sealed class HeroClassAdvanceSkill_ : IGenerateObject
        {
            
            public int Times { get; private set; }
            
            public int Type { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Times = GeneratorUtility.Get(element, "Times",this.Times);
                this.Type = GeneratorUtility.Get(element, "Type",this.Type);
            }
        }
        
        public sealed class EquipmentEnhanceEnchantCount_ : IGenerateObject
        {
            
            public int EnhanceLevel { get; private set; }
            
            public int Count { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.EnhanceLevel = GeneratorUtility.Get(element, "EnhanceLevel",this.EnhanceLevel);
                this.Count = GeneratorUtility.Get(element, "Count",this.Count);
            }
        }
        
        public sealed class EquipmentEnchantPay_ : IGenerateObject
        {
            
            public int Quality { get; private set; }
            
            public int Count { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Quality = GeneratorUtility.Get(element, "Quality",this.Quality);
                this.Count = GeneratorUtility.Get(element, "Count",this.Count);
            }
        }
        
        public sealed class HeroContractNeedHeroNumber_ : IGenerateObject
        {
            
            public int Contrack { get; private set; }
            
            public int Slot { get; private set; }
            
            public int Count { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Contrack = GeneratorUtility.Get(element, "Contrack",this.Contrack);
                this.Slot = GeneratorUtility.Get(element, "Slot",this.Slot);
                this.Count = GeneratorUtility.Get(element, "Count",this.Count);
            }
        }
        
        public sealed class EquipmentDecomposeGoldReturn_ : IGenerateObject
        {
            
            public int Rarity { get; private set; }
            
            public int Count { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Rarity = GeneratorUtility.Get(element, "Rarity",this.Rarity);
                this.Count = GeneratorUtility.Get(element, "Count",this.Count);
            }
        }
        
        public sealed class EquipmentDecomposeMaterialReturn_ : IGenerateObject
        {
            
            public int Rarity { get; private set; }
            
            public int Id { get; private set; }
            
            public int Count { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Rarity = GeneratorUtility.Get(element, "Rarity",this.Rarity);
                this.Id = GeneratorUtility.Get(element, "Id",this.Id);
                this.Count = GeneratorUtility.Get(element, "Count",this.Count);
            }
        }
        
        public sealed class StarRisingUnlock_ : IGenerateObject
        {
            
            public int Star { get; private set; }
            
            public int Type { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Star = GeneratorUtility.Get(element, "Star",this.Star);
                this.Type = GeneratorUtility.Get(element, "Type",this.Type);
            }
        }
        
        // 未成年人的游戏时间限制，工作日90分钟，节假日180分钟，配置单位均为分钟
        public sealed class ChildPlayTime_ : IGenerateObject
        {
            
            public int NormalLimit { get; private set; }
            
            public int HolidayLimit { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.NormalLimit = GeneratorUtility.Get(element, "NormalLimit",this.NormalLimit);
                this.HolidayLimit = GeneratorUtility.Get(element, "HolidayLimit",this.HolidayLimit);
            }
        }
    }
}
