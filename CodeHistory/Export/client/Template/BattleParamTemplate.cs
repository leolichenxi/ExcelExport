//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Config
{
    
    
    public class BattleParamTemplate : IGenerateObject
    {
        
        /// <summary>
        /// 战斗开始的等待时间
        /// <summary>
        public int BattleStartWaitTime { get; private set; }
        
        /// <summary>
        /// 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
        /// <summary>
        public int[] BattleMapSizes { get; private set; }
        
        /// <summary>
        /// 闪避上下限
        /// <summary>
        public DodgeEffectLimit_ DodgeEffectLimit { get; private set; }
        
        /// <summary>
        /// 暴击上下限
        /// <summary>
        public CritEffectLimit_ CritEffectLimit { get; private set; }
        
        /// <summary>
        /// 暴击伤害上下限
        /// <summary>
        public CritDamEffectLimit_ CritDamEffectLimit { get; private set; }
        
        /// <summary>
        /// 伤害抗性上下限
        /// <summary>
        public DefenseRateEffectLimit_ DefenseRateEffectLimit { get; private set; }
        
        /// <summary>
        /// 伤害减免上限
        /// <summary>
        public int DamageReduceLimit { get; private set; }
        
        /// <summary>
        /// 攻击速度上下限
        /// <summary>
        public CoolDownLimit_[] CoolDownLimits { get; private set; }
        
        /// <summary>
        /// 克制强度上下限
        /// <summary>
        public ElementEffectLimit_[] ElementEffectLimits { get; private set; }
        
        /// <summary>
        /// 攻击基础克制强度
        /// <summary>
        public double ElementAttackBase { get; private set; }
        
        /// <summary>
        /// 防御基础克制强度
        /// <summary>
        public double ElementDefenseBase { get; private set; }
        
        /// <summary>
        /// 默认克制强度
        /// <summary>
        public int ElementEffectBase { get; private set; }
        
        /// <summary>
        /// 伤害随机范围
        /// <summary>
        public DamageCorrectionRange_ DamageCorrectionRange { get; private set; }
        
        /// <summary>
        /// 闪避修正系数
        /// <summary>
        public double DodgeCorrection { get; private set; }
        
        /// <summary>
        /// 暴击修正系数
        /// <summary>
        public double CritCorrection { get; private set; }
        
        /// <summary>
        /// 格档效果
        /// <summary>
        public int BlckEffect { get; private set; }
        
        /// <summary>
        /// 格挡率上下限
        /// <summary>
        public BlockEffectLimit_ BlockEffectLimit { get; private set; }
        
        /// <summary>
        /// 英雄能量值上限
        /// <summary>
        public int HeroMaxEnergyValue { get; private set; }
        
        /// <summary>
        /// 英雄能量技累计次数上限
        /// <summary>
        public int HeroMaxEnergyNum { get; private set; }
        
        /// <summary>
        /// 小姐姐能量上限
        /// <summary>
        public int LordMaxEnergy { get; private set; }
        
        /// <summary>
        /// 最大攻击速度缩放比例。
        /// <summary>
        public double MaxAttackSpeed { get; private set; }
        
        /// <summary>
        /// 英雄技能存储上限
        /// <summary>
        public int HeroSkillCount { get; private set; }
        
        /// <summary>
        /// 怪物行走入场时间(毫秒）
        /// <summary>
        public int MonsterWalkModeTime { get; private set; }
        
        /// <summary>
        /// 怪物掉落入场时间(毫秒）
        /// <summary>
        public int MonsterDropModeTime { get; private set; }
        
        /// <summary>
        /// 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
        /// <summary>
        public BattleMapGrid_ BattleMapGrid { get; private set; }
        
        /// <summary>
        /// 格子尺寸，正方体直径
        /// <summary>
        public int GridSize { get; private set; }
        
        /// <summary>
        /// 小姐姐坐标
        /// <summary>
        public int LordGrid { get; private set; }
        
        /// <summary>
        /// 必杀位移时间（毫秒）
        /// <summary>
        public int SkillMoveTime { get; private set; }
        
        /// <summary>
        /// 必杀叮特效时间（毫秒）
        /// <summary>
        public int SkillFlashTime { get; private set; }
        
        /// <summary>
        /// 击杀魔物后掉落物掉落范围（以魔物的站立坐标为圆心）
        /// <summary>
        public int MonsterDropRange { get; private set; }
        
        /// <summary>
        /// 掉落物反向偏移距离量
        /// <summary>
        public int OffsetDistance { get; private set; }
        
        /// <summary>
        /// 掉落物品停留显示时间，单位是毫秒
        /// <summary>
        public int DropItemStayTime { get; private set; }
        
        /// <summary>
        /// 获取记录面板停留最大时间，单位是毫秒
        /// <summary>
        public int BannerStayMaxtime { get; private set; }
        
        /// <summary>
        /// 小姐姐移动速度
        /// <summary>
        public int LordMoveSpeed { get; private set; }
        
        /// <summary>
        /// 物品掉落范围，半径
        /// <summary>
        public int DropItemRange { get; private set; }
        
        /// <summary>
        /// 副本每列最大房间数
        /// <summary>
        public int MaxRoom { get; private set; }
        
        /// <summary>
        /// 每一点领主生命值，回复英雄的百分比生命值。此值为万分比。
        /// <summary>
        public int LordHealthFactor { get; private set; }
        
        /// <summary>
        /// RL中炼成阵刷新消耗规则
        /// <summary>
        public int[] RuneRefreshPrices { get; private set; }
        
        /// <summary>
        /// 英雄最多可携带的符文数量
        /// <summary>
        public int HeroMaxRuneCount { get; private set; }
        
        /// <summary>
        /// 最大炼成所需魂印数
        /// <summary>
        public int MaxSoulStampDemand { get; private set; }
        
        /// <summary>
        /// 炼成阵所需魂印数量，总等级*该系数，向下取整，即为每次炼成所需的魂印数
        /// <summary>
        public double SoulStampDemandFactor { get; private set; }
        
        /// <summary>
        /// 战斗中，装备背包和魂印背包的数量上限。
        /// <summary>
        public int BagCapacity { get; private set; }
        
        /// <summary>
        /// 战斗中，分解装备获得的魔魂。(万分比，向下取整)
        /// <summary>
        public int ResolveFactor { get; private set; }
        
        /// <summary>
        /// 战斗中，释放必杀技后，淡出的时间，单位毫秒
        /// <summary>
        public int SkillFadeOutTime { get; private set; }
        
        /// <summary>
        /// 对手小姐姐坐标
        /// <summary>
        public int PvpEnemyLordGrid { get; private set; }
        
        /// <summary>
        /// PVP战斗全场增强Buff，需填入BuffId
        /// <summary>
        public int[] PvpSceneBuffs { get; private set; }
        
        /// <summary>
        /// 先手技能等待时间，单位是秒
        /// <summary>
        public int PvpFirstHandWaiting { get; private set; }
        
        /// <summary>
        /// 后手技能等待时间，单位是秒
        /// <summary>
        public int PvpSecondHandWaiting { get; private set; }
        
        /// <summary>
        /// 竞技战斗开始前倒计时，单位是秒
        /// <summary>
        public int PvpStartCountDown { get; private set; }
        
        /// <summary>
        /// 竞技战斗结束前倒计时，单位是秒
        /// <summary>
        public int PvpOverCountDown { get; private set; }
        
        /// <summary>
        /// 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
        /// <summary>
        public SoulInterest_ SoulInterest { get; private set; }
        
        /// <summary>
        /// 战斗最多死亡人数（含）
        /// <summary>
        public int BattleHeroDieValue { get; private set; }
        
        /// <summary>
        /// 战斗最大时间（含）
        /// <summary>
        public int BattleMaxTimeValue { get; private set; }
        
        /// <summary>
        /// 战斗移动跳跃时间（毫秒）
        /// <summary>
        public int BattleJumpTime { get; private set; }
        
        /// <summary>
        /// 一个上古残页房间，同时展示的商品数量。
        /// <summary>
        public int ProfessionUpgradeCount { get; private set; }
        
        /// <summary>
        /// 玩家战斗中手牌上限
        /// <summary>
        public int HandCardLimit { get; private set; }
        
        /// <summary>
        /// 遗忘操作消耗
        /// <summary>
        public int[] ForgetCosts { get; private set; }
        
        /// <summary>
        /// 祈祷操作消耗
        /// <summary>
        public int[] PrayCosts { get; private set; }
        
        /// <summary>
        /// X张同卡升级为1张高级卡，“X”
        /// <summary>
        public int CardLevelUpNeedNum { get; private set; }
        
        /// <summary>
        /// 每使用5张基础卡，抽1张必杀卡（暂时屏蔽）
        /// <summary>
        public int CardUseToDrawUnique { get; private set; }
        
        /// <summary>
        /// 玩家战斗中初始手牌上限
        /// <summary>
        public int OriginalHandCardLimit { get; private set; }
        
        /// <summary>
        /// 每轮发牌必杀卡数量上限
        /// <summary>
        public int UniqueSkillCardLimitCountOT { get; private set; }
        
        /// <summary>
        /// 精英房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
        /// <summary>
        public int DropCoefficientInEliteRoom { get; private set; }
        
        /// <summary>
        /// BOSS房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
        /// <summary>
        public int DropCoefficientInBossRoom { get; private set; }
        
        /// <summary>
        /// 英雄死亡后，复活的时间，单位毫秒，用于在多层模式中
        /// <summary>
        public int HeroRebornTime { get; private set; }
        
        /// <summary>
        /// 英雄死亡后，复活需要消耗的领主血量系数(仅限于迷宫中)，最终扣血量=英雄星级*该系数
        /// <summary>
        public int HeroRebornHpCostFactor { get; private set; }
        
        /// <summary>
        /// 玩家战斗中初始发牌数量（受HandCardLimit限制）
        /// <summary>
        public int OriginalHandCardNum { get; private set; }
        
        /// <summary>
        /// 挑战者先手概率（万分比）
        /// <summary>
        public int ChallengeFirstHandChance { get; private set; }
        
        /// <summary>
        /// 天梯对战总时长
        /// <summary>
        public int PvpChallengeTime { get; private set; }
        
        /// <summary>
        /// 天梯先手首次发牌必杀卡牌数量
        /// <summary>
        public int FirstHandEnergyCardCount { get; private set; }
        
        /// <summary>
        /// 天梯后手首次发牌必杀卡牌数量
        /// <summary>
        public int SecondtHandEnergyCardCount { get; private set; }
        
        /// <summary>
        /// 先手等待出手时间（毫秒）
        /// <summary>
        public int PvpFirstHandTime { get; private set; }
        
        /// <summary>
        /// 后手等待出手时间（毫秒）
        /// <summary>
        public int PvpSecondHandTime { get; private set; }
        
        /// <summary>
        /// 领主卡牌使用间隔时间（毫秒）
        /// <summary>
        public int LordCardSpacing { get; private set; }
        
        /// <summary>
        /// 必杀卡牌检查使用间隔（毫秒）
        /// <summary>
        public int EnergyCardCheckUp { get; private set; }
        
        /// <summary>
        /// PVP战斗玩家战斗中初始发牌数量（受HandCardLimit限制）
        /// <summary>
        public int PvpOriginalHandCardNum { get; private set; }
        
        /// <summary>
        /// 所有战斗2倍速按钮实际读取值
        /// <summary>
        public double[] BattleSpeedUpRates { get; private set; }
        
        /// <summary>
        /// 挂机流程间隔时间
        /// <summary>
        public int HangUpIntervalTime { get; private set; }
        
        /// <summary>
        /// 上一批次的怪物全部击杀完后，下一批次的怪物出现的时间间隔，单位(毫秒)
        /// <summary>
        public int NextWaveAppearInterval { get; private set; }
        
        /// <summary>
        /// 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
        /// <summary>
        public Dice_ Dice { get; private set; }
        
        /// <summary>
        /// 迷宫中玩家可合成遗物的初始次数
        /// <summary>
        public int RemainsCompoundOriginalCount { get; private set; }
        
        /// <summary>
        /// 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
        /// <summary>
        public MazeValueFactor_ MazeValueFactor { get; private set; }
        
        /// <summary>
        /// 近战战斗冲刺时间（Dash）
        /// <summary>
        public int BattleDashTime { get; private set; }
        
        /// <summary>
        /// 近战战斗冲刺返回时间（DashBack）
        /// <summary>
        public int BattleDashBackTime { get; private set; }
        
        /// <summary>
        /// 如果有击飞和击倒 留出的安全表现时间
        /// <summary>
        public int BattleRoundSafeTime { get; private set; }
        
        /// <summary>
        /// 下个不是友军（如果不是友军，需要等待当年动作执行完毕），行动前，需要等待一个比较短暂的时间，该时间在全局配置表配置。作用为让摄像机回调到一个位置。
        /// <summary>
        public int BattleWaitNextTime { get; private set; }
        
        /// <summary>
        /// 行为重新开始等待时间
        /// <summary>
        public int BattleRoundTime { get; private set; }
        
        /// <summary>
        /// 击飞力
        /// <summary>
        public int BattleHitFlyForce { get; private set; }
        
        /// <summary>
        /// 击倒力
        /// <summary>
        public int BattleHitDownForce { get; private set; }
        
        /// <summary>
        /// 击飞最大高度
        /// <summary>
        public int BattleHitFlyMaxHeight { get; private set; }
        
        /// <summary>
        /// 击飞下降重力
        /// <summary>
        public int BattleGravity { get; private set; }
        
        /// <summary>
        /// 击飞上行重力
        /// <summary>
        public int BattleFlyUpGravity { get; private set; }
        
        /// <summary>
        /// 速度趋近顶部重力
        /// <summary>
        public int BattleNearTopGravity { get; private set; }
        
        /// <summary>
        /// 速衰接近顶部速度判定
        /// <summary>
        public int BattleNearTopSpeed { get; private set; }
        
        public void Read(IConfigElement element)
        {
            this.BattleStartWaitTime = GeneratorUtility.Get(element, "BattleStartWaitTime",this.BattleStartWaitTime);
            this.BattleMapSizes = GeneratorUtility.Get(element, "BattleMapSizes",this.BattleMapSizes);
            this.DodgeEffectLimit = GeneratorUtility.Get(element, "DodgeEffectLimit",this.DodgeEffectLimit);
            this.CritEffectLimit = GeneratorUtility.Get(element, "CritEffectLimit",this.CritEffectLimit);
            this.CritDamEffectLimit = GeneratorUtility.Get(element, "CritDamEffectLimit",this.CritDamEffectLimit);
            this.DefenseRateEffectLimit = GeneratorUtility.Get(element, "DefenseRateEffectLimit",this.DefenseRateEffectLimit);
            this.DamageReduceLimit = GeneratorUtility.Get(element, "DamageReduceLimit",this.DamageReduceLimit);
            this.CoolDownLimits = GeneratorUtility.Get(element, "CoolDownLimits",this.CoolDownLimits);
            this.ElementEffectLimits = GeneratorUtility.Get(element, "ElementEffectLimits",this.ElementEffectLimits);
            this.ElementAttackBase = GeneratorUtility.Get(element, "ElementAttackBase",this.ElementAttackBase);
            this.ElementDefenseBase = GeneratorUtility.Get(element, "ElementDefenseBase",this.ElementDefenseBase);
            this.ElementEffectBase = GeneratorUtility.Get(element, "ElementEffectBase",this.ElementEffectBase);
            this.DamageCorrectionRange = GeneratorUtility.Get(element, "DamageCorrectionRange",this.DamageCorrectionRange);
            this.DodgeCorrection = GeneratorUtility.Get(element, "DodgeCorrection",this.DodgeCorrection);
            this.CritCorrection = GeneratorUtility.Get(element, "CritCorrection",this.CritCorrection);
            this.BlckEffect = GeneratorUtility.Get(element, "BlckEffect",this.BlckEffect);
            this.BlockEffectLimit = GeneratorUtility.Get(element, "BlockEffectLimit",this.BlockEffectLimit);
            this.HeroMaxEnergyValue = GeneratorUtility.Get(element, "HeroMaxEnergyValue",this.HeroMaxEnergyValue);
            this.HeroMaxEnergyNum = GeneratorUtility.Get(element, "HeroMaxEnergyNum",this.HeroMaxEnergyNum);
            this.LordMaxEnergy = GeneratorUtility.Get(element, "LordMaxEnergy",this.LordMaxEnergy);
            this.MaxAttackSpeed = GeneratorUtility.Get(element, "MaxAttackSpeed",this.MaxAttackSpeed);
            this.HeroSkillCount = GeneratorUtility.Get(element, "HeroSkillCount",this.HeroSkillCount);
            this.MonsterWalkModeTime = GeneratorUtility.Get(element, "MonsterWalkModeTime",this.MonsterWalkModeTime);
            this.MonsterDropModeTime = GeneratorUtility.Get(element, "MonsterDropModeTime",this.MonsterDropModeTime);
            this.BattleMapGrid = GeneratorUtility.Get(element, "BattleMapGrid",this.BattleMapGrid);
            this.GridSize = GeneratorUtility.Get(element, "GridSize",this.GridSize);
            this.LordGrid = GeneratorUtility.Get(element, "LordGrid",this.LordGrid);
            this.SkillMoveTime = GeneratorUtility.Get(element, "SkillMoveTime",this.SkillMoveTime);
            this.SkillFlashTime = GeneratorUtility.Get(element, "SkillFlashTime",this.SkillFlashTime);
            this.MonsterDropRange = GeneratorUtility.Get(element, "MonsterDropRange",this.MonsterDropRange);
            this.OffsetDistance = GeneratorUtility.Get(element, "OffsetDistance",this.OffsetDistance);
            this.DropItemStayTime = GeneratorUtility.Get(element, "DropItemStayTime",this.DropItemStayTime);
            this.BannerStayMaxtime = GeneratorUtility.Get(element, "BannerStayMaxtime",this.BannerStayMaxtime);
            this.LordMoveSpeed = GeneratorUtility.Get(element, "LordMoveSpeed",this.LordMoveSpeed);
            this.DropItemRange = GeneratorUtility.Get(element, "DropItemRange",this.DropItemRange);
            this.MaxRoom = GeneratorUtility.Get(element, "MaxRoom",this.MaxRoom);
            this.LordHealthFactor = GeneratorUtility.Get(element, "LordHealthFactor",this.LordHealthFactor);
            this.RuneRefreshPrices = GeneratorUtility.Get(element, "RuneRefreshPrices",this.RuneRefreshPrices);
            this.HeroMaxRuneCount = GeneratorUtility.Get(element, "HeroMaxRuneCount",this.HeroMaxRuneCount);
            this.MaxSoulStampDemand = GeneratorUtility.Get(element, "MaxSoulStampDemand",this.MaxSoulStampDemand);
            this.SoulStampDemandFactor = GeneratorUtility.Get(element, "SoulStampDemandFactor",this.SoulStampDemandFactor);
            this.BagCapacity = GeneratorUtility.Get(element, "BagCapacity",this.BagCapacity);
            this.ResolveFactor = GeneratorUtility.Get(element, "ResolveFactor",this.ResolveFactor);
            this.SkillFadeOutTime = GeneratorUtility.Get(element, "SkillFadeOutTime",this.SkillFadeOutTime);
            this.PvpEnemyLordGrid = GeneratorUtility.Get(element, "PvpEnemyLordGrid",this.PvpEnemyLordGrid);
            this.PvpSceneBuffs = GeneratorUtility.Get(element, "PvpSceneBuffs",this.PvpSceneBuffs);
            this.PvpFirstHandWaiting = GeneratorUtility.Get(element, "PvpFirstHandWaiting",this.PvpFirstHandWaiting);
            this.PvpSecondHandWaiting = GeneratorUtility.Get(element, "PvpSecondHandWaiting",this.PvpSecondHandWaiting);
            this.PvpStartCountDown = GeneratorUtility.Get(element, "PvpStartCountDown",this.PvpStartCountDown);
            this.PvpOverCountDown = GeneratorUtility.Get(element, "PvpOverCountDown",this.PvpOverCountDown);
            this.SoulInterest = GeneratorUtility.Get(element, "SoulInterest",this.SoulInterest);
            this.BattleHeroDieValue = GeneratorUtility.Get(element, "BattleHeroDieValue",this.BattleHeroDieValue);
            this.BattleMaxTimeValue = GeneratorUtility.Get(element, "BattleMaxTimeValue",this.BattleMaxTimeValue);
            this.BattleJumpTime = GeneratorUtility.Get(element, "BattleJumpTime",this.BattleJumpTime);
            this.ProfessionUpgradeCount = GeneratorUtility.Get(element, "ProfessionUpgradeCount",this.ProfessionUpgradeCount);
            this.HandCardLimit = GeneratorUtility.Get(element, "HandCardLimit",this.HandCardLimit);
            this.ForgetCosts = GeneratorUtility.Get(element, "ForgetCosts",this.ForgetCosts);
            this.PrayCosts = GeneratorUtility.Get(element, "PrayCosts",this.PrayCosts);
            this.CardLevelUpNeedNum = GeneratorUtility.Get(element, "CardLevelUpNeedNum",this.CardLevelUpNeedNum);
            this.CardUseToDrawUnique = GeneratorUtility.Get(element, "CardUseToDrawUnique",this.CardUseToDrawUnique);
            this.OriginalHandCardLimit = GeneratorUtility.Get(element, "OriginalHandCardLimit",this.OriginalHandCardLimit);
            this.UniqueSkillCardLimitCountOT = GeneratorUtility.Get(element, "UniqueSkillCardLimitCountOT",this.UniqueSkillCardLimitCountOT);
            this.DropCoefficientInEliteRoom = GeneratorUtility.Get(element, "DropCoefficientInEliteRoom",this.DropCoefficientInEliteRoom);
            this.DropCoefficientInBossRoom = GeneratorUtility.Get(element, "DropCoefficientInBossRoom",this.DropCoefficientInBossRoom);
            this.HeroRebornTime = GeneratorUtility.Get(element, "HeroRebornTime",this.HeroRebornTime);
            this.HeroRebornHpCostFactor = GeneratorUtility.Get(element, "HeroRebornHpCostFactor",this.HeroRebornHpCostFactor);
            this.OriginalHandCardNum = GeneratorUtility.Get(element, "OriginalHandCardNum",this.OriginalHandCardNum);
            this.ChallengeFirstHandChance = GeneratorUtility.Get(element, "ChallengeFirstHandChance",this.ChallengeFirstHandChance);
            this.PvpChallengeTime = GeneratorUtility.Get(element, "PvpChallengeTime",this.PvpChallengeTime);
            this.FirstHandEnergyCardCount = GeneratorUtility.Get(element, "FirstHandEnergyCardCount",this.FirstHandEnergyCardCount);
            this.SecondtHandEnergyCardCount = GeneratorUtility.Get(element, "SecondtHandEnergyCardCount",this.SecondtHandEnergyCardCount);
            this.PvpFirstHandTime = GeneratorUtility.Get(element, "PvpFirstHandTime",this.PvpFirstHandTime);
            this.PvpSecondHandTime = GeneratorUtility.Get(element, "PvpSecondHandTime",this.PvpSecondHandTime);
            this.LordCardSpacing = GeneratorUtility.Get(element, "LordCardSpacing",this.LordCardSpacing);
            this.EnergyCardCheckUp = GeneratorUtility.Get(element, "EnergyCardCheckUp",this.EnergyCardCheckUp);
            this.PvpOriginalHandCardNum = GeneratorUtility.Get(element, "PvpOriginalHandCardNum",this.PvpOriginalHandCardNum);
            this.BattleSpeedUpRates = GeneratorUtility.Get(element, "BattleSpeedUpRates",this.BattleSpeedUpRates);
            this.HangUpIntervalTime = GeneratorUtility.Get(element, "HangUpIntervalTime",this.HangUpIntervalTime);
            this.NextWaveAppearInterval = GeneratorUtility.Get(element, "NextWaveAppearInterval",this.NextWaveAppearInterval);
            this.Dice = GeneratorUtility.Get(element, "Dice",this.Dice);
            this.RemainsCompoundOriginalCount = GeneratorUtility.Get(element, "RemainsCompoundOriginalCount",this.RemainsCompoundOriginalCount);
            this.MazeValueFactor = GeneratorUtility.Get(element, "MazeValueFactor",this.MazeValueFactor);
            this.BattleDashTime = GeneratorUtility.Get(element, "BattleDashTime",this.BattleDashTime);
            this.BattleDashBackTime = GeneratorUtility.Get(element, "BattleDashBackTime",this.BattleDashBackTime);
            this.BattleRoundSafeTime = GeneratorUtility.Get(element, "BattleRoundSafeTime",this.BattleRoundSafeTime);
            this.BattleWaitNextTime = GeneratorUtility.Get(element, "BattleWaitNextTime",this.BattleWaitNextTime);
            this.BattleRoundTime = GeneratorUtility.Get(element, "BattleRoundTime",this.BattleRoundTime);
            this.BattleHitFlyForce = GeneratorUtility.Get(element, "BattleHitFlyForce",this.BattleHitFlyForce);
            this.BattleHitDownForce = GeneratorUtility.Get(element, "BattleHitDownForce",this.BattleHitDownForce);
            this.BattleHitFlyMaxHeight = GeneratorUtility.Get(element, "BattleHitFlyMaxHeight",this.BattleHitFlyMaxHeight);
            this.BattleGravity = GeneratorUtility.Get(element, "BattleGravity",this.BattleGravity);
            this.BattleFlyUpGravity = GeneratorUtility.Get(element, "BattleFlyUpGravity",this.BattleFlyUpGravity);
            this.BattleNearTopGravity = GeneratorUtility.Get(element, "BattleNearTopGravity",this.BattleNearTopGravity);
            this.BattleNearTopSpeed = GeneratorUtility.Get(element, "BattleNearTopSpeed",this.BattleNearTopSpeed);
            this.OnInit();
        }
        
        /// <summary>
        /// Init Function
        /// <summary>
        public virtual void OnInit()
        {
        }
        
        public static BattleParamTemplate Load()
        {
            return Load<BattleParamTemplate>();
        }
        
        public static T Load<T>()
            where T : BattleParamTemplate, new ()
        {
            return GeneratorUtility.Load<T>("BattleParamTemplate");
        }
        
        // 闪避上下限
        public class DodgeEffectLimit_ : IGenerateObject
        {
            
            public int Max { get; private set; }
            
            public int Min { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Max = GeneratorUtility.Get(element, "Max",this.Max);
                this.Min = GeneratorUtility.Get(element, "Min",this.Min);
            }
        }
        
        public sealed class CritEffectLimit_ : DodgeEffectLimit_
        {
        }
        
        public sealed class CritDamEffectLimit_ : DodgeEffectLimit_
        {
        }
        
        public sealed class DefenseRateEffectLimit_ : DodgeEffectLimit_
        {
        }
        
        public sealed class CoolDownLimit_ : DodgeEffectLimit_
        {
        }
        
        public sealed class ElementEffectLimit_ : IGenerateObject
        {
            
            public double Max { get; private set; }
            
            public double Min { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Max = GeneratorUtility.Get(element, "Max",this.Max);
                this.Min = GeneratorUtility.Get(element, "Min",this.Min);
            }
        }
        
        public sealed class DamageCorrectionRange_ : DodgeEffectLimit_
        {
        }
        
        public sealed class BlockEffectLimit_ : DodgeEffectLimit_
        {
        }
        
        // 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
        public sealed class BattleMapGrid_ : IGenerateObject
        {
            
            public int X { get; private set; }
            
            public int Y { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.X = GeneratorUtility.Get(element, "X",this.X);
                this.Y = GeneratorUtility.Get(element, "Y",this.Y);
            }
        }
        
        // 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
        public sealed class SoulInterest_ : IGenerateObject
        {
            
            public int Factor { get; private set; }
            
            public int MaxCount { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.Factor = GeneratorUtility.Get(element, "Factor",this.Factor);
                this.MaxCount = GeneratorUtility.Get(element, "MaxCount",this.MaxCount);
            }
        }
        
        // 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
        public sealed class Dice_ : IGenerateObject
        {
            
            public int DiceCount { get; private set; }
            
            public int DiceValue { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.DiceCount = GeneratorUtility.Get(element, "DiceCount",this.DiceCount);
                this.DiceValue = GeneratorUtility.Get(element, "DiceValue",this.DiceValue);
            }
        }
        
        // 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
        public sealed class MazeValueFactor_ : IGenerateObject
        {
            
            public double AtkRate { get; private set; }
            
            public int Factor { get; private set; }
            
            public void Read(IConfigElement element)
            {
                this.AtkRate = GeneratorUtility.Get(element, "AtkRate",this.AtkRate);
                this.Factor = GeneratorUtility.Get(element, "Factor",this.Factor);
            }
        }
    }
}
