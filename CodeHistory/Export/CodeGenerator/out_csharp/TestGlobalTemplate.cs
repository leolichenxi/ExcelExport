// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/TestGlobalTemplate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from protos/TestGlobalTemplate.proto</summary>
  public static partial class TestGlobalTemplateReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/TestGlobalTemplate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TestGlobalTemplateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9wcm90b3MvVGVzdEdsb2JhbFRlbXBsYXRlLnByb3RvEgZDb25maWcidQoS",
            "VGVzdEdsb2JhbFRlbXBsYXRlEg8KB1Rlc3RJbnQYASABKAUSEQoJVGVzdEZs",
            "b2F0GAIgASgCEhIKClRlc3REb3VibGUYAyABKAESEAoIVGVzdEJvb2wYBCAB",
            "KAgSFQoNVGVzdEludEFycmF5cxgFIAMoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.TestGlobalTemplate), global::Config.TestGlobalTemplate.Parser, new[]{ "TestInt", "TestFloat", "TestDouble", "TestBool", "TestIntArrays" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TestGlobalTemplate : pb::IMessage<TestGlobalTemplate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TestGlobalTemplate> _parser = new pb::MessageParser<TestGlobalTemplate>(() => new TestGlobalTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestGlobalTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.TestGlobalTemplateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestGlobalTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestGlobalTemplate(TestGlobalTemplate other) : this() {
      testInt_ = other.testInt_;
      testFloat_ = other.testFloat_;
      testDouble_ = other.testDouble_;
      testBool_ = other.testBool_;
      testIntArrays_ = other.testIntArrays_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestGlobalTemplate Clone() {
      return new TestGlobalTemplate(this);
    }

    /// <summary>Field number for the "TestInt" field.</summary>
    public const int TestIntFieldNumber = 1;
    private int testInt_;
    /// <summary>
    /// 测试int类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestInt {
      get { return testInt_; }
      set {
        testInt_ = value;
      }
    }

    /// <summary>Field number for the "TestFloat" field.</summary>
    public const int TestFloatFieldNumber = 2;
    private float testFloat_;
    /// <summary>
    /// 测试float类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TestFloat {
      get { return testFloat_; }
      set {
        testFloat_ = value;
      }
    }

    /// <summary>Field number for the "TestDouble" field.</summary>
    public const int TestDoubleFieldNumber = 3;
    private double testDouble_;
    /// <summary>
    /// 测试double类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TestDouble {
      get { return testDouble_; }
      set {
        testDouble_ = value;
      }
    }

    /// <summary>Field number for the "TestBool" field.</summary>
    public const int TestBoolFieldNumber = 4;
    private bool testBool_;
    /// <summary>
    /// 测试bool类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TestBool {
      get { return testBool_; }
      set {
        testBool_ = value;
      }
    }

    /// <summary>Field number for the "TestIntArrays" field.</summary>
    public const int TestIntArraysFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_testIntArrays_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> testIntArrays_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 测试int数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TestIntArrays {
      get { return testIntArrays_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestGlobalTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestGlobalTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TestInt != other.TestInt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TestFloat, other.TestFloat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TestDouble, other.TestDouble)) return false;
      if (TestBool != other.TestBool) return false;
      if(!testIntArrays_.Equals(other.testIntArrays_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TestInt != 0) hash ^= TestInt.GetHashCode();
      if (TestFloat != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TestFloat);
      if (TestDouble != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TestDouble);
      if (TestBool != false) hash ^= TestBool.GetHashCode();
      hash ^= testIntArrays_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TestInt != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TestInt);
      }
      if (TestFloat != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TestFloat);
      }
      if (TestDouble != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TestDouble);
      }
      if (TestBool != false) {
        output.WriteRawTag(32);
        output.WriteBool(TestBool);
      }
      testIntArrays_.WriteTo(output, _repeated_testIntArrays_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TestInt != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TestInt);
      }
      if (TestFloat != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TestFloat);
      }
      if (TestDouble != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TestDouble);
      }
      if (TestBool != false) {
        output.WriteRawTag(32);
        output.WriteBool(TestBool);
      }
      testIntArrays_.WriteTo(ref output, _repeated_testIntArrays_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TestInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestInt);
      }
      if (TestFloat != 0F) {
        size += 1 + 4;
      }
      if (TestDouble != 0D) {
        size += 1 + 8;
      }
      if (TestBool != false) {
        size += 1 + 1;
      }
      size += testIntArrays_.CalculateSize(_repeated_testIntArrays_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestGlobalTemplate other) {
      if (other == null) {
        return;
      }
      if (other.TestInt != 0) {
        TestInt = other.TestInt;
      }
      if (other.TestFloat != 0F) {
        TestFloat = other.TestFloat;
      }
      if (other.TestDouble != 0D) {
        TestDouble = other.TestDouble;
      }
      if (other.TestBool != false) {
        TestBool = other.TestBool;
      }
      testIntArrays_.Add(other.testIntArrays_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TestInt = input.ReadInt32();
            break;
          }
          case 21: {
            TestFloat = input.ReadFloat();
            break;
          }
          case 25: {
            TestDouble = input.ReadDouble();
            break;
          }
          case 32: {
            TestBool = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            testIntArrays_.AddEntriesFrom(input, _repeated_testIntArrays_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TestInt = input.ReadInt32();
            break;
          }
          case 21: {
            TestFloat = input.ReadFloat();
            break;
          }
          case 25: {
            TestDouble = input.ReadDouble();
            break;
          }
          case 32: {
            TestBool = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            testIntArrays_.AddEntriesFrom(ref input, _repeated_testIntArrays_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
