// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/GlobalTemplate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from protos/GlobalTemplate.proto</summary>
  public static partial class GlobalTemplateReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/GlobalTemplate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GlobalTemplateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtwcm90b3MvR2xvYmFsVGVtcGxhdGUucHJvdG8SBkNvbmZpZyKVDgoOR2xv",
            "YmFsVGVtcGxhdGUSEQoJTmFtZUxpbWl0GAEgASgFEhgKEERlZmF1bHREcm9w",
            "R3JvdXAYAiABKAUSFgoOQ2hhbmdlTmFtZUNvc3QYAyABKAUSHgoWUGxheWVF",
            "bmVyZ3lSZWNvdmVyVGltZRgEIAEoBRJFChJGaWVsZEhlcm9OdW1MaW1pdHMY",
            "BSADKAsyKS5Db25maWcuR2xvYmFsVGVtcGxhdGUuRmllbGRoZXJvbnVtbGlt",
            "aXRfEhoKEkZvcm1hdGlvbk5hbWVMaW1pdBgGIAEoBRIcChRGb3JtYXRpb25D",
            "YXJlZXJMaW1pdBgHIAEoBRIdChVJbml0aWFsRm9ybWFpdG9uSGVyb3MYCCAD",
            "KAUSFgoORm9ybWF0aW9uQ291bnQYCSABKAUSIgoaSGVyb05vcm1hbFRhbGVu",
            "dENvdW50TGltaXQYCiABKAgSIAoYSGVyb0hlYWx0aENvcnJlY3Rpb25CYXNl",
            "GAsgASgIEh8KF0hlcm9IZWFsdGhDb3JyZWN0aW9uQ29lGAwgASgBEiAKGEhl",
            "cm9BdHRhY2tDb3JyZWN0aW9uQmFzZRgNIAEoBRIfChdIZXJvQXR0YWNrQ29y",
            "cmVjdGlvbkNvZRgOIAEoARIfChdIZXJvRG9kZ2VDb3JyZWN0aW9uQmFzZRgP",
            "IAEoBRIeChZIZXJvRG9kZ2VDb3JyZWN0aW9uQ29lGBAgASgBEh4KFkhlcm9D",
            "cml0Q29ycmVjdGlvbkJhc2UYESABKAUSHQoVSGVyb0NyaXRDb3JyZWN0aW9u",
            "Q29lGBIgASgBEh4KFkhlcm9CbGNrQ29ycmVjdGlvbkJhc2UYEyABKAUSHQoV",
            "SGVyb0JsY2tDb3JyZWN0aW9uQ29lGBQgASgBElAKF0hlcm9BdHRyaWJ1dGVF",
            "dmFsdWF0aW9uGBUgASgLMi8uQ29uZmlnLkdsb2JhbFRlbXBsYXRlLkhlcm9h",
            "dHRyaWJ1dGVldmFsdWF0aW9uXxIXCg9IZXJvTGV2ZWxMaW1pdHMYFiADKAUS",
            "FQoNSGVyb1N0YXJMaW1pdBgXIAEoBRIbChNIZXJvU3RhclVwTmVlZENhcmRz",
            "GBggAygFEhsKE0hlcm9TdGFyVXBOZWVkR29sZHMYGSADKAUSIwobSGVyb1N0",
            "YXJVcEdhaW5Ob3JtYWxUYWxlbnRzGBogAygFEiEKGUhlcm9TdGFyVXBDYW5j",
            "ZWxHaXZlQ2FyZHMYGyADKAUSIAoYSGVyb1N0YXJVcENhbmNlbEdpdmVHb2xk",
            "GBwgASgBEh0KFUhlcm9MZWFybmluZ05lZWRHb2xkcxgdIAMoBRJFChJoZXJv",
            "Q2xhc3NOZWVkQ2FyZHMYHiADKAsyKS5Db25maWcuR2xvYmFsVGVtcGxhdGUu",
            "SGVyb2NsYXNzbmVlZGNhcmRfEiMKG0hlcm9Ta2lsbFRyYWluaW5nR2l2ZUV4",
            "cENvZRgfIAEoARIdChVOb3JtYWxMb3R0ZXJ5RnJlZVRpbWUYICABKAUSHgoW",
            "U3BlY2lhbExvdHRlcnlGcmVlVGltZRghIAEoBRIgChhMb3R0ZXJ5VGlja2V0",
            "RGlhbW9uZENvc3QYIiABKAUSEgoKR3VpbGRJY29ucxgjIAMoCRIYChBHdWls",
            "ZFNlZWtIZWxwTnVtGCQgASgFEhcKD1RhdmVyblRhc2tCcmlzaxglIAEoBRIZ",
            "ChFHdmVNYXBCYXR0bGVDb3VudBgmIAEoBRIlCh1HdmVEdXBsaWNhdGVDYXJk",
            "RWxlbWVudENvdW50cxgnIAMoBRIcChRHdmVEdXBsaWNhdGVIYW5kQ2FyZBgo",
            "IAEoBRIdChVHdmVEdXBsaWNhdGVSb3VuZFRpbWUYKSABKAUSJgoeR3ZlRHVw",
            "bGljYXRlV2luRGVsZXRlQ2FyZENvdW50GCogASgFEicKH0d2ZUR1cGxpY2F0",
            "ZUxvc2VEZWxldGVDYXJkQ291bnQYKyABKAUSIQoZR3ZlRHVwbGljYXRlT3Zl",
            "ckNhcmRDb3VudBgsIAEoBRIjChtHdmVEdXBsaWNhdGVCb3NzTG9zc0hwQ291",
            "bnQYLSABKAUSHgoWR3ZlRHVwbGljYXRlUmV3YXJkR29sZBguIAEoBRowChJG",
            "aWVsZGhlcm9udW1saW1pdF8SDQoFTGV2ZWwYASABKAUSCwoDTnVtGAIgASgF",
            "GkQKGEhlcm9hdHRyaWJ1dGVldmFsdWF0aW9uXxIMCgROdW0xGAEgASgFEgwK",
            "BE51bTIYAiABKAUSDAoETnVtMxgDIAEoBRp0ChJIZXJvY2xhc3NuZWVkY2Fy",
            "ZF8SDgoGQ2xhc3MxGAEgASgFEg4KBkNsYXNzMhgCIAEoBRIOCgZDbGFzczMY",
            "AyABKAUSDgoGQ2xhc3M0GAQgASgFEg4KBkNsYXNzNRgFIAEoBRIOCgZDbGFz",
            "czYYBiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.GlobalTemplate), global::Config.GlobalTemplate.Parser, new[]{ "NameLimit", "DefaultDropGroup", "ChangeNameCost", "PlayeEnergyRecoverTime", "FieldHeroNumLimits", "FormationNameLimit", "FormationCareerLimit", "InitialFormaitonHeros", "FormationCount", "HeroNormalTalentCountLimit", "HeroHealthCorrectionBase", "HeroHealthCorrectionCoe", "HeroAttackCorrectionBase", "HeroAttackCorrectionCoe", "HeroDodgeCorrectionBase", "HeroDodgeCorrectionCoe", "HeroCritCorrectionBase", "HeroCritCorrectionCoe", "HeroBlckCorrectionBase", "HeroBlckCorrectionCoe", "HeroAttributeEvaluation", "HeroLevelLimits", "HeroStarLimit", "HeroStarUpNeedCards", "HeroStarUpNeedGolds", "HeroStarUpGainNormalTalents", "HeroStarUpCancelGiveCards", "HeroStarUpCancelGiveGold", "HeroLearningNeedGolds", "HeroClassNeedCards", "HeroSkillTrainingGiveExpCoe", "NormalLotteryFreeTime", "SpecialLotteryFreeTime", "LotteryTicketDiamondCost", "GuildIcons", "GuildSeekHelpNum", "TavernTaskBrisk", "GveMapBattleCount", "GveDuplicateCardElementCounts", "GveDuplicateHandCard", "GveDuplicateRoundTime", "GveDuplicateWinDeleteCardCount", "GveDuplicateLoseDeleteCardCount", "GveDuplicateOverCardCount", "GveDuplicateBossLossHpCount", "GveDuplicateRewardGold" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Config.GlobalTemplate.Types.Fieldheronumlimit_), global::Config.GlobalTemplate.Types.Fieldheronumlimit_.Parser, new[]{ "Level", "Num" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.GlobalTemplate.Types.Heroattributeevaluation_), global::Config.GlobalTemplate.Types.Heroattributeevaluation_.Parser, new[]{ "Num1", "Num2", "Num3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.GlobalTemplate.Types.Heroclassneedcard_), global::Config.GlobalTemplate.Types.Heroclassneedcard_.Parser, new[]{ "Class1", "Class2", "Class3", "Class4", "Class5", "Class6" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GlobalTemplate : pb::IMessage<GlobalTemplate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GlobalTemplate> _parser = new pb::MessageParser<GlobalTemplate>(() => new GlobalTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.GlobalTemplateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalTemplate(GlobalTemplate other) : this() {
      nameLimit_ = other.nameLimit_;
      defaultDropGroup_ = other.defaultDropGroup_;
      changeNameCost_ = other.changeNameCost_;
      playeEnergyRecoverTime_ = other.playeEnergyRecoverTime_;
      fieldHeroNumLimits_ = other.fieldHeroNumLimits_.Clone();
      formationNameLimit_ = other.formationNameLimit_;
      formationCareerLimit_ = other.formationCareerLimit_;
      initialFormaitonHeros_ = other.initialFormaitonHeros_.Clone();
      formationCount_ = other.formationCount_;
      heroNormalTalentCountLimit_ = other.heroNormalTalentCountLimit_;
      heroHealthCorrectionBase_ = other.heroHealthCorrectionBase_;
      heroHealthCorrectionCoe_ = other.heroHealthCorrectionCoe_;
      heroAttackCorrectionBase_ = other.heroAttackCorrectionBase_;
      heroAttackCorrectionCoe_ = other.heroAttackCorrectionCoe_;
      heroDodgeCorrectionBase_ = other.heroDodgeCorrectionBase_;
      heroDodgeCorrectionCoe_ = other.heroDodgeCorrectionCoe_;
      heroCritCorrectionBase_ = other.heroCritCorrectionBase_;
      heroCritCorrectionCoe_ = other.heroCritCorrectionCoe_;
      heroBlckCorrectionBase_ = other.heroBlckCorrectionBase_;
      heroBlckCorrectionCoe_ = other.heroBlckCorrectionCoe_;
      heroAttributeEvaluation_ = other.heroAttributeEvaluation_ != null ? other.heroAttributeEvaluation_.Clone() : null;
      heroLevelLimits_ = other.heroLevelLimits_.Clone();
      heroStarLimit_ = other.heroStarLimit_;
      heroStarUpNeedCards_ = other.heroStarUpNeedCards_.Clone();
      heroStarUpNeedGolds_ = other.heroStarUpNeedGolds_.Clone();
      heroStarUpGainNormalTalents_ = other.heroStarUpGainNormalTalents_.Clone();
      heroStarUpCancelGiveCards_ = other.heroStarUpCancelGiveCards_.Clone();
      heroStarUpCancelGiveGold_ = other.heroStarUpCancelGiveGold_;
      heroLearningNeedGolds_ = other.heroLearningNeedGolds_.Clone();
      heroClassNeedCards_ = other.heroClassNeedCards_.Clone();
      heroSkillTrainingGiveExpCoe_ = other.heroSkillTrainingGiveExpCoe_;
      normalLotteryFreeTime_ = other.normalLotteryFreeTime_;
      specialLotteryFreeTime_ = other.specialLotteryFreeTime_;
      lotteryTicketDiamondCost_ = other.lotteryTicketDiamondCost_;
      guildIcons_ = other.guildIcons_.Clone();
      guildSeekHelpNum_ = other.guildSeekHelpNum_;
      tavernTaskBrisk_ = other.tavernTaskBrisk_;
      gveMapBattleCount_ = other.gveMapBattleCount_;
      gveDuplicateCardElementCounts_ = other.gveDuplicateCardElementCounts_.Clone();
      gveDuplicateHandCard_ = other.gveDuplicateHandCard_;
      gveDuplicateRoundTime_ = other.gveDuplicateRoundTime_;
      gveDuplicateWinDeleteCardCount_ = other.gveDuplicateWinDeleteCardCount_;
      gveDuplicateLoseDeleteCardCount_ = other.gveDuplicateLoseDeleteCardCount_;
      gveDuplicateOverCardCount_ = other.gveDuplicateOverCardCount_;
      gveDuplicateBossLossHpCount_ = other.gveDuplicateBossLossHpCount_;
      gveDuplicateRewardGold_ = other.gveDuplicateRewardGold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalTemplate Clone() {
      return new GlobalTemplate(this);
    }

    /// <summary>Field number for the "NameLimit" field.</summary>
    public const int NameLimitFieldNumber = 1;
    private int nameLimit_;
    /// <summary>
    /// 名字字数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NameLimit {
      get { return nameLimit_; }
      set {
        nameLimit_ = value;
      }
    }

    /// <summary>Field number for the "DefaultDropGroup" field.</summary>
    public const int DefaultDropGroupFieldNumber = 2;
    private int defaultDropGroup_;
    /// <summary>
    /// 玩家进入游戏时初始获得物品掉落组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultDropGroup {
      get { return defaultDropGroup_; }
      set {
        defaultDropGroup_ = value;
      }
    }

    /// <summary>Field number for the "ChangeNameCost" field.</summary>
    public const int ChangeNameCostFieldNumber = 3;
    private int changeNameCost_;
    /// <summary>
    /// 改名消耗（单位：宝石）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeNameCost {
      get { return changeNameCost_; }
      set {
        changeNameCost_ = value;
      }
    }

    /// <summary>Field number for the "PlayeEnergyRecoverTime" field.</summary>
    public const int PlayeEnergyRecoverTimeFieldNumber = 4;
    private int playeEnergyRecoverTime_;
    /// <summary>
    /// 每恢复一点体力所需时间（单位：分钟）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayeEnergyRecoverTime {
      get { return playeEnergyRecoverTime_; }
      set {
        playeEnergyRecoverTime_ = value;
      }
    }

    /// <summary>Field number for the "FieldHeroNumLimits" field.</summary>
    public const int FieldHeroNumLimitsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Config.GlobalTemplate.Types.Fieldheronumlimit_> _repeated_fieldHeroNumLimits_codec
        = pb::FieldCodec.ForMessage(42, global::Config.GlobalTemplate.Types.Fieldheronumlimit_.Parser);
    private readonly pbc::RepeatedField<global::Config.GlobalTemplate.Types.Fieldheronumlimit_> fieldHeroNumLimits_ = new pbc::RepeatedField<global::Config.GlobalTemplate.Types.Fieldheronumlimit_>();
    /// <summary>
    /// 各等级可上阵英雄数量，现在的等级对应的是玩家等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Config.GlobalTemplate.Types.Fieldheronumlimit_> FieldHeroNumLimits {
      get { return fieldHeroNumLimits_; }
    }

    /// <summary>Field number for the "FormationNameLimit" field.</summary>
    public const int FormationNameLimitFieldNumber = 6;
    private int formationNameLimit_;
    /// <summary>
    /// 阵容名字字数限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FormationNameLimit {
      get { return formationNameLimit_; }
      set {
        formationNameLimit_ = value;
      }
    }

    /// <summary>Field number for the "FormationCareerLimit" field.</summary>
    public const int FormationCareerLimitFieldNumber = 7;
    private int formationCareerLimit_;
    /// <summary>
    /// 同职业的魔物上阵不能超过x个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FormationCareerLimit {
      get { return formationCareerLimit_; }
      set {
        formationCareerLimit_ = value;
      }
    }

    /// <summary>Field number for the "InitialFormaitonHeros" field.</summary>
    public const int InitialFormaitonHerosFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_initialFormaitonHeros_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> initialFormaitonHeros_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 队伍1-队伍3默认初始英雄及站位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InitialFormaitonHeros {
      get { return initialFormaitonHeros_; }
    }

    /// <summary>Field number for the "FormationCount" field.</summary>
    public const int FormationCountFieldNumber = 9;
    private int formationCount_;
    /// <summary>
    /// 玩家可设置X个队伍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FormationCount {
      get { return formationCount_; }
      set {
        formationCount_ = value;
      }
    }

    /// <summary>Field number for the "HeroNormalTalentCountLimit" field.</summary>
    public const int HeroNormalTalentCountLimitFieldNumber = 10;
    private bool heroNormalTalentCountLimit_;
    /// <summary>
    /// 英雄普通奥义数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HeroNormalTalentCountLimit {
      get { return heroNormalTalentCountLimit_; }
      set {
        heroNormalTalentCountLimit_ = value;
      }
    }

    /// <summary>Field number for the "HeroHealthCorrectionBase" field.</summary>
    public const int HeroHealthCorrectionBaseFieldNumber = 11;
    private bool heroHealthCorrectionBase_;
    /// <summary>
    /// 英雄生命属性权重值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HeroHealthCorrectionBase {
      get { return heroHealthCorrectionBase_; }
      set {
        heroHealthCorrectionBase_ = value;
      }
    }

    /// <summary>Field number for the "HeroHealthCorrectionCoe" field.</summary>
    public const int HeroHealthCorrectionCoeFieldNumber = 12;
    private double heroHealthCorrectionCoe_;
    /// <summary>
    /// 英雄生命属性权重系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeroHealthCorrectionCoe {
      get { return heroHealthCorrectionCoe_; }
      set {
        heroHealthCorrectionCoe_ = value;
      }
    }

    /// <summary>Field number for the "HeroAttackCorrectionBase" field.</summary>
    public const int HeroAttackCorrectionBaseFieldNumber = 13;
    private int heroAttackCorrectionBase_;
    /// <summary>
    /// 英雄攻击属性权重值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroAttackCorrectionBase {
      get { return heroAttackCorrectionBase_; }
      set {
        heroAttackCorrectionBase_ = value;
      }
    }

    /// <summary>Field number for the "HeroAttackCorrectionCoe" field.</summary>
    public const int HeroAttackCorrectionCoeFieldNumber = 14;
    private double heroAttackCorrectionCoe_;
    /// <summary>
    /// 英雄攻击属性权重系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeroAttackCorrectionCoe {
      get { return heroAttackCorrectionCoe_; }
      set {
        heroAttackCorrectionCoe_ = value;
      }
    }

    /// <summary>Field number for the "HeroDodgeCorrectionBase" field.</summary>
    public const int HeroDodgeCorrectionBaseFieldNumber = 15;
    private int heroDodgeCorrectionBase_;
    /// <summary>
    /// 英雄闪避属性权重值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroDodgeCorrectionBase {
      get { return heroDodgeCorrectionBase_; }
      set {
        heroDodgeCorrectionBase_ = value;
      }
    }

    /// <summary>Field number for the "HeroDodgeCorrectionCoe" field.</summary>
    public const int HeroDodgeCorrectionCoeFieldNumber = 16;
    private double heroDodgeCorrectionCoe_;
    /// <summary>
    /// 英雄闪避属性权重系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeroDodgeCorrectionCoe {
      get { return heroDodgeCorrectionCoe_; }
      set {
        heroDodgeCorrectionCoe_ = value;
      }
    }

    /// <summary>Field number for the "HeroCritCorrectionBase" field.</summary>
    public const int HeroCritCorrectionBaseFieldNumber = 17;
    private int heroCritCorrectionBase_;
    /// <summary>
    /// 英雄暴击属性权重值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroCritCorrectionBase {
      get { return heroCritCorrectionBase_; }
      set {
        heroCritCorrectionBase_ = value;
      }
    }

    /// <summary>Field number for the "HeroCritCorrectionCoe" field.</summary>
    public const int HeroCritCorrectionCoeFieldNumber = 18;
    private double heroCritCorrectionCoe_;
    /// <summary>
    /// 英雄暴击属性权重系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeroCritCorrectionCoe {
      get { return heroCritCorrectionCoe_; }
      set {
        heroCritCorrectionCoe_ = value;
      }
    }

    /// <summary>Field number for the "HeroBlckCorrectionBase" field.</summary>
    public const int HeroBlckCorrectionBaseFieldNumber = 19;
    private int heroBlckCorrectionBase_;
    /// <summary>
    /// 英雄暴击属性权重值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroBlckCorrectionBase {
      get { return heroBlckCorrectionBase_; }
      set {
        heroBlckCorrectionBase_ = value;
      }
    }

    /// <summary>Field number for the "HeroBlckCorrectionCoe" field.</summary>
    public const int HeroBlckCorrectionCoeFieldNumber = 20;
    private double heroBlckCorrectionCoe_;
    /// <summary>
    /// 英雄暴击属性权重系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeroBlckCorrectionCoe {
      get { return heroBlckCorrectionCoe_; }
      set {
        heroBlckCorrectionCoe_ = value;
      }
    }

    /// <summary>Field number for the "HeroAttributeEvaluation" field.</summary>
    public const int HeroAttributeEvaluationFieldNumber = 21;
    private global::Config.GlobalTemplate.Types.Heroattributeevaluation_ heroAttributeEvaluation_;
    /// <summary>
    /// 英雄个体值评价（(0,Num1]是C，(Num1,Num2]是B，(Num2,Num3]是A，大于Num3是S）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Config.GlobalTemplate.Types.Heroattributeevaluation_ HeroAttributeEvaluation {
      get { return heroAttributeEvaluation_; }
      set {
        heroAttributeEvaluation_ = value;
      }
    }

    /// <summary>Field number for the "HeroLevelLimits" field.</summary>
    public const int HeroLevelLimitsFieldNumber = 22;
    private static readonly pb::FieldCodec<int> _repeated_heroLevelLimits_codec
        = pb::FieldCodec.ForInt32(178);
    private readonly pbc::RepeatedField<int> heroLevelLimits_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 英雄不同星级对应的等级上限，数组第一项为1星对应的等级上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroLevelLimits {
      get { return heroLevelLimits_; }
    }

    /// <summary>Field number for the "HeroStarLimit" field.</summary>
    public const int HeroStarLimitFieldNumber = 23;
    private int heroStarLimit_;
    /// <summary>
    /// 英雄星级上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroStarLimit {
      get { return heroStarLimit_; }
      set {
        heroStarLimit_ = value;
      }
    }

    /// <summary>Field number for the "HeroStarUpNeedCards" field.</summary>
    public const int HeroStarUpNeedCardsFieldNumber = 24;
    private static readonly pb::FieldCodec<int> _repeated_heroStarUpNeedCards_codec
        = pb::FieldCodec.ForInt32(194);
    private readonly pbc::RepeatedField<int> heroStarUpNeedCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 英雄不同星级升星所需消耗的同星副卡数量，数组第一项为1星升2星时所需数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroStarUpNeedCards {
      get { return heroStarUpNeedCards_; }
    }

    /// <summary>Field number for the "HeroStarUpNeedGolds" field.</summary>
    public const int HeroStarUpNeedGoldsFieldNumber = 25;
    private static readonly pb::FieldCodec<int> _repeated_heroStarUpNeedGolds_codec
        = pb::FieldCodec.ForInt32(202);
    private readonly pbc::RepeatedField<int> heroStarUpNeedGolds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 英雄不同星级升星所需消耗的金币数量，数组第一项为1星升2星时所需数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroStarUpNeedGolds {
      get { return heroStarUpNeedGolds_; }
    }

    /// <summary>Field number for the "HeroStarUpGainNormalTalents" field.</summary>
    public const int HeroStarUpGainNormalTalentsFieldNumber = 26;
    private static readonly pb::FieldCodec<int> _repeated_heroStarUpGainNormalTalents_codec
        = pb::FieldCodec.ForInt32(210);
    private readonly pbc::RepeatedField<int> heroStarUpGainNormalTalents_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 当英雄升到指定星级时，可获得1个奥义，从英雄表里的奥义库中随机1个(新增字段！！！）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroStarUpGainNormalTalents {
      get { return heroStarUpGainNormalTalents_; }
    }

    /// <summary>Field number for the "HeroStarUpCancelGiveCards" field.</summary>
    public const int HeroStarUpCancelGiveCardsFieldNumber = 27;
    private static readonly pb::FieldCodec<int> _repeated_heroStarUpCancelGiveCards_codec
        = pb::FieldCodec.ForInt32(218);
    private readonly pbc::RepeatedField<int> heroStarUpCancelGiveCards_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 英雄不同星级取消升星时返还的副卡数量，数组第一项为1星升2星取消时返还的数量（删除了放弃升星结果的操作，该字段删除）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroStarUpCancelGiveCards {
      get { return heroStarUpCancelGiveCards_; }
    }

    /// <summary>Field number for the "HeroStarUpCancelGiveGold" field.</summary>
    public const int HeroStarUpCancelGiveGoldFieldNumber = 28;
    private double heroStarUpCancelGiveGold_;
    /// <summary>
    /// 英雄取消升星时消耗的金币比例（删除了放弃升星结果的操作，该字段删除）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeroStarUpCancelGiveGold {
      get { return heroStarUpCancelGiveGold_; }
      set {
        heroStarUpCancelGiveGold_ = value;
      }
    }

    /// <summary>Field number for the "HeroLearningNeedGolds" field.</summary>
    public const int HeroLearningNeedGoldsFieldNumber = 29;
    private static readonly pb::FieldCodec<int> _repeated_heroLearningNeedGolds_codec
        = pb::FieldCodec.ForInt32(234);
    private readonly pbc::RepeatedField<int> heroLearningNeedGolds_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 英雄不同星级学习时所需消耗的金币数量，数组第一项为1星所需数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> HeroLearningNeedGolds {
      get { return heroLearningNeedGolds_; }
    }

    /// <summary>Field number for the "heroClassNeedCards" field.</summary>
    public const int HeroClassNeedCardsFieldNumber = 30;
    private static readonly pb::FieldCodec<global::Config.GlobalTemplate.Types.Heroclassneedcard_> _repeated_heroClassNeedCards_codec
        = pb::FieldCodec.ForMessage(242, global::Config.GlobalTemplate.Types.Heroclassneedcard_.Parser);
    private readonly pbc::RepeatedField<global::Config.GlobalTemplate.Types.Heroclassneedcard_> heroClassNeedCards_ = new pbc::RepeatedField<global::Config.GlobalTemplate.Types.Heroclassneedcard_>();
    /// <summary>
    /// 英雄不同星级在不同阶数时进阶所需消耗的同卡数量，数组第一项为1星时所需数量，Class1表示0阶升1阶所需数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Config.GlobalTemplate.Types.Heroclassneedcard_> HeroClassNeedCards {
      get { return heroClassNeedCards_; }
    }

    /// <summary>Field number for the "HeroSkillTrainingGiveExpCoe" field.</summary>
    public const int HeroSkillTrainingGiveExpCoeFieldNumber = 31;
    private double heroSkillTrainingGiveExpCoe_;
    /// <summary>
    /// 英雄特训返还英雄经验比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double HeroSkillTrainingGiveExpCoe {
      get { return heroSkillTrainingGiveExpCoe_; }
      set {
        heroSkillTrainingGiveExpCoe_ = value;
      }
    }

    /// <summary>Field number for the "NormalLotteryFreeTime" field.</summary>
    public const int NormalLotteryFreeTimeFieldNumber = 32;
    private int normalLotteryFreeTime_;
    /// <summary>
    /// 金币免费召唤冷却时间，单位：分钟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NormalLotteryFreeTime {
      get { return normalLotteryFreeTime_; }
      set {
        normalLotteryFreeTime_ = value;
      }
    }

    /// <summary>Field number for the "SpecialLotteryFreeTime" field.</summary>
    public const int SpecialLotteryFreeTimeFieldNumber = 33;
    private int specialLotteryFreeTime_;
    /// <summary>
    /// 氪金免费召唤冷却时间，单位：分钟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpecialLotteryFreeTime {
      get { return specialLotteryFreeTime_; }
      set {
        specialLotteryFreeTime_ = value;
      }
    }

    /// <summary>Field number for the "LotteryTicketDiamondCost" field.</summary>
    public const int LotteryTicketDiamondCostFieldNumber = 34;
    private int lotteryTicketDiamondCost_;
    /// <summary>
    /// 单张抽卡券消耗的钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LotteryTicketDiamondCost {
      get { return lotteryTicketDiamondCost_; }
      set {
        lotteryTicketDiamondCost_ = value;
      }
    }

    /// <summary>Field number for the "GuildIcons" field.</summary>
    public const int GuildIconsFieldNumber = 35;
    private static readonly pb::FieldCodec<string> _repeated_guildIcons_codec
        = pb::FieldCodec.ForString(282);
    private readonly pbc::RepeatedField<string> guildIcons_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// 公会图标（最多配置12个）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GuildIcons {
      get { return guildIcons_; }
    }

    /// <summary>Field number for the "GuildSeekHelpNum" field.</summary>
    public const int GuildSeekHelpNumFieldNumber = 36;
    private int guildSeekHelpNum_;
    /// <summary>
    /// 公会援助请求次数（每日00：00刷新）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuildSeekHelpNum {
      get { return guildSeekHelpNum_; }
      set {
        guildSeekHelpNum_ = value;
      }
    }

    /// <summary>Field number for the "TavernTaskBrisk" field.</summary>
    public const int TavernTaskBriskFieldNumber = 37;
    private int tavernTaskBrisk_;
    /// <summary>
    /// 酒馆任务给工会增加活跃度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TavernTaskBrisk {
      get { return tavernTaskBrisk_; }
      set {
        tavernTaskBrisk_ = value;
      }
    }

    /// <summary>Field number for the "GveMapBattleCount" field.</summary>
    public const int GveMapBattleCountFieldNumber = 38;
    private int gveMapBattleCount_;
    /// <summary>
    /// 工会副本每天每个委托可挑战次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GveMapBattleCount {
      get { return gveMapBattleCount_; }
      set {
        gveMapBattleCount_ = value;
      }
    }

    /// <summary>Field number for the "GveDuplicateCardElementCounts" field.</summary>
    public const int GveDuplicateCardElementCountsFieldNumber = 39;
    private static readonly pb::FieldCodec<int> _repeated_gveDuplicateCardElementCounts_codec
        = pb::FieldCodec.ForInt32(314);
    private readonly pbc::RepeatedField<int> gveDuplicateCardElementCounts_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 公会副本玩家牌库地、水、火、风各元素卡牌数量（总和四元素相加总数）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> GveDuplicateCardElementCounts {
      get { return gveDuplicateCardElementCounts_; }
    }

    /// <summary>Field number for the "GveDuplicateHandCard" field.</summary>
    public const int GveDuplicateHandCardFieldNumber = 40;
    private int gveDuplicateHandCard_;
    /// <summary>
    /// 公会副本玩家每回合补充手牌的最大数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GveDuplicateHandCard {
      get { return gveDuplicateHandCard_; }
      set {
        gveDuplicateHandCard_ = value;
      }
    }

    /// <summary>Field number for the "GveDuplicateRoundTime" field.</summary>
    public const int GveDuplicateRoundTimeFieldNumber = 41;
    private int gveDuplicateRoundTime_;
    /// <summary>
    /// 公会副本回合准备时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GveDuplicateRoundTime {
      get { return gveDuplicateRoundTime_; }
      set {
        gveDuplicateRoundTime_ = value;
      }
    }

    /// <summary>Field number for the "GveDuplicateWinDeleteCardCount" field.</summary>
    public const int GveDuplicateWinDeleteCardCountFieldNumber = 42;
    private int gveDuplicateWinDeleteCardCount_;
    /// <summary>
    /// 公会副本胜利移除卡牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GveDuplicateWinDeleteCardCount {
      get { return gveDuplicateWinDeleteCardCount_; }
      set {
        gveDuplicateWinDeleteCardCount_ = value;
      }
    }

    /// <summary>Field number for the "GveDuplicateLoseDeleteCardCount" field.</summary>
    public const int GveDuplicateLoseDeleteCardCountFieldNumber = 43;
    private int gveDuplicateLoseDeleteCardCount_;
    /// <summary>
    /// 公会副本失败移除卡牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GveDuplicateLoseDeleteCardCount {
      get { return gveDuplicateLoseDeleteCardCount_; }
      set {
        gveDuplicateLoseDeleteCardCount_ = value;
      }
    }

    /// <summary>Field number for the "GveDuplicateOverCardCount" field.</summary>
    public const int GveDuplicateOverCardCountFieldNumber = 44;
    private int gveDuplicateOverCardCount_;
    /// <summary>
    /// 公会副本结束判定任意一方移除卡排数量大于等于该值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GveDuplicateOverCardCount {
      get { return gveDuplicateOverCardCount_; }
      set {
        gveDuplicateOverCardCount_ = value;
      }
    }

    /// <summary>Field number for the "GveDuplicateBossLossHpCount" field.</summary>
    public const int GveDuplicateBossLossHpCountFieldNumber = 45;
    private int gveDuplicateBossLossHpCount_;
    /// <summary>
    /// 公会副本每张牌扣除BOSS血量系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GveDuplicateBossLossHpCount {
      get { return gveDuplicateBossLossHpCount_; }
      set {
        gveDuplicateBossLossHpCount_ = value;
      }
    }

    /// <summary>Field number for the "GveDuplicateRewardGold" field.</summary>
    public const int GveDuplicateRewardGoldFieldNumber = 46;
    private int gveDuplicateRewardGold_;
    /// <summary>
    /// 公会副本对BOSS每造成1点伤害获得金币系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GveDuplicateRewardGold {
      get { return gveDuplicateRewardGold_; }
      set {
        gveDuplicateRewardGold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NameLimit != other.NameLimit) return false;
      if (DefaultDropGroup != other.DefaultDropGroup) return false;
      if (ChangeNameCost != other.ChangeNameCost) return false;
      if (PlayeEnergyRecoverTime != other.PlayeEnergyRecoverTime) return false;
      if(!fieldHeroNumLimits_.Equals(other.fieldHeroNumLimits_)) return false;
      if (FormationNameLimit != other.FormationNameLimit) return false;
      if (FormationCareerLimit != other.FormationCareerLimit) return false;
      if(!initialFormaitonHeros_.Equals(other.initialFormaitonHeros_)) return false;
      if (FormationCount != other.FormationCount) return false;
      if (HeroNormalTalentCountLimit != other.HeroNormalTalentCountLimit) return false;
      if (HeroHealthCorrectionBase != other.HeroHealthCorrectionBase) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeroHealthCorrectionCoe, other.HeroHealthCorrectionCoe)) return false;
      if (HeroAttackCorrectionBase != other.HeroAttackCorrectionBase) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeroAttackCorrectionCoe, other.HeroAttackCorrectionCoe)) return false;
      if (HeroDodgeCorrectionBase != other.HeroDodgeCorrectionBase) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeroDodgeCorrectionCoe, other.HeroDodgeCorrectionCoe)) return false;
      if (HeroCritCorrectionBase != other.HeroCritCorrectionBase) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeroCritCorrectionCoe, other.HeroCritCorrectionCoe)) return false;
      if (HeroBlckCorrectionBase != other.HeroBlckCorrectionBase) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeroBlckCorrectionCoe, other.HeroBlckCorrectionCoe)) return false;
      if (!object.Equals(HeroAttributeEvaluation, other.HeroAttributeEvaluation)) return false;
      if(!heroLevelLimits_.Equals(other.heroLevelLimits_)) return false;
      if (HeroStarLimit != other.HeroStarLimit) return false;
      if(!heroStarUpNeedCards_.Equals(other.heroStarUpNeedCards_)) return false;
      if(!heroStarUpNeedGolds_.Equals(other.heroStarUpNeedGolds_)) return false;
      if(!heroStarUpGainNormalTalents_.Equals(other.heroStarUpGainNormalTalents_)) return false;
      if(!heroStarUpCancelGiveCards_.Equals(other.heroStarUpCancelGiveCards_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeroStarUpCancelGiveGold, other.HeroStarUpCancelGiveGold)) return false;
      if(!heroLearningNeedGolds_.Equals(other.heroLearningNeedGolds_)) return false;
      if(!heroClassNeedCards_.Equals(other.heroClassNeedCards_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(HeroSkillTrainingGiveExpCoe, other.HeroSkillTrainingGiveExpCoe)) return false;
      if (NormalLotteryFreeTime != other.NormalLotteryFreeTime) return false;
      if (SpecialLotteryFreeTime != other.SpecialLotteryFreeTime) return false;
      if (LotteryTicketDiamondCost != other.LotteryTicketDiamondCost) return false;
      if(!guildIcons_.Equals(other.guildIcons_)) return false;
      if (GuildSeekHelpNum != other.GuildSeekHelpNum) return false;
      if (TavernTaskBrisk != other.TavernTaskBrisk) return false;
      if (GveMapBattleCount != other.GveMapBattleCount) return false;
      if(!gveDuplicateCardElementCounts_.Equals(other.gveDuplicateCardElementCounts_)) return false;
      if (GveDuplicateHandCard != other.GveDuplicateHandCard) return false;
      if (GveDuplicateRoundTime != other.GveDuplicateRoundTime) return false;
      if (GveDuplicateWinDeleteCardCount != other.GveDuplicateWinDeleteCardCount) return false;
      if (GveDuplicateLoseDeleteCardCount != other.GveDuplicateLoseDeleteCardCount) return false;
      if (GveDuplicateOverCardCount != other.GveDuplicateOverCardCount) return false;
      if (GveDuplicateBossLossHpCount != other.GveDuplicateBossLossHpCount) return false;
      if (GveDuplicateRewardGold != other.GveDuplicateRewardGold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NameLimit != 0) hash ^= NameLimit.GetHashCode();
      if (DefaultDropGroup != 0) hash ^= DefaultDropGroup.GetHashCode();
      if (ChangeNameCost != 0) hash ^= ChangeNameCost.GetHashCode();
      if (PlayeEnergyRecoverTime != 0) hash ^= PlayeEnergyRecoverTime.GetHashCode();
      hash ^= fieldHeroNumLimits_.GetHashCode();
      if (FormationNameLimit != 0) hash ^= FormationNameLimit.GetHashCode();
      if (FormationCareerLimit != 0) hash ^= FormationCareerLimit.GetHashCode();
      hash ^= initialFormaitonHeros_.GetHashCode();
      if (FormationCount != 0) hash ^= FormationCount.GetHashCode();
      if (HeroNormalTalentCountLimit != false) hash ^= HeroNormalTalentCountLimit.GetHashCode();
      if (HeroHealthCorrectionBase != false) hash ^= HeroHealthCorrectionBase.GetHashCode();
      if (HeroHealthCorrectionCoe != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeroHealthCorrectionCoe);
      if (HeroAttackCorrectionBase != 0) hash ^= HeroAttackCorrectionBase.GetHashCode();
      if (HeroAttackCorrectionCoe != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeroAttackCorrectionCoe);
      if (HeroDodgeCorrectionBase != 0) hash ^= HeroDodgeCorrectionBase.GetHashCode();
      if (HeroDodgeCorrectionCoe != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeroDodgeCorrectionCoe);
      if (HeroCritCorrectionBase != 0) hash ^= HeroCritCorrectionBase.GetHashCode();
      if (HeroCritCorrectionCoe != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeroCritCorrectionCoe);
      if (HeroBlckCorrectionBase != 0) hash ^= HeroBlckCorrectionBase.GetHashCode();
      if (HeroBlckCorrectionCoe != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeroBlckCorrectionCoe);
      if (heroAttributeEvaluation_ != null) hash ^= HeroAttributeEvaluation.GetHashCode();
      hash ^= heroLevelLimits_.GetHashCode();
      if (HeroStarLimit != 0) hash ^= HeroStarLimit.GetHashCode();
      hash ^= heroStarUpNeedCards_.GetHashCode();
      hash ^= heroStarUpNeedGolds_.GetHashCode();
      hash ^= heroStarUpGainNormalTalents_.GetHashCode();
      hash ^= heroStarUpCancelGiveCards_.GetHashCode();
      if (HeroStarUpCancelGiveGold != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeroStarUpCancelGiveGold);
      hash ^= heroLearningNeedGolds_.GetHashCode();
      hash ^= heroClassNeedCards_.GetHashCode();
      if (HeroSkillTrainingGiveExpCoe != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(HeroSkillTrainingGiveExpCoe);
      if (NormalLotteryFreeTime != 0) hash ^= NormalLotteryFreeTime.GetHashCode();
      if (SpecialLotteryFreeTime != 0) hash ^= SpecialLotteryFreeTime.GetHashCode();
      if (LotteryTicketDiamondCost != 0) hash ^= LotteryTicketDiamondCost.GetHashCode();
      hash ^= guildIcons_.GetHashCode();
      if (GuildSeekHelpNum != 0) hash ^= GuildSeekHelpNum.GetHashCode();
      if (TavernTaskBrisk != 0) hash ^= TavernTaskBrisk.GetHashCode();
      if (GveMapBattleCount != 0) hash ^= GveMapBattleCount.GetHashCode();
      hash ^= gveDuplicateCardElementCounts_.GetHashCode();
      if (GveDuplicateHandCard != 0) hash ^= GveDuplicateHandCard.GetHashCode();
      if (GveDuplicateRoundTime != 0) hash ^= GveDuplicateRoundTime.GetHashCode();
      if (GveDuplicateWinDeleteCardCount != 0) hash ^= GveDuplicateWinDeleteCardCount.GetHashCode();
      if (GveDuplicateLoseDeleteCardCount != 0) hash ^= GveDuplicateLoseDeleteCardCount.GetHashCode();
      if (GveDuplicateOverCardCount != 0) hash ^= GveDuplicateOverCardCount.GetHashCode();
      if (GveDuplicateBossLossHpCount != 0) hash ^= GveDuplicateBossLossHpCount.GetHashCode();
      if (GveDuplicateRewardGold != 0) hash ^= GveDuplicateRewardGold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NameLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NameLimit);
      }
      if (DefaultDropGroup != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultDropGroup);
      }
      if (ChangeNameCost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChangeNameCost);
      }
      if (PlayeEnergyRecoverTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayeEnergyRecoverTime);
      }
      fieldHeroNumLimits_.WriteTo(output, _repeated_fieldHeroNumLimits_codec);
      if (FormationNameLimit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FormationNameLimit);
      }
      if (FormationCareerLimit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FormationCareerLimit);
      }
      initialFormaitonHeros_.WriteTo(output, _repeated_initialFormaitonHeros_codec);
      if (FormationCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FormationCount);
      }
      if (HeroNormalTalentCountLimit != false) {
        output.WriteRawTag(80);
        output.WriteBool(HeroNormalTalentCountLimit);
      }
      if (HeroHealthCorrectionBase != false) {
        output.WriteRawTag(88);
        output.WriteBool(HeroHealthCorrectionBase);
      }
      if (HeroHealthCorrectionCoe != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(HeroHealthCorrectionCoe);
      }
      if (HeroAttackCorrectionBase != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HeroAttackCorrectionBase);
      }
      if (HeroAttackCorrectionCoe != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(HeroAttackCorrectionCoe);
      }
      if (HeroDodgeCorrectionBase != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HeroDodgeCorrectionBase);
      }
      if (HeroDodgeCorrectionCoe != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(HeroDodgeCorrectionCoe);
      }
      if (HeroCritCorrectionBase != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(HeroCritCorrectionBase);
      }
      if (HeroCritCorrectionCoe != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(HeroCritCorrectionCoe);
      }
      if (HeroBlckCorrectionBase != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(HeroBlckCorrectionBase);
      }
      if (HeroBlckCorrectionCoe != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(HeroBlckCorrectionCoe);
      }
      if (heroAttributeEvaluation_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(HeroAttributeEvaluation);
      }
      heroLevelLimits_.WriteTo(output, _repeated_heroLevelLimits_codec);
      if (HeroStarLimit != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(HeroStarLimit);
      }
      heroStarUpNeedCards_.WriteTo(output, _repeated_heroStarUpNeedCards_codec);
      heroStarUpNeedGolds_.WriteTo(output, _repeated_heroStarUpNeedGolds_codec);
      heroStarUpGainNormalTalents_.WriteTo(output, _repeated_heroStarUpGainNormalTalents_codec);
      heroStarUpCancelGiveCards_.WriteTo(output, _repeated_heroStarUpCancelGiveCards_codec);
      if (HeroStarUpCancelGiveGold != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(HeroStarUpCancelGiveGold);
      }
      heroLearningNeedGolds_.WriteTo(output, _repeated_heroLearningNeedGolds_codec);
      heroClassNeedCards_.WriteTo(output, _repeated_heroClassNeedCards_codec);
      if (HeroSkillTrainingGiveExpCoe != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(HeroSkillTrainingGiveExpCoe);
      }
      if (NormalLotteryFreeTime != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(NormalLotteryFreeTime);
      }
      if (SpecialLotteryFreeTime != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(SpecialLotteryFreeTime);
      }
      if (LotteryTicketDiamondCost != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(LotteryTicketDiamondCost);
      }
      guildIcons_.WriteTo(output, _repeated_guildIcons_codec);
      if (GuildSeekHelpNum != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(GuildSeekHelpNum);
      }
      if (TavernTaskBrisk != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(TavernTaskBrisk);
      }
      if (GveMapBattleCount != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(GveMapBattleCount);
      }
      gveDuplicateCardElementCounts_.WriteTo(output, _repeated_gveDuplicateCardElementCounts_codec);
      if (GveDuplicateHandCard != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(GveDuplicateHandCard);
      }
      if (GveDuplicateRoundTime != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(GveDuplicateRoundTime);
      }
      if (GveDuplicateWinDeleteCardCount != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(GveDuplicateWinDeleteCardCount);
      }
      if (GveDuplicateLoseDeleteCardCount != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(GveDuplicateLoseDeleteCardCount);
      }
      if (GveDuplicateOverCardCount != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(GveDuplicateOverCardCount);
      }
      if (GveDuplicateBossLossHpCount != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(GveDuplicateBossLossHpCount);
      }
      if (GveDuplicateRewardGold != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(GveDuplicateRewardGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NameLimit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NameLimit);
      }
      if (DefaultDropGroup != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultDropGroup);
      }
      if (ChangeNameCost != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChangeNameCost);
      }
      if (PlayeEnergyRecoverTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlayeEnergyRecoverTime);
      }
      fieldHeroNumLimits_.WriteTo(ref output, _repeated_fieldHeroNumLimits_codec);
      if (FormationNameLimit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FormationNameLimit);
      }
      if (FormationCareerLimit != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FormationCareerLimit);
      }
      initialFormaitonHeros_.WriteTo(ref output, _repeated_initialFormaitonHeros_codec);
      if (FormationCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FormationCount);
      }
      if (HeroNormalTalentCountLimit != false) {
        output.WriteRawTag(80);
        output.WriteBool(HeroNormalTalentCountLimit);
      }
      if (HeroHealthCorrectionBase != false) {
        output.WriteRawTag(88);
        output.WriteBool(HeroHealthCorrectionBase);
      }
      if (HeroHealthCorrectionCoe != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(HeroHealthCorrectionCoe);
      }
      if (HeroAttackCorrectionBase != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(HeroAttackCorrectionBase);
      }
      if (HeroAttackCorrectionCoe != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(HeroAttackCorrectionCoe);
      }
      if (HeroDodgeCorrectionBase != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HeroDodgeCorrectionBase);
      }
      if (HeroDodgeCorrectionCoe != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(HeroDodgeCorrectionCoe);
      }
      if (HeroCritCorrectionBase != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(HeroCritCorrectionBase);
      }
      if (HeroCritCorrectionCoe != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(HeroCritCorrectionCoe);
      }
      if (HeroBlckCorrectionBase != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(HeroBlckCorrectionBase);
      }
      if (HeroBlckCorrectionCoe != 0D) {
        output.WriteRawTag(161, 1);
        output.WriteDouble(HeroBlckCorrectionCoe);
      }
      if (heroAttributeEvaluation_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(HeroAttributeEvaluation);
      }
      heroLevelLimits_.WriteTo(ref output, _repeated_heroLevelLimits_codec);
      if (HeroStarLimit != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(HeroStarLimit);
      }
      heroStarUpNeedCards_.WriteTo(ref output, _repeated_heroStarUpNeedCards_codec);
      heroStarUpNeedGolds_.WriteTo(ref output, _repeated_heroStarUpNeedGolds_codec);
      heroStarUpGainNormalTalents_.WriteTo(ref output, _repeated_heroStarUpGainNormalTalents_codec);
      heroStarUpCancelGiveCards_.WriteTo(ref output, _repeated_heroStarUpCancelGiveCards_codec);
      if (HeroStarUpCancelGiveGold != 0D) {
        output.WriteRawTag(225, 1);
        output.WriteDouble(HeroStarUpCancelGiveGold);
      }
      heroLearningNeedGolds_.WriteTo(ref output, _repeated_heroLearningNeedGolds_codec);
      heroClassNeedCards_.WriteTo(ref output, _repeated_heroClassNeedCards_codec);
      if (HeroSkillTrainingGiveExpCoe != 0D) {
        output.WriteRawTag(249, 1);
        output.WriteDouble(HeroSkillTrainingGiveExpCoe);
      }
      if (NormalLotteryFreeTime != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(NormalLotteryFreeTime);
      }
      if (SpecialLotteryFreeTime != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(SpecialLotteryFreeTime);
      }
      if (LotteryTicketDiamondCost != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(LotteryTicketDiamondCost);
      }
      guildIcons_.WriteTo(ref output, _repeated_guildIcons_codec);
      if (GuildSeekHelpNum != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(GuildSeekHelpNum);
      }
      if (TavernTaskBrisk != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(TavernTaskBrisk);
      }
      if (GveMapBattleCount != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(GveMapBattleCount);
      }
      gveDuplicateCardElementCounts_.WriteTo(ref output, _repeated_gveDuplicateCardElementCounts_codec);
      if (GveDuplicateHandCard != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(GveDuplicateHandCard);
      }
      if (GveDuplicateRoundTime != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(GveDuplicateRoundTime);
      }
      if (GveDuplicateWinDeleteCardCount != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(GveDuplicateWinDeleteCardCount);
      }
      if (GveDuplicateLoseDeleteCardCount != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(GveDuplicateLoseDeleteCardCount);
      }
      if (GveDuplicateOverCardCount != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(GveDuplicateOverCardCount);
      }
      if (GveDuplicateBossLossHpCount != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(GveDuplicateBossLossHpCount);
      }
      if (GveDuplicateRewardGold != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(GveDuplicateRewardGold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NameLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NameLimit);
      }
      if (DefaultDropGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultDropGroup);
      }
      if (ChangeNameCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeNameCost);
      }
      if (PlayeEnergyRecoverTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayeEnergyRecoverTime);
      }
      size += fieldHeroNumLimits_.CalculateSize(_repeated_fieldHeroNumLimits_codec);
      if (FormationNameLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FormationNameLimit);
      }
      if (FormationCareerLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FormationCareerLimit);
      }
      size += initialFormaitonHeros_.CalculateSize(_repeated_initialFormaitonHeros_codec);
      if (FormationCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FormationCount);
      }
      if (HeroNormalTalentCountLimit != false) {
        size += 1 + 1;
      }
      if (HeroHealthCorrectionBase != false) {
        size += 1 + 1;
      }
      if (HeroHealthCorrectionCoe != 0D) {
        size += 1 + 8;
      }
      if (HeroAttackCorrectionBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroAttackCorrectionBase);
      }
      if (HeroAttackCorrectionCoe != 0D) {
        size += 1 + 8;
      }
      if (HeroDodgeCorrectionBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroDodgeCorrectionBase);
      }
      if (HeroDodgeCorrectionCoe != 0D) {
        size += 2 + 8;
      }
      if (HeroCritCorrectionBase != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeroCritCorrectionBase);
      }
      if (HeroCritCorrectionCoe != 0D) {
        size += 2 + 8;
      }
      if (HeroBlckCorrectionBase != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeroBlckCorrectionBase);
      }
      if (HeroBlckCorrectionCoe != 0D) {
        size += 2 + 8;
      }
      if (heroAttributeEvaluation_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HeroAttributeEvaluation);
      }
      size += heroLevelLimits_.CalculateSize(_repeated_heroLevelLimits_codec);
      if (HeroStarLimit != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HeroStarLimit);
      }
      size += heroStarUpNeedCards_.CalculateSize(_repeated_heroStarUpNeedCards_codec);
      size += heroStarUpNeedGolds_.CalculateSize(_repeated_heroStarUpNeedGolds_codec);
      size += heroStarUpGainNormalTalents_.CalculateSize(_repeated_heroStarUpGainNormalTalents_codec);
      size += heroStarUpCancelGiveCards_.CalculateSize(_repeated_heroStarUpCancelGiveCards_codec);
      if (HeroStarUpCancelGiveGold != 0D) {
        size += 2 + 8;
      }
      size += heroLearningNeedGolds_.CalculateSize(_repeated_heroLearningNeedGolds_codec);
      size += heroClassNeedCards_.CalculateSize(_repeated_heroClassNeedCards_codec);
      if (HeroSkillTrainingGiveExpCoe != 0D) {
        size += 2 + 8;
      }
      if (NormalLotteryFreeTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NormalLotteryFreeTime);
      }
      if (SpecialLotteryFreeTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpecialLotteryFreeTime);
      }
      if (LotteryTicketDiamondCost != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LotteryTicketDiamondCost);
      }
      size += guildIcons_.CalculateSize(_repeated_guildIcons_codec);
      if (GuildSeekHelpNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GuildSeekHelpNum);
      }
      if (TavernTaskBrisk != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TavernTaskBrisk);
      }
      if (GveMapBattleCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GveMapBattleCount);
      }
      size += gveDuplicateCardElementCounts_.CalculateSize(_repeated_gveDuplicateCardElementCounts_codec);
      if (GveDuplicateHandCard != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GveDuplicateHandCard);
      }
      if (GveDuplicateRoundTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GveDuplicateRoundTime);
      }
      if (GveDuplicateWinDeleteCardCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GveDuplicateWinDeleteCardCount);
      }
      if (GveDuplicateLoseDeleteCardCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GveDuplicateLoseDeleteCardCount);
      }
      if (GveDuplicateOverCardCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GveDuplicateOverCardCount);
      }
      if (GveDuplicateBossLossHpCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GveDuplicateBossLossHpCount);
      }
      if (GveDuplicateRewardGold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GveDuplicateRewardGold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalTemplate other) {
      if (other == null) {
        return;
      }
      if (other.NameLimit != 0) {
        NameLimit = other.NameLimit;
      }
      if (other.DefaultDropGroup != 0) {
        DefaultDropGroup = other.DefaultDropGroup;
      }
      if (other.ChangeNameCost != 0) {
        ChangeNameCost = other.ChangeNameCost;
      }
      if (other.PlayeEnergyRecoverTime != 0) {
        PlayeEnergyRecoverTime = other.PlayeEnergyRecoverTime;
      }
      fieldHeroNumLimits_.Add(other.fieldHeroNumLimits_);
      if (other.FormationNameLimit != 0) {
        FormationNameLimit = other.FormationNameLimit;
      }
      if (other.FormationCareerLimit != 0) {
        FormationCareerLimit = other.FormationCareerLimit;
      }
      initialFormaitonHeros_.Add(other.initialFormaitonHeros_);
      if (other.FormationCount != 0) {
        FormationCount = other.FormationCount;
      }
      if (other.HeroNormalTalentCountLimit != false) {
        HeroNormalTalentCountLimit = other.HeroNormalTalentCountLimit;
      }
      if (other.HeroHealthCorrectionBase != false) {
        HeroHealthCorrectionBase = other.HeroHealthCorrectionBase;
      }
      if (other.HeroHealthCorrectionCoe != 0D) {
        HeroHealthCorrectionCoe = other.HeroHealthCorrectionCoe;
      }
      if (other.HeroAttackCorrectionBase != 0) {
        HeroAttackCorrectionBase = other.HeroAttackCorrectionBase;
      }
      if (other.HeroAttackCorrectionCoe != 0D) {
        HeroAttackCorrectionCoe = other.HeroAttackCorrectionCoe;
      }
      if (other.HeroDodgeCorrectionBase != 0) {
        HeroDodgeCorrectionBase = other.HeroDodgeCorrectionBase;
      }
      if (other.HeroDodgeCorrectionCoe != 0D) {
        HeroDodgeCorrectionCoe = other.HeroDodgeCorrectionCoe;
      }
      if (other.HeroCritCorrectionBase != 0) {
        HeroCritCorrectionBase = other.HeroCritCorrectionBase;
      }
      if (other.HeroCritCorrectionCoe != 0D) {
        HeroCritCorrectionCoe = other.HeroCritCorrectionCoe;
      }
      if (other.HeroBlckCorrectionBase != 0) {
        HeroBlckCorrectionBase = other.HeroBlckCorrectionBase;
      }
      if (other.HeroBlckCorrectionCoe != 0D) {
        HeroBlckCorrectionCoe = other.HeroBlckCorrectionCoe;
      }
      if (other.heroAttributeEvaluation_ != null) {
        if (heroAttributeEvaluation_ == null) {
          HeroAttributeEvaluation = new global::Config.GlobalTemplate.Types.Heroattributeevaluation_();
        }
        HeroAttributeEvaluation.MergeFrom(other.HeroAttributeEvaluation);
      }
      heroLevelLimits_.Add(other.heroLevelLimits_);
      if (other.HeroStarLimit != 0) {
        HeroStarLimit = other.HeroStarLimit;
      }
      heroStarUpNeedCards_.Add(other.heroStarUpNeedCards_);
      heroStarUpNeedGolds_.Add(other.heroStarUpNeedGolds_);
      heroStarUpGainNormalTalents_.Add(other.heroStarUpGainNormalTalents_);
      heroStarUpCancelGiveCards_.Add(other.heroStarUpCancelGiveCards_);
      if (other.HeroStarUpCancelGiveGold != 0D) {
        HeroStarUpCancelGiveGold = other.HeroStarUpCancelGiveGold;
      }
      heroLearningNeedGolds_.Add(other.heroLearningNeedGolds_);
      heroClassNeedCards_.Add(other.heroClassNeedCards_);
      if (other.HeroSkillTrainingGiveExpCoe != 0D) {
        HeroSkillTrainingGiveExpCoe = other.HeroSkillTrainingGiveExpCoe;
      }
      if (other.NormalLotteryFreeTime != 0) {
        NormalLotteryFreeTime = other.NormalLotteryFreeTime;
      }
      if (other.SpecialLotteryFreeTime != 0) {
        SpecialLotteryFreeTime = other.SpecialLotteryFreeTime;
      }
      if (other.LotteryTicketDiamondCost != 0) {
        LotteryTicketDiamondCost = other.LotteryTicketDiamondCost;
      }
      guildIcons_.Add(other.guildIcons_);
      if (other.GuildSeekHelpNum != 0) {
        GuildSeekHelpNum = other.GuildSeekHelpNum;
      }
      if (other.TavernTaskBrisk != 0) {
        TavernTaskBrisk = other.TavernTaskBrisk;
      }
      if (other.GveMapBattleCount != 0) {
        GveMapBattleCount = other.GveMapBattleCount;
      }
      gveDuplicateCardElementCounts_.Add(other.gveDuplicateCardElementCounts_);
      if (other.GveDuplicateHandCard != 0) {
        GveDuplicateHandCard = other.GveDuplicateHandCard;
      }
      if (other.GveDuplicateRoundTime != 0) {
        GveDuplicateRoundTime = other.GveDuplicateRoundTime;
      }
      if (other.GveDuplicateWinDeleteCardCount != 0) {
        GveDuplicateWinDeleteCardCount = other.GveDuplicateWinDeleteCardCount;
      }
      if (other.GveDuplicateLoseDeleteCardCount != 0) {
        GveDuplicateLoseDeleteCardCount = other.GveDuplicateLoseDeleteCardCount;
      }
      if (other.GveDuplicateOverCardCount != 0) {
        GveDuplicateOverCardCount = other.GveDuplicateOverCardCount;
      }
      if (other.GveDuplicateBossLossHpCount != 0) {
        GveDuplicateBossLossHpCount = other.GveDuplicateBossLossHpCount;
      }
      if (other.GveDuplicateRewardGold != 0) {
        GveDuplicateRewardGold = other.GveDuplicateRewardGold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NameLimit = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultDropGroup = input.ReadInt32();
            break;
          }
          case 24: {
            ChangeNameCost = input.ReadInt32();
            break;
          }
          case 32: {
            PlayeEnergyRecoverTime = input.ReadInt32();
            break;
          }
          case 42: {
            fieldHeroNumLimits_.AddEntriesFrom(input, _repeated_fieldHeroNumLimits_codec);
            break;
          }
          case 48: {
            FormationNameLimit = input.ReadInt32();
            break;
          }
          case 56: {
            FormationCareerLimit = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            initialFormaitonHeros_.AddEntriesFrom(input, _repeated_initialFormaitonHeros_codec);
            break;
          }
          case 72: {
            FormationCount = input.ReadInt32();
            break;
          }
          case 80: {
            HeroNormalTalentCountLimit = input.ReadBool();
            break;
          }
          case 88: {
            HeroHealthCorrectionBase = input.ReadBool();
            break;
          }
          case 97: {
            HeroHealthCorrectionCoe = input.ReadDouble();
            break;
          }
          case 104: {
            HeroAttackCorrectionBase = input.ReadInt32();
            break;
          }
          case 113: {
            HeroAttackCorrectionCoe = input.ReadDouble();
            break;
          }
          case 120: {
            HeroDodgeCorrectionBase = input.ReadInt32();
            break;
          }
          case 129: {
            HeroDodgeCorrectionCoe = input.ReadDouble();
            break;
          }
          case 136: {
            HeroCritCorrectionBase = input.ReadInt32();
            break;
          }
          case 145: {
            HeroCritCorrectionCoe = input.ReadDouble();
            break;
          }
          case 152: {
            HeroBlckCorrectionBase = input.ReadInt32();
            break;
          }
          case 161: {
            HeroBlckCorrectionCoe = input.ReadDouble();
            break;
          }
          case 170: {
            if (heroAttributeEvaluation_ == null) {
              HeroAttributeEvaluation = new global::Config.GlobalTemplate.Types.Heroattributeevaluation_();
            }
            input.ReadMessage(HeroAttributeEvaluation);
            break;
          }
          case 178:
          case 176: {
            heroLevelLimits_.AddEntriesFrom(input, _repeated_heroLevelLimits_codec);
            break;
          }
          case 184: {
            HeroStarLimit = input.ReadInt32();
            break;
          }
          case 194:
          case 192: {
            heroStarUpNeedCards_.AddEntriesFrom(input, _repeated_heroStarUpNeedCards_codec);
            break;
          }
          case 202:
          case 200: {
            heroStarUpNeedGolds_.AddEntriesFrom(input, _repeated_heroStarUpNeedGolds_codec);
            break;
          }
          case 210:
          case 208: {
            heroStarUpGainNormalTalents_.AddEntriesFrom(input, _repeated_heroStarUpGainNormalTalents_codec);
            break;
          }
          case 218:
          case 216: {
            heroStarUpCancelGiveCards_.AddEntriesFrom(input, _repeated_heroStarUpCancelGiveCards_codec);
            break;
          }
          case 225: {
            HeroStarUpCancelGiveGold = input.ReadDouble();
            break;
          }
          case 234:
          case 232: {
            heroLearningNeedGolds_.AddEntriesFrom(input, _repeated_heroLearningNeedGolds_codec);
            break;
          }
          case 242: {
            heroClassNeedCards_.AddEntriesFrom(input, _repeated_heroClassNeedCards_codec);
            break;
          }
          case 249: {
            HeroSkillTrainingGiveExpCoe = input.ReadDouble();
            break;
          }
          case 256: {
            NormalLotteryFreeTime = input.ReadInt32();
            break;
          }
          case 264: {
            SpecialLotteryFreeTime = input.ReadInt32();
            break;
          }
          case 272: {
            LotteryTicketDiamondCost = input.ReadInt32();
            break;
          }
          case 282: {
            guildIcons_.AddEntriesFrom(input, _repeated_guildIcons_codec);
            break;
          }
          case 288: {
            GuildSeekHelpNum = input.ReadInt32();
            break;
          }
          case 296: {
            TavernTaskBrisk = input.ReadInt32();
            break;
          }
          case 304: {
            GveMapBattleCount = input.ReadInt32();
            break;
          }
          case 314:
          case 312: {
            gveDuplicateCardElementCounts_.AddEntriesFrom(input, _repeated_gveDuplicateCardElementCounts_codec);
            break;
          }
          case 320: {
            GveDuplicateHandCard = input.ReadInt32();
            break;
          }
          case 328: {
            GveDuplicateRoundTime = input.ReadInt32();
            break;
          }
          case 336: {
            GveDuplicateWinDeleteCardCount = input.ReadInt32();
            break;
          }
          case 344: {
            GveDuplicateLoseDeleteCardCount = input.ReadInt32();
            break;
          }
          case 352: {
            GveDuplicateOverCardCount = input.ReadInt32();
            break;
          }
          case 360: {
            GveDuplicateBossLossHpCount = input.ReadInt32();
            break;
          }
          case 368: {
            GveDuplicateRewardGold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NameLimit = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultDropGroup = input.ReadInt32();
            break;
          }
          case 24: {
            ChangeNameCost = input.ReadInt32();
            break;
          }
          case 32: {
            PlayeEnergyRecoverTime = input.ReadInt32();
            break;
          }
          case 42: {
            fieldHeroNumLimits_.AddEntriesFrom(ref input, _repeated_fieldHeroNumLimits_codec);
            break;
          }
          case 48: {
            FormationNameLimit = input.ReadInt32();
            break;
          }
          case 56: {
            FormationCareerLimit = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            initialFormaitonHeros_.AddEntriesFrom(ref input, _repeated_initialFormaitonHeros_codec);
            break;
          }
          case 72: {
            FormationCount = input.ReadInt32();
            break;
          }
          case 80: {
            HeroNormalTalentCountLimit = input.ReadBool();
            break;
          }
          case 88: {
            HeroHealthCorrectionBase = input.ReadBool();
            break;
          }
          case 97: {
            HeroHealthCorrectionCoe = input.ReadDouble();
            break;
          }
          case 104: {
            HeroAttackCorrectionBase = input.ReadInt32();
            break;
          }
          case 113: {
            HeroAttackCorrectionCoe = input.ReadDouble();
            break;
          }
          case 120: {
            HeroDodgeCorrectionBase = input.ReadInt32();
            break;
          }
          case 129: {
            HeroDodgeCorrectionCoe = input.ReadDouble();
            break;
          }
          case 136: {
            HeroCritCorrectionBase = input.ReadInt32();
            break;
          }
          case 145: {
            HeroCritCorrectionCoe = input.ReadDouble();
            break;
          }
          case 152: {
            HeroBlckCorrectionBase = input.ReadInt32();
            break;
          }
          case 161: {
            HeroBlckCorrectionCoe = input.ReadDouble();
            break;
          }
          case 170: {
            if (heroAttributeEvaluation_ == null) {
              HeroAttributeEvaluation = new global::Config.GlobalTemplate.Types.Heroattributeevaluation_();
            }
            input.ReadMessage(HeroAttributeEvaluation);
            break;
          }
          case 178:
          case 176: {
            heroLevelLimits_.AddEntriesFrom(ref input, _repeated_heroLevelLimits_codec);
            break;
          }
          case 184: {
            HeroStarLimit = input.ReadInt32();
            break;
          }
          case 194:
          case 192: {
            heroStarUpNeedCards_.AddEntriesFrom(ref input, _repeated_heroStarUpNeedCards_codec);
            break;
          }
          case 202:
          case 200: {
            heroStarUpNeedGolds_.AddEntriesFrom(ref input, _repeated_heroStarUpNeedGolds_codec);
            break;
          }
          case 210:
          case 208: {
            heroStarUpGainNormalTalents_.AddEntriesFrom(ref input, _repeated_heroStarUpGainNormalTalents_codec);
            break;
          }
          case 218:
          case 216: {
            heroStarUpCancelGiveCards_.AddEntriesFrom(ref input, _repeated_heroStarUpCancelGiveCards_codec);
            break;
          }
          case 225: {
            HeroStarUpCancelGiveGold = input.ReadDouble();
            break;
          }
          case 234:
          case 232: {
            heroLearningNeedGolds_.AddEntriesFrom(ref input, _repeated_heroLearningNeedGolds_codec);
            break;
          }
          case 242: {
            heroClassNeedCards_.AddEntriesFrom(ref input, _repeated_heroClassNeedCards_codec);
            break;
          }
          case 249: {
            HeroSkillTrainingGiveExpCoe = input.ReadDouble();
            break;
          }
          case 256: {
            NormalLotteryFreeTime = input.ReadInt32();
            break;
          }
          case 264: {
            SpecialLotteryFreeTime = input.ReadInt32();
            break;
          }
          case 272: {
            LotteryTicketDiamondCost = input.ReadInt32();
            break;
          }
          case 282: {
            guildIcons_.AddEntriesFrom(ref input, _repeated_guildIcons_codec);
            break;
          }
          case 288: {
            GuildSeekHelpNum = input.ReadInt32();
            break;
          }
          case 296: {
            TavernTaskBrisk = input.ReadInt32();
            break;
          }
          case 304: {
            GveMapBattleCount = input.ReadInt32();
            break;
          }
          case 314:
          case 312: {
            gveDuplicateCardElementCounts_.AddEntriesFrom(ref input, _repeated_gveDuplicateCardElementCounts_codec);
            break;
          }
          case 320: {
            GveDuplicateHandCard = input.ReadInt32();
            break;
          }
          case 328: {
            GveDuplicateRoundTime = input.ReadInt32();
            break;
          }
          case 336: {
            GveDuplicateWinDeleteCardCount = input.ReadInt32();
            break;
          }
          case 344: {
            GveDuplicateLoseDeleteCardCount = input.ReadInt32();
            break;
          }
          case 352: {
            GveDuplicateOverCardCount = input.ReadInt32();
            break;
          }
          case 360: {
            GveDuplicateBossLossHpCount = input.ReadInt32();
            break;
          }
          case 368: {
            GveDuplicateRewardGold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GlobalTemplate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Fieldheronumlimit_ : pb::IMessage<Fieldheronumlimit_>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Fieldheronumlimit_> _parser = new pb::MessageParser<Fieldheronumlimit_>(() => new Fieldheronumlimit_());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Fieldheronumlimit_> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Config.GlobalTemplate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fieldheronumlimit_() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fieldheronumlimit_(Fieldheronumlimit_ other) : this() {
          level_ = other.level_;
          num_ = other.num_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Fieldheronumlimit_ Clone() {
          return new Fieldheronumlimit_(this);
        }

        /// <summary>Field number for the "Level" field.</summary>
        public const int LevelFieldNumber = 1;
        private int level_;
        /// <summary>
        /// Level
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "Num" field.</summary>
        public const int NumFieldNumber = 2;
        private int num_;
        /// <summary>
        /// Num
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num {
          get { return num_; }
          set {
            num_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Fieldheronumlimit_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Fieldheronumlimit_ other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Level != other.Level) return false;
          if (Num != other.Num) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Level != 0) hash ^= Level.GetHashCode();
          if (Num != 0) hash ^= Num.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Level);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Num);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Level != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Level);
          }
          if (Num != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Num);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
          }
          if (Num != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Fieldheronumlimit_ other) {
          if (other == null) {
            return;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          if (other.Num != 0) {
            Num = other.Num;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Level = input.ReadInt32();
                break;
              }
              case 16: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Level = input.ReadInt32();
                break;
              }
              case 16: {
                Num = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Heroattributeevaluation_ : pb::IMessage<Heroattributeevaluation_>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Heroattributeevaluation_> _parser = new pb::MessageParser<Heroattributeevaluation_>(() => new Heroattributeevaluation_());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Heroattributeevaluation_> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Config.GlobalTemplate.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Heroattributeevaluation_() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Heroattributeevaluation_(Heroattributeevaluation_ other) : this() {
          num1_ = other.num1_;
          num2_ = other.num2_;
          num3_ = other.num3_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Heroattributeevaluation_ Clone() {
          return new Heroattributeevaluation_(this);
        }

        /// <summary>Field number for the "Num1" field.</summary>
        public const int Num1FieldNumber = 1;
        private int num1_;
        /// <summary>
        /// Num1
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num1 {
          get { return num1_; }
          set {
            num1_ = value;
          }
        }

        /// <summary>Field number for the "Num2" field.</summary>
        public const int Num2FieldNumber = 2;
        private int num2_;
        /// <summary>
        /// Num2
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num2 {
          get { return num2_; }
          set {
            num2_ = value;
          }
        }

        /// <summary>Field number for the "Num3" field.</summary>
        public const int Num3FieldNumber = 3;
        private int num3_;
        /// <summary>
        /// Num3
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Num3 {
          get { return num3_; }
          set {
            num3_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Heroattributeevaluation_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Heroattributeevaluation_ other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Num1 != other.Num1) return false;
          if (Num2 != other.Num2) return false;
          if (Num3 != other.Num3) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Num1 != 0) hash ^= Num1.GetHashCode();
          if (Num2 != 0) hash ^= Num2.GetHashCode();
          if (Num3 != 0) hash ^= Num3.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Num1 != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Num1);
          }
          if (Num2 != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Num2);
          }
          if (Num3 != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Num3);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Num1 != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Num1);
          }
          if (Num2 != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Num2);
          }
          if (Num3 != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Num3);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Num1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num1);
          }
          if (Num2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num2);
          }
          if (Num3 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num3);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Heroattributeevaluation_ other) {
          if (other == null) {
            return;
          }
          if (other.Num1 != 0) {
            Num1 = other.Num1;
          }
          if (other.Num2 != 0) {
            Num2 = other.Num2;
          }
          if (other.Num3 != 0) {
            Num3 = other.Num3;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Num1 = input.ReadInt32();
                break;
              }
              case 16: {
                Num2 = input.ReadInt32();
                break;
              }
              case 24: {
                Num3 = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Num1 = input.ReadInt32();
                break;
              }
              case 16: {
                Num2 = input.ReadInt32();
                break;
              }
              case 24: {
                Num3 = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Heroclassneedcard_ : pb::IMessage<Heroclassneedcard_>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Heroclassneedcard_> _parser = new pb::MessageParser<Heroclassneedcard_>(() => new Heroclassneedcard_());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Heroclassneedcard_> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Config.GlobalTemplate.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Heroclassneedcard_() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Heroclassneedcard_(Heroclassneedcard_ other) : this() {
          class1_ = other.class1_;
          class2_ = other.class2_;
          class3_ = other.class3_;
          class4_ = other.class4_;
          class5_ = other.class5_;
          class6_ = other.class6_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Heroclassneedcard_ Clone() {
          return new Heroclassneedcard_(this);
        }

        /// <summary>Field number for the "Class1" field.</summary>
        public const int Class1FieldNumber = 1;
        private int class1_;
        /// <summary>
        /// Class1
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Class1 {
          get { return class1_; }
          set {
            class1_ = value;
          }
        }

        /// <summary>Field number for the "Class2" field.</summary>
        public const int Class2FieldNumber = 2;
        private int class2_;
        /// <summary>
        /// Class2
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Class2 {
          get { return class2_; }
          set {
            class2_ = value;
          }
        }

        /// <summary>Field number for the "Class3" field.</summary>
        public const int Class3FieldNumber = 3;
        private int class3_;
        /// <summary>
        /// Class3
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Class3 {
          get { return class3_; }
          set {
            class3_ = value;
          }
        }

        /// <summary>Field number for the "Class4" field.</summary>
        public const int Class4FieldNumber = 4;
        private int class4_;
        /// <summary>
        /// Class4
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Class4 {
          get { return class4_; }
          set {
            class4_ = value;
          }
        }

        /// <summary>Field number for the "Class5" field.</summary>
        public const int Class5FieldNumber = 5;
        private int class5_;
        /// <summary>
        /// Class5
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Class5 {
          get { return class5_; }
          set {
            class5_ = value;
          }
        }

        /// <summary>Field number for the "Class6" field.</summary>
        public const int Class6FieldNumber = 6;
        private int class6_;
        /// <summary>
        /// Class6
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Class6 {
          get { return class6_; }
          set {
            class6_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Heroclassneedcard_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Heroclassneedcard_ other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Class1 != other.Class1) return false;
          if (Class2 != other.Class2) return false;
          if (Class3 != other.Class3) return false;
          if (Class4 != other.Class4) return false;
          if (Class5 != other.Class5) return false;
          if (Class6 != other.Class6) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Class1 != 0) hash ^= Class1.GetHashCode();
          if (Class2 != 0) hash ^= Class2.GetHashCode();
          if (Class3 != 0) hash ^= Class3.GetHashCode();
          if (Class4 != 0) hash ^= Class4.GetHashCode();
          if (Class5 != 0) hash ^= Class5.GetHashCode();
          if (Class6 != 0) hash ^= Class6.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Class1 != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Class1);
          }
          if (Class2 != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Class2);
          }
          if (Class3 != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Class3);
          }
          if (Class4 != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Class4);
          }
          if (Class5 != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Class5);
          }
          if (Class6 != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Class6);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Class1 != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Class1);
          }
          if (Class2 != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Class2);
          }
          if (Class3 != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Class3);
          }
          if (Class4 != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Class4);
          }
          if (Class5 != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Class5);
          }
          if (Class6 != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Class6);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Class1 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Class1);
          }
          if (Class2 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Class2);
          }
          if (Class3 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Class3);
          }
          if (Class4 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Class4);
          }
          if (Class5 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Class5);
          }
          if (Class6 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Class6);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Heroclassneedcard_ other) {
          if (other == null) {
            return;
          }
          if (other.Class1 != 0) {
            Class1 = other.Class1;
          }
          if (other.Class2 != 0) {
            Class2 = other.Class2;
          }
          if (other.Class3 != 0) {
            Class3 = other.Class3;
          }
          if (other.Class4 != 0) {
            Class4 = other.Class4;
          }
          if (other.Class5 != 0) {
            Class5 = other.Class5;
          }
          if (other.Class6 != 0) {
            Class6 = other.Class6;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Class1 = input.ReadInt32();
                break;
              }
              case 16: {
                Class2 = input.ReadInt32();
                break;
              }
              case 24: {
                Class3 = input.ReadInt32();
                break;
              }
              case 32: {
                Class4 = input.ReadInt32();
                break;
              }
              case 40: {
                Class5 = input.ReadInt32();
                break;
              }
              case 48: {
                Class6 = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Class1 = input.ReadInt32();
                break;
              }
              case 16: {
                Class2 = input.ReadInt32();
                break;
              }
              case 24: {
                Class3 = input.ReadInt32();
                break;
              }
              case 32: {
                Class4 = input.ReadInt32();
                break;
              }
              case 40: {
                Class5 = input.ReadInt32();
                break;
              }
              case 48: {
                Class6 = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
