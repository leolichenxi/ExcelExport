// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CommonType : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static CommonType GetRootAsCommonType(ByteBuffer _bb) { return GetRootAsCommonType(_bb, new CommonType()); }
  public static CommonType GetRootAsCommonType(ByteBuffer _bb, CommonType obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyCommonType(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, CommonTypeVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CommonType __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Type { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<CommonType> CreateCommonType(FlatBufferBuilder builder,
      int type = 0,
      int id = 0) {
    builder.StartTable(2);
    CommonType.AddId(builder, id);
    CommonType.AddType(builder, type);
    return CommonType.EndCommonType(builder);
  }

  public static void StartCommonType(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(0, type, 0); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(1, id, 0); }
  public static Offset<CommonType> EndCommonType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<CommonType>(o);
  }
  public static void FinishCommonTypeBuffer(FlatBufferBuilder builder, Offset<CommonType> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCommonTypeBuffer(FlatBufferBuilder builder, Offset<CommonType> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class CommonTypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Type*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
