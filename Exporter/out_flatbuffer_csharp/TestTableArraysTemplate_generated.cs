// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Logic.Config
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestTableArraysTemplate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static TestTableArraysTemplate GetRootAsTestTableArraysTemplate(ByteBuffer _bb) { return GetRootAsTestTableArraysTemplate(_bb, new TestTableArraysTemplate()); }
  public static TestTableArraysTemplate GetRootAsTestTableArraysTemplate(ByteBuffer _bb, TestTableArraysTemplate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTableArraysTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Weapons(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int WeaponsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetWeaponsBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetWeaponsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetWeaponsArray() { return __p.__vector_as_array<int>(6); }
  public Position3d? BornPosition { get { int o = __p.__offset(8); return o != 0 ? (Position3d?)(new Position3d()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Logic.Config.TestType_? TestTypes(int j) { int o = __p.__offset(10); return o != 0 ? (Logic.Config.TestType_?)(new Logic.Config.TestType_()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TestTypesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int LinkId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ModeL { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModeLBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetModeLBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetModeLArray() { return __p.__vector_as_array<byte>(14); }
  public string Icon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(16); }
  public string MachineTypes(int j) { int o = __p.__offset(18); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int MachineTypesLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string MapType { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapTypeBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMapTypeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMapTypeArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<Logic.Config.TestTableArraysTemplate> CreateTestTableArraysTemplate(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset weaponsOffset = default(VectorOffset),
      Offset<Position3d> born_positionOffset = default(Offset<Position3d>),
      VectorOffset test_typesOffset = default(VectorOffset),
      int link_id = 0,
      StringOffset mode_lOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      VectorOffset machine_typesOffset = default(VectorOffset),
      StringOffset map_typeOffset = default(StringOffset)) {
    builder.StartTable(9);
    TestTableArraysTemplate.AddMapType(builder, map_typeOffset);
    TestTableArraysTemplate.AddMachineTypes(builder, machine_typesOffset);
    TestTableArraysTemplate.AddIcon(builder, iconOffset);
    TestTableArraysTemplate.AddModeL(builder, mode_lOffset);
    TestTableArraysTemplate.AddLinkId(builder, link_id);
    TestTableArraysTemplate.AddTestTypes(builder, test_typesOffset);
    TestTableArraysTemplate.AddBornPosition(builder, born_positionOffset);
    TestTableArraysTemplate.AddWeapons(builder, weaponsOffset);
    TestTableArraysTemplate.AddId(builder, id);
    return TestTableArraysTemplate.EndTestTableArraysTemplate(builder);
  }

  public static void StartTestTableArraysTemplate(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddWeapons(FlatBufferBuilder builder, VectorOffset weaponsOffset) { builder.AddOffset(1, weaponsOffset.Value, 0); }
  public static VectorOffset CreateWeaponsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateWeaponsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponsVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateWeaponsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartWeaponsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBornPosition(FlatBufferBuilder builder, Offset<Position3d> bornPositionOffset) { builder.AddOffset(2, bornPositionOffset.Value, 0); }
  public static void AddTestTypes(FlatBufferBuilder builder, VectorOffset testTypesOffset) { builder.AddOffset(3, testTypesOffset.Value, 0); }
  public static VectorOffset CreateTestTypesVector(FlatBufferBuilder builder, Offset<Logic.Config.TestType_>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTestTypesVectorBlock(FlatBufferBuilder builder, Offset<Logic.Config.TestType_>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTestTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Logic.Config.TestType_>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTestTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Logic.Config.TestType_>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTestTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLinkId(FlatBufferBuilder builder, int linkId) { builder.AddInt(4, linkId, 0); }
  public static void AddModeL(FlatBufferBuilder builder, StringOffset modeLOffset) { builder.AddOffset(5, modeLOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(6, iconOffset.Value, 0); }
  public static void AddMachineTypes(FlatBufferBuilder builder, VectorOffset machineTypesOffset) { builder.AddOffset(7, machineTypesOffset.Value, 0); }
  public static VectorOffset CreateMachineTypesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMachineTypesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMachineTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMachineTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMachineTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMapType(FlatBufferBuilder builder, StringOffset mapTypeOffset) { builder.AddOffset(8, mapTypeOffset.Value, 0); }
  public static Offset<Logic.Config.TestTableArraysTemplate> EndTestTableArraysTemplate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Logic.Config.TestTableArraysTemplate>(o);
  }
}


static public class TestTableArraysTemplateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Weapons*/, 4 /*int*/, false)
      && verifier.VerifyTable(tablePos, 8 /*BornPosition*/, Position3dVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*TestTypes*/, Logic.Config.TestType_Verify.Verify, false)
      && verifier.VerifyField(tablePos, 12 /*LinkId*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 14 /*ModeL*/, false)
      && verifier.VerifyString(tablePos, 16 /*Icon*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 18 /*MachineTypes*/, false)
      && verifier.VerifyString(tablePos, 20 /*MapType*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct TestType_ : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static TestType_ GetRootAsTestType_(ByteBuffer _bb) { return GetRootAsTestType_(_bb, new TestType_()); }
  public static TestType_ GetRootAsTestType_(ByteBuffer _bb, TestType_ obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestType_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Types(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TypesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTypesBytes() { return __p.__vector_as_span<int>(4, 4); }
#else
  public ArraySegment<byte>? GetTypesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetTypesArray() { return __p.__vector_as_array<int>(4); }
  public int Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Logic.Config.TestType_> CreateTestType_(FlatBufferBuilder builder,
      VectorOffset typesOffset = default(VectorOffset),
      int id = 0) {
    builder.StartTable(2);
    TestType_.AddId(builder, id);
    TestType_.AddTypes(builder, typesOffset);
    return TestType_.EndTestType_(builder);
  }

  public static void StartTestType_(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTypes(FlatBufferBuilder builder, VectorOffset typesOffset) { builder.AddOffset(0, typesOffset.Value, 0); }
  public static VectorOffset CreateTypesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTypesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTypesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTypesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(1, id, 0); }
  public static Offset<Logic.Config.TestType_> EndTestType_(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Logic.Config.TestType_>(o);
  }
}


static public class TestType_Verify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Types*/, 4 /*int*/, false)
      && verifier.VerifyField(tablePos, 6 /*Id*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct TestTableArraysTemplateList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static TestTableArraysTemplateList GetRootAsTestTableArraysTemplateList(ByteBuffer _bb) { return GetRootAsTestTableArraysTemplateList(_bb, new TestTableArraysTemplateList()); }
  public static TestTableArraysTemplateList GetRootAsTestTableArraysTemplateList(ByteBuffer _bb, TestTableArraysTemplateList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyTestTableArraysTemplateList(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, TestTableArraysTemplateListVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestTableArraysTemplateList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Logic.Config.TestTableArraysTemplate? TestTableArrays(int j) { int o = __p.__offset(4); return o != 0 ? (Logic.Config.TestTableArraysTemplate?)(new Logic.Config.TestTableArraysTemplate()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TestTableArraysLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Logic.Config.TestTableArraysTemplateList> CreateTestTableArraysTemplateList(FlatBufferBuilder builder,
      VectorOffset test_table_arraysOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TestTableArraysTemplateList.AddTestTableArrays(builder, test_table_arraysOffset);
    return TestTableArraysTemplateList.EndTestTableArraysTemplateList(builder);
  }

  public static void StartTestTableArraysTemplateList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTestTableArrays(FlatBufferBuilder builder, VectorOffset testTableArraysOffset) { builder.AddOffset(0, testTableArraysOffset.Value, 0); }
  public static VectorOffset CreateTestTableArraysVector(FlatBufferBuilder builder, Offset<Logic.Config.TestTableArraysTemplate>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTestTableArraysVectorBlock(FlatBufferBuilder builder, Offset<Logic.Config.TestTableArraysTemplate>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTestTableArraysVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Logic.Config.TestTableArraysTemplate>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTestTableArraysVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Logic.Config.TestTableArraysTemplate>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTestTableArraysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Logic.Config.TestTableArraysTemplateList> EndTestTableArraysTemplateList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Logic.Config.TestTableArraysTemplateList>(o);
  }
  public static void FinishTestTableArraysTemplateListBuffer(FlatBufferBuilder builder, Offset<Logic.Config.TestTableArraysTemplateList> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTestTableArraysTemplateListBuffer(FlatBufferBuilder builder, Offset<Logic.Config.TestTableArraysTemplateList> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class TestTableArraysTemplateListVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*TestTableArrays*/, Logic.Config.TestTableArraysTemplateVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
