// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Config
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestGlobal2Template : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestGlobal2Template GetRootAsTestGlobal2Template(ByteBuffer _bb) { return GetRootAsTestGlobal2Template(_bb, new TestGlobal2Template()); }
  public static TestGlobal2Template GetRootAsTestGlobal2Template(ByteBuffer _bb, TestGlobal2Template obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestGlobal2Template __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float TestFloat { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Config.TestGlobal2Template> CreateTestGlobal2Template(FlatBufferBuilder builder,
      float test_float = 0.0f) {
    builder.StartTable(1);
    TestGlobal2Template.AddTestFloat(builder, test_float);
    return TestGlobal2Template.EndTestGlobal2Template(builder);
  }

  public static void StartTestGlobal2Template(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTestFloat(FlatBufferBuilder builder, float testFloat) { builder.AddFloat(0, testFloat, 0.0f); }
  public static Offset<Config.TestGlobal2Template> EndTestGlobal2Template(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Config.TestGlobal2Template>(o);
  }
  public static void FinishTestGlobal2TemplateBuffer(FlatBufferBuilder builder, Offset<Config.TestGlobal2Template> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTestGlobal2TemplateBuffer(FlatBufferBuilder builder, Offset<Config.TestGlobal2Template> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
