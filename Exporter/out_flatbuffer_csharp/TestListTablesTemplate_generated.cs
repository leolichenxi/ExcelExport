// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Logic.Config
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct TestListTablesTemplate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static TestListTablesTemplate GetRootAsTestListTablesTemplate(ByteBuffer _bb) { return GetRootAsTestListTablesTemplate(_bb, new TestListTablesTemplate()); }
  public static TestListTablesTemplate GetRootAsTestListTablesTemplate(ByteBuffer _bb, TestListTablesTemplate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestListTablesTemplate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Key { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetKeyArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Logic.Config.TestListTablesTemplate> CreateTestListTablesTemplate(FlatBufferBuilder builder,
      StringOffset keyOffset = default(StringOffset)) {
    builder.StartTable(1);
    TestListTablesTemplate.AddKey(builder, keyOffset);
    return TestListTablesTemplate.EndTestListTablesTemplate(builder);
  }

  public static void StartTestListTablesTemplate(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddKey(FlatBufferBuilder builder, StringOffset keyOffset) { builder.AddOffset(0, keyOffset.Value, 0); }
  public static Offset<Logic.Config.TestListTablesTemplate> EndTestListTablesTemplate(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Logic.Config.TestListTablesTemplate>(o);
  }
}


static public class TestListTablesTemplateVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Key*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct TestListTablesTemplateList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static TestListTablesTemplateList GetRootAsTestListTablesTemplateList(ByteBuffer _bb) { return GetRootAsTestListTablesTemplateList(_bb, new TestListTablesTemplateList()); }
  public static TestListTablesTemplateList GetRootAsTestListTablesTemplateList(ByteBuffer _bb, TestListTablesTemplateList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyTestListTablesTemplateList(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, TestListTablesTemplateListVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestListTablesTemplateList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Logic.Config.TestListTablesTemplate? TestListTables(int j) { int o = __p.__offset(4); return o != 0 ? (Logic.Config.TestListTablesTemplate?)(new Logic.Config.TestListTablesTemplate()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TestListTablesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Logic.Config.TestListTablesTemplateList> CreateTestListTablesTemplateList(FlatBufferBuilder builder,
      VectorOffset test_list_tablesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TestListTablesTemplateList.AddTestListTables(builder, test_list_tablesOffset);
    return TestListTablesTemplateList.EndTestListTablesTemplateList(builder);
  }

  public static void StartTestListTablesTemplateList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTestListTables(FlatBufferBuilder builder, VectorOffset testListTablesOffset) { builder.AddOffset(0, testListTablesOffset.Value, 0); }
  public static VectorOffset CreateTestListTablesVector(FlatBufferBuilder builder, Offset<Logic.Config.TestListTablesTemplate>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTestListTablesVectorBlock(FlatBufferBuilder builder, Offset<Logic.Config.TestListTablesTemplate>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTestListTablesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Logic.Config.TestListTablesTemplate>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateTestListTablesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Logic.Config.TestListTablesTemplate>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartTestListTablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Logic.Config.TestListTablesTemplateList> EndTestListTablesTemplateList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Logic.Config.TestListTablesTemplateList>(o);
  }
  public static void FinishTestListTablesTemplateListBuffer(FlatBufferBuilder builder, Offset<Logic.Config.TestListTablesTemplateList> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTestListTablesTemplateListBuffer(FlatBufferBuilder builder, Offset<Logic.Config.TestListTablesTemplateList> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class TestListTablesTemplateListVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*TestListTables*/, Logic.Config.TestListTablesTemplateVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
