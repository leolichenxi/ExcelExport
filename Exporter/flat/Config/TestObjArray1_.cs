// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Config
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestObjArray1_ : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestObjArray1_ GetRootAsTestObjArray1_(ByteBuffer _bb) { return GetRootAsTestObjArray1_(_bb, new TestObjArray1_()); }
  public static TestObjArray1_ GetRootAsTestObjArray1_(ByteBuffer _bb, TestObjArray1_ obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestObjArray1_ __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int A { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Bs(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int BsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetBsBytes() { return __p.__vector_as_span<float>(6, 4); }
#else
  public ArraySegment<byte>? GetBsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetBsArray() { return __p.__vector_as_array<float>(6); }

  public static Offset<Config.TestObjArray1_> CreateTestObjArray1_(FlatBufferBuilder builder,
      int a = 0,
      VectorOffset bsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    TestObjArray1_.AddBs(builder, bsOffset);
    TestObjArray1_.AddA(builder, a);
    return TestObjArray1_.EndTestObjArray1_(builder);
  }

  public static void StartTestObjArray1_(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddA(FlatBufferBuilder builder, int a) { builder.AddInt(0, a, 0); }
  public static void AddBs(FlatBufferBuilder builder, VectorOffset bsOffset) { builder.AddOffset(1, bsOffset.Value, 0); }
  public static VectorOffset CreateBsVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBsVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Config.TestObjArray1_> EndTestObjArray1_(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Config.TestObjArray1_>(o);
  }
};


}
