// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/BattleParamTemplate.proto

package Config;

public final class BattleParamTemplateOuterClass {
  private BattleParamTemplateOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface BattleParamTemplateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Config.BattleParamTemplate)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 战斗开始的等待时间
     * </pre>
     *
     * <code>int32 BattleStartWaitTime = 1;</code>
     * @return The battleStartWaitTime.
     */
    int getBattleStartWaitTime();

    /**
     * <pre>
     * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
     * </pre>
     *
     * <code>repeated int32 BattleMapSizes = 2;</code>
     * @return A list containing the battleMapSizes.
     */
    java.util.List<java.lang.Integer> getBattleMapSizesList();
    /**
     * <pre>
     * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
     * </pre>
     *
     * <code>repeated int32 BattleMapSizes = 2;</code>
     * @return The count of battleMapSizes.
     */
    int getBattleMapSizesCount();
    /**
     * <pre>
     * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
     * </pre>
     *
     * <code>repeated int32 BattleMapSizes = 2;</code>
     * @param index The index of the element to return.
     * @return The battleMapSizes at the given index.
     */
    int getBattleMapSizes(int index);

    /**
     * <pre>
     * 闪避上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
     * @return Whether the dodgeEffectLimit field is set.
     */
    boolean hasDodgeEffectLimit();
    /**
     * <pre>
     * 闪避上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
     * @return The dodgeEffectLimit.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDodgeEffectLimit();
    /**
     * <pre>
     * 闪避上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getDodgeEffectLimitOrBuilder();

    /**
     * <pre>
     * 暴击上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
     * @return Whether the critEffectLimit field is set.
     */
    boolean hasCritEffectLimit();
    /**
     * <pre>
     * 暴击上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
     * @return The critEffectLimit.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getCritEffectLimit();
    /**
     * <pre>
     * 暴击上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getCritEffectLimitOrBuilder();

    /**
     * <pre>
     * 暴击伤害上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
     * @return Whether the critDamEffectLimit field is set.
     */
    boolean hasCritDamEffectLimit();
    /**
     * <pre>
     * 暴击伤害上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
     * @return The critDamEffectLimit.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getCritDamEffectLimit();
    /**
     * <pre>
     * 暴击伤害上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getCritDamEffectLimitOrBuilder();

    /**
     * <pre>
     * 伤害抗性上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
     * @return Whether the defenseRateEffectLimit field is set.
     */
    boolean hasDefenseRateEffectLimit();
    /**
     * <pre>
     * 伤害抗性上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
     * @return The defenseRateEffectLimit.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDefenseRateEffectLimit();
    /**
     * <pre>
     * 伤害抗性上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getDefenseRateEffectLimitOrBuilder();

    /**
     * <pre>
     * 伤害减免上限
     * </pre>
     *
     * <code>int32 DamageReduceLimit = 7;</code>
     * @return The damageReduceLimit.
     */
    int getDamageReduceLimit();

    /**
     * <pre>
     * 攻击速度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
     * @return Whether the coolDownLimit field is set.
     */
    boolean hasCoolDownLimit();
    /**
     * <pre>
     * 攻击速度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
     * @return The coolDownLimit.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getCoolDownLimit();
    /**
     * <pre>
     * 攻击速度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getCoolDownLimitOrBuilder();

    /**
     * <pre>
     * 克制强度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
     * @return Whether the elementEffectLimit field is set.
     */
    boolean hasElementEffectLimit();
    /**
     * <pre>
     * 克制强度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
     * @return The elementEffectLimit.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ getElementEffectLimit();
    /**
     * <pre>
     * 克制强度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_OrBuilder getElementEffectLimitOrBuilder();

    /**
     * <pre>
     * 攻击基础克制强度
     * </pre>
     *
     * <code>double ElementAttackBase = 10;</code>
     * @return The elementAttackBase.
     */
    double getElementAttackBase();

    /**
     * <pre>
     * 防御基础克制强度
     * </pre>
     *
     * <code>double ElementDefenseBase = 11;</code>
     * @return The elementDefenseBase.
     */
    double getElementDefenseBase();

    /**
     * <pre>
     * 默认克制强度
     * </pre>
     *
     * <code>int32 ElementEffectBase = 12;</code>
     * @return The elementEffectBase.
     */
    int getElementEffectBase();

    /**
     * <pre>
     * 伤害随机范围
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
     * @return Whether the damageCorrectionRange field is set.
     */
    boolean hasDamageCorrectionRange();
    /**
     * <pre>
     * 伤害随机范围
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
     * @return The damageCorrectionRange.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDamageCorrectionRange();
    /**
     * <pre>
     * 伤害随机范围
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getDamageCorrectionRangeOrBuilder();

    /**
     * <pre>
     * 闪避修正系数
     * </pre>
     *
     * <code>double DodgeCorrection = 14;</code>
     * @return The dodgeCorrection.
     */
    double getDodgeCorrection();

    /**
     * <pre>
     * 暴击修正系数
     * </pre>
     *
     * <code>double CritCorrection = 15;</code>
     * @return The critCorrection.
     */
    double getCritCorrection();

    /**
     * <pre>
     * 格档效果
     * </pre>
     *
     * <code>int32 BlckEffect = 16;</code>
     * @return The blckEffect.
     */
    int getBlckEffect();

    /**
     * <pre>
     * 格挡率上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
     * @return Whether the blockEffectLimit field is set.
     */
    boolean hasBlockEffectLimit();
    /**
     * <pre>
     * 格挡率上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
     * @return The blockEffectLimit.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getBlockEffectLimit();
    /**
     * <pre>
     * 格挡率上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getBlockEffectLimitOrBuilder();

    /**
     * <pre>
     * 英雄能量值上限
     * </pre>
     *
     * <code>int32 HeroMaxEnergyValue = 18;</code>
     * @return The heroMaxEnergyValue.
     */
    int getHeroMaxEnergyValue();

    /**
     * <pre>
     * 英雄能量技累计次数上限
     * </pre>
     *
     * <code>int32 HeroMaxEnergyNum = 19;</code>
     * @return The heroMaxEnergyNum.
     */
    int getHeroMaxEnergyNum();

    /**
     * <pre>
     * 小姐姐能量上限
     * </pre>
     *
     * <code>int32 LordMaxEnergy = 20;</code>
     * @return The lordMaxEnergy.
     */
    int getLordMaxEnergy();

    /**
     * <pre>
     * 最大攻击速度缩放比例。
     * </pre>
     *
     * <code>double MaxAttackSpeed = 21;</code>
     * @return The maxAttackSpeed.
     */
    double getMaxAttackSpeed();

    /**
     * <pre>
     * 英雄技能存储上限
     * </pre>
     *
     * <code>int32 HeroSkillCount = 22;</code>
     * @return The heroSkillCount.
     */
    int getHeroSkillCount();

    /**
     * <pre>
     * 怪物行走入场时间(毫秒）
     * </pre>
     *
     * <code>int32 MonsterWalkModeTime = 23;</code>
     * @return The monsterWalkModeTime.
     */
    int getMonsterWalkModeTime();

    /**
     * <pre>
     * 怪物掉落入场时间(毫秒）
     * </pre>
     *
     * <code>int32 MonsterDropModeTime = 24;</code>
     * @return The monsterDropModeTime.
     */
    int getMonsterDropModeTime();

    /**
     * <pre>
     * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
     * </pre>
     *
     * <code>.Position2Int BattleMapGrid = 25;</code>
     * @return Whether the battleMapGrid field is set.
     */
    boolean hasBattleMapGrid();
    /**
     * <pre>
     * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
     * </pre>
     *
     * <code>.Position2Int BattleMapGrid = 25;</code>
     * @return The battleMapGrid.
     */
    Position2IntOuterClass.Position2Int getBattleMapGrid();
    /**
     * <pre>
     * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
     * </pre>
     *
     * <code>.Position2Int BattleMapGrid = 25;</code>
     */
    Position2IntOuterClass.Position2IntOrBuilder getBattleMapGridOrBuilder();

    /**
     * <pre>
     * 格子尺寸，正方体直径
     * </pre>
     *
     * <code>int32 GridSize = 26;</code>
     * @return The gridSize.
     */
    int getGridSize();

    /**
     * <pre>
     * 小姐姐坐标
     * </pre>
     *
     * <code>int32 LordGrid = 27;</code>
     * @return The lordGrid.
     */
    int getLordGrid();

    /**
     * <pre>
     * 必杀位移时间（毫秒）
     * </pre>
     *
     * <code>int32 SkillMoveTime = 28;</code>
     * @return The skillMoveTime.
     */
    int getSkillMoveTime();

    /**
     * <pre>
     * 必杀叮特效时间（毫秒）
     * </pre>
     *
     * <code>int32 SkillFlashTime = 29;</code>
     * @return The skillFlashTime.
     */
    int getSkillFlashTime();

    /**
     * <pre>
     * 击杀魔物后掉落物掉落范围（以魔物的站立坐标为圆心）
     * </pre>
     *
     * <code>int32 MonsterDropRange = 30;</code>
     * @return The monsterDropRange.
     */
    int getMonsterDropRange();

    /**
     * <pre>
     * 掉落物反向偏移距离量
     * </pre>
     *
     * <code>int32 OffsetDistance = 31;</code>
     * @return The offsetDistance.
     */
    int getOffsetDistance();

    /**
     * <pre>
     * 掉落物品停留显示时间，单位是毫秒
     * </pre>
     *
     * <code>int32 DropItemStayTime = 32;</code>
     * @return The dropItemStayTime.
     */
    int getDropItemStayTime();

    /**
     * <pre>
     * 获取记录面板停留最大时间，单位是毫秒
     * </pre>
     *
     * <code>int32 BannerStayMaxtime = 33;</code>
     * @return The bannerStayMaxtime.
     */
    int getBannerStayMaxtime();

    /**
     * <pre>
     * 小姐姐移动速度
     * </pre>
     *
     * <code>int32 LordMoveSpeed = 34;</code>
     * @return The lordMoveSpeed.
     */
    int getLordMoveSpeed();

    /**
     * <pre>
     * 物品掉落范围，半径
     * </pre>
     *
     * <code>int32 DropItemRange = 35;</code>
     * @return The dropItemRange.
     */
    int getDropItemRange();

    /**
     * <pre>
     * 副本每列最大房间数
     * </pre>
     *
     * <code>int32 MaxRoom = 36;</code>
     * @return The maxRoom.
     */
    int getMaxRoom();

    /**
     * <pre>
     * 每一点领主生命值，回复英雄的百分比生命值。此值为万分比。
     * </pre>
     *
     * <code>int32 LordHealthFactor = 37;</code>
     * @return The lordHealthFactor.
     */
    int getLordHealthFactor();

    /**
     * <pre>
     * RL中炼成阵刷新消耗规则
     * </pre>
     *
     * <code>repeated int32 RuneRefreshPrices = 38;</code>
     * @return A list containing the runeRefreshPrices.
     */
    java.util.List<java.lang.Integer> getRuneRefreshPricesList();
    /**
     * <pre>
     * RL中炼成阵刷新消耗规则
     * </pre>
     *
     * <code>repeated int32 RuneRefreshPrices = 38;</code>
     * @return The count of runeRefreshPrices.
     */
    int getRuneRefreshPricesCount();
    /**
     * <pre>
     * RL中炼成阵刷新消耗规则
     * </pre>
     *
     * <code>repeated int32 RuneRefreshPrices = 38;</code>
     * @param index The index of the element to return.
     * @return The runeRefreshPrices at the given index.
     */
    int getRuneRefreshPrices(int index);

    /**
     * <pre>
     * 英雄最多可携带的符文数量
     * </pre>
     *
     * <code>int32 HeroMaxRuneCount = 39;</code>
     * @return The heroMaxRuneCount.
     */
    int getHeroMaxRuneCount();

    /**
     * <pre>
     * 最大炼成所需魂印数
     * </pre>
     *
     * <code>int32 MaxSoulStampDemand = 40;</code>
     * @return The maxSoulStampDemand.
     */
    int getMaxSoulStampDemand();

    /**
     * <pre>
     * 炼成阵所需魂印数量，总等级*该系数，向下取整，即为每次炼成所需的魂印数
     * </pre>
     *
     * <code>double SoulStampDemandFactor = 41;</code>
     * @return The soulStampDemandFactor.
     */
    double getSoulStampDemandFactor();

    /**
     * <pre>
     * 战斗中，装备背包和魂印背包的数量上限。
     * </pre>
     *
     * <code>int32 BagCapacity = 42;</code>
     * @return The bagCapacity.
     */
    int getBagCapacity();

    /**
     * <pre>
     * 战斗中，分解装备获得的魔魂。(万分比，向下取整)
     * </pre>
     *
     * <code>int32 ResolveFactor = 43;</code>
     * @return The resolveFactor.
     */
    int getResolveFactor();

    /**
     * <pre>
     * 战斗中，释放必杀技后，淡出的时间，单位毫秒
     * </pre>
     *
     * <code>int32 SkillFadeOutTime = 44;</code>
     * @return The skillFadeOutTime.
     */
    int getSkillFadeOutTime();

    /**
     * <pre>
     * 对手小姐姐坐标
     * </pre>
     *
     * <code>int32 PvpEnemyLordGrid = 45;</code>
     * @return The pvpEnemyLordGrid.
     */
    int getPvpEnemyLordGrid();

    /**
     * <pre>
     * PVP战斗全场增强Buff，需填入BuffId
     * </pre>
     *
     * <code>repeated int32 PvpSceneBuffs = 46;</code>
     * @return A list containing the pvpSceneBuffs.
     */
    java.util.List<java.lang.Integer> getPvpSceneBuffsList();
    /**
     * <pre>
     * PVP战斗全场增强Buff，需填入BuffId
     * </pre>
     *
     * <code>repeated int32 PvpSceneBuffs = 46;</code>
     * @return The count of pvpSceneBuffs.
     */
    int getPvpSceneBuffsCount();
    /**
     * <pre>
     * PVP战斗全场增强Buff，需填入BuffId
     * </pre>
     *
     * <code>repeated int32 PvpSceneBuffs = 46;</code>
     * @param index The index of the element to return.
     * @return The pvpSceneBuffs at the given index.
     */
    int getPvpSceneBuffs(int index);

    /**
     * <pre>
     * 先手技能等待时间，单位是秒
     * </pre>
     *
     * <code>int32 PvpFirstHandWaiting = 47;</code>
     * @return The pvpFirstHandWaiting.
     */
    int getPvpFirstHandWaiting();

    /**
     * <pre>
     * 后手技能等待时间，单位是秒
     * </pre>
     *
     * <code>int32 PvpSecondHandWaiting = 48;</code>
     * @return The pvpSecondHandWaiting.
     */
    int getPvpSecondHandWaiting();

    /**
     * <pre>
     * 竞技战斗开始前倒计时，单位是秒
     * </pre>
     *
     * <code>int32 PvpStartCountDown = 49;</code>
     * @return The pvpStartCountDown.
     */
    int getPvpStartCountDown();

    /**
     * <pre>
     * 竞技战斗结束前倒计时，单位是秒
     * </pre>
     *
     * <code>int32 PvpOverCountDown = 50;</code>
     * @return The pvpOverCountDown.
     */
    int getPvpOverCountDown();

    /**
     * <pre>
     * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
     * @return Whether the soulInterest field is set.
     */
    boolean hasSoulInterest();
    /**
     * <pre>
     * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
     * @return The soulInterest.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ getSoulInterest();
    /**
     * <pre>
     * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_OrBuilder getSoulInterestOrBuilder();

    /**
     * <pre>
     * 战斗最多死亡人数（含）
     * </pre>
     *
     * <code>int32 BattleHeroDieValue = 52;</code>
     * @return The battleHeroDieValue.
     */
    int getBattleHeroDieValue();

    /**
     * <pre>
     * 战斗最大时间（含）
     * </pre>
     *
     * <code>int32 BattleMaxTimeValue = 53;</code>
     * @return The battleMaxTimeValue.
     */
    int getBattleMaxTimeValue();

    /**
     * <pre>
     * 战斗移动跳跃时间（毫秒）
     * </pre>
     *
     * <code>int32 BattleJumpTime = 54;</code>
     * @return The battleJumpTime.
     */
    int getBattleJumpTime();

    /**
     * <pre>
     * 一个上古残页房间，同时展示的商品数量。
     * </pre>
     *
     * <code>int32 ProfessionUpgradeCount = 55;</code>
     * @return The professionUpgradeCount.
     */
    int getProfessionUpgradeCount();

    /**
     * <pre>
     * 玩家战斗中手牌上限
     * </pre>
     *
     * <code>int32 HandCardLimit = 56;</code>
     * @return The handCardLimit.
     */
    int getHandCardLimit();

    /**
     * <pre>
     * 遗忘操作消耗
     * </pre>
     *
     * <code>repeated int32 ForgetCosts = 57;</code>
     * @return A list containing the forgetCosts.
     */
    java.util.List<java.lang.Integer> getForgetCostsList();
    /**
     * <pre>
     * 遗忘操作消耗
     * </pre>
     *
     * <code>repeated int32 ForgetCosts = 57;</code>
     * @return The count of forgetCosts.
     */
    int getForgetCostsCount();
    /**
     * <pre>
     * 遗忘操作消耗
     * </pre>
     *
     * <code>repeated int32 ForgetCosts = 57;</code>
     * @param index The index of the element to return.
     * @return The forgetCosts at the given index.
     */
    int getForgetCosts(int index);

    /**
     * <pre>
     * 祈祷操作消耗
     * </pre>
     *
     * <code>repeated int32 PrayCosts = 58;</code>
     * @return A list containing the prayCosts.
     */
    java.util.List<java.lang.Integer> getPrayCostsList();
    /**
     * <pre>
     * 祈祷操作消耗
     * </pre>
     *
     * <code>repeated int32 PrayCosts = 58;</code>
     * @return The count of prayCosts.
     */
    int getPrayCostsCount();
    /**
     * <pre>
     * 祈祷操作消耗
     * </pre>
     *
     * <code>repeated int32 PrayCosts = 58;</code>
     * @param index The index of the element to return.
     * @return The prayCosts at the given index.
     */
    int getPrayCosts(int index);

    /**
     * <pre>
     * X张同卡升级为1张高级卡，“X”
     * </pre>
     *
     * <code>int32 CardLevelUpNeedNum = 59;</code>
     * @return The cardLevelUpNeedNum.
     */
    int getCardLevelUpNeedNum();

    /**
     * <pre>
     * 每使用5张基础卡，抽1张必杀卡（暂时屏蔽）
     * </pre>
     *
     * <code>int32 CardUseToDrawUnique = 60;</code>
     * @return The cardUseToDrawUnique.
     */
    int getCardUseToDrawUnique();

    /**
     * <pre>
     * 玩家战斗中初始手牌上限
     * </pre>
     *
     * <code>int32 OriginalHandCardLimit = 61;</code>
     * @return The originalHandCardLimit.
     */
    int getOriginalHandCardLimit();

    /**
     * <pre>
     * 每轮发牌必杀卡数量上限
     * </pre>
     *
     * <code>int32 UniqueSkillCardLimitCountOT = 62;</code>
     * @return The uniqueSkillCardLimitCountOT.
     */
    int getUniqueSkillCardLimitCountOT();

    /**
     * <pre>
     * 精英房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
     * </pre>
     *
     * <code>int32 DropCoefficientInEliteRoom = 63;</code>
     * @return The dropCoefficientInEliteRoom.
     */
    int getDropCoefficientInEliteRoom();

    /**
     * <pre>
     * BOSS房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
     * </pre>
     *
     * <code>int32 DropCoefficientInBossRoom = 64;</code>
     * @return The dropCoefficientInBossRoom.
     */
    int getDropCoefficientInBossRoom();

    /**
     * <pre>
     * 英雄死亡后，复活的时间，单位毫秒，用于在多层模式中
     * </pre>
     *
     * <code>int32 HeroRebornTime = 65;</code>
     * @return The heroRebornTime.
     */
    int getHeroRebornTime();

    /**
     * <pre>
     * 英雄死亡后，复活需要消耗的领主血量系数(仅限于迷宫中)，最终扣血量=英雄星级*该系数
     * </pre>
     *
     * <code>int32 HeroRebornHpCostFactor = 66;</code>
     * @return The heroRebornHpCostFactor.
     */
    int getHeroRebornHpCostFactor();

    /**
     * <pre>
     * 玩家战斗中初始发牌数量（受HandCardLimit限制）
     * </pre>
     *
     * <code>int32 OriginalHandCardNum = 67;</code>
     * @return The originalHandCardNum.
     */
    int getOriginalHandCardNum();

    /**
     * <pre>
     * 挑战者先手概率（万分比）
     * </pre>
     *
     * <code>int32 ChallengeFirstHandChance = 68;</code>
     * @return The challengeFirstHandChance.
     */
    int getChallengeFirstHandChance();

    /**
     * <pre>
     * 天梯对战总时长
     * </pre>
     *
     * <code>int32 PvpChallengeTime = 69;</code>
     * @return The pvpChallengeTime.
     */
    int getPvpChallengeTime();

    /**
     * <pre>
     * 天梯先手首次发牌必杀卡牌数量
     * </pre>
     *
     * <code>int32 FirstHandEnergyCardCount = 70;</code>
     * @return The firstHandEnergyCardCount.
     */
    int getFirstHandEnergyCardCount();

    /**
     * <pre>
     * 天梯后手首次发牌必杀卡牌数量
     * </pre>
     *
     * <code>int32 SecondtHandEnergyCardCount = 71;</code>
     * @return The secondtHandEnergyCardCount.
     */
    int getSecondtHandEnergyCardCount();

    /**
     * <pre>
     * 先手等待出手时间（毫秒）
     * </pre>
     *
     * <code>int32 PvpFirstHandTime = 72;</code>
     * @return The pvpFirstHandTime.
     */
    int getPvpFirstHandTime();

    /**
     * <pre>
     * 后手等待出手时间（毫秒）
     * </pre>
     *
     * <code>int32 PvpSecondHandTime = 73;</code>
     * @return The pvpSecondHandTime.
     */
    int getPvpSecondHandTime();

    /**
     * <pre>
     * 领主卡牌使用间隔时间（毫秒）
     * </pre>
     *
     * <code>int32 LordCardSpacing = 74;</code>
     * @return The lordCardSpacing.
     */
    int getLordCardSpacing();

    /**
     * <pre>
     * 必杀卡牌检查使用间隔（毫秒）
     * </pre>
     *
     * <code>int32 EnergyCardCheckUp = 75;</code>
     * @return The energyCardCheckUp.
     */
    int getEnergyCardCheckUp();

    /**
     * <pre>
     * PVP战斗玩家战斗中初始发牌数量（受HandCardLimit限制）
     * </pre>
     *
     * <code>int32 PvpOriginalHandCardNum = 76;</code>
     * @return The pvpOriginalHandCardNum.
     */
    int getPvpOriginalHandCardNum();

    /**
     * <pre>
     * 所有战斗2倍速按钮实际读取值
     * </pre>
     *
     * <code>repeated double BattleSpeedUpRates = 77;</code>
     * @return A list containing the battleSpeedUpRates.
     */
    java.util.List<java.lang.Double> getBattleSpeedUpRatesList();
    /**
     * <pre>
     * 所有战斗2倍速按钮实际读取值
     * </pre>
     *
     * <code>repeated double BattleSpeedUpRates = 77;</code>
     * @return The count of battleSpeedUpRates.
     */
    int getBattleSpeedUpRatesCount();
    /**
     * <pre>
     * 所有战斗2倍速按钮实际读取值
     * </pre>
     *
     * <code>repeated double BattleSpeedUpRates = 77;</code>
     * @param index The index of the element to return.
     * @return The battleSpeedUpRates at the given index.
     */
    double getBattleSpeedUpRates(int index);

    /**
     * <pre>
     * 挂机流程间隔时间
     * </pre>
     *
     * <code>int32 HangUpIntervalTime = 78;</code>
     * @return The hangUpIntervalTime.
     */
    int getHangUpIntervalTime();

    /**
     * <pre>
     * 上一批次的怪物全部击杀完后，下一批次的怪物出现的时间间隔，单位(毫秒)
     * </pre>
     *
     * <code>int32 NextWaveAppearInterval = 79;</code>
     * @return The nextWaveAppearInterval.
     */
    int getNextWaveAppearInterval();

    /**
     * <pre>
     * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
     * @return Whether the dice field is set.
     */
    boolean hasDice();
    /**
     * <pre>
     * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
     * @return The dice.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ getDice();
    /**
     * <pre>
     * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_OrBuilder getDiceOrBuilder();

    /**
     * <pre>
     * 迷宫中玩家可合成遗物的初始次数
     * </pre>
     *
     * <code>int32 RemainsCompoundOriginalCount = 81;</code>
     * @return The remainsCompoundOriginalCount.
     */
    int getRemainsCompoundOriginalCount();

    /**
     * <pre>
     * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
     * @return Whether the mazeValueFactor field is set.
     */
    boolean hasMazeValueFactor();
    /**
     * <pre>
     * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
     * @return The mazeValueFactor.
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ getMazeValueFactor();
    /**
     * <pre>
     * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
     */
    Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_OrBuilder getMazeValueFactorOrBuilder();

    /**
     * <pre>
     * 近战战斗冲刺时间（Dash）
     * </pre>
     *
     * <code>int32 BattleDashTime = 83;</code>
     * @return The battleDashTime.
     */
    int getBattleDashTime();

    /**
     * <pre>
     * 近战战斗冲刺返回时间（DashBack）
     * </pre>
     *
     * <code>int32 BattleDashBackTime = 84;</code>
     * @return The battleDashBackTime.
     */
    int getBattleDashBackTime();

    /**
     * <pre>
     * 如果有击飞和击倒 留出的安全表现时间
     * </pre>
     *
     * <code>int32 BattleRoundSafeTime = 85;</code>
     * @return The battleRoundSafeTime.
     */
    int getBattleRoundSafeTime();

    /**
     * <pre>
     * 下个不是友军（如果不是友军，需要等待当年动作执行完毕），行动前，需要等待一个比较短暂的时间，该时间在全局配置表配置。作用为让摄像机回调到一个位置。
     * </pre>
     *
     * <code>int32 BattleWaitNextTime = 86;</code>
     * @return The battleWaitNextTime.
     */
    int getBattleWaitNextTime();

    /**
     * <pre>
     * 行为重新开始等待时间
     * </pre>
     *
     * <code>int32 BattleRoundTime = 87;</code>
     * @return The battleRoundTime.
     */
    int getBattleRoundTime();

    /**
     * <pre>
     * 击飞力
     * </pre>
     *
     * <code>int32 BattleHitFlyForce = 88;</code>
     * @return The battleHitFlyForce.
     */
    int getBattleHitFlyForce();

    /**
     * <pre>
     * 击倒力
     * </pre>
     *
     * <code>int32 BattleHitDownForce = 89;</code>
     * @return The battleHitDownForce.
     */
    int getBattleHitDownForce();

    /**
     * <pre>
     * 击飞最大高度
     * </pre>
     *
     * <code>int32 BattleHitFlyMaxHeight = 90;</code>
     * @return The battleHitFlyMaxHeight.
     */
    int getBattleHitFlyMaxHeight();

    /**
     * <pre>
     * 击飞下降重力
     * </pre>
     *
     * <code>int32 BattleGravity = 91;</code>
     * @return The battleGravity.
     */
    int getBattleGravity();

    /**
     * <pre>
     * 击飞上行重力
     * </pre>
     *
     * <code>int32 BattleFlyUpGravity = 92;</code>
     * @return The battleFlyUpGravity.
     */
    int getBattleFlyUpGravity();

    /**
     * <pre>
     * 速度趋近顶部重力
     * </pre>
     *
     * <code>int32 BattleNearTopGravity = 93;</code>
     * @return The battleNearTopGravity.
     */
    int getBattleNearTopGravity();

    /**
     * <pre>
     * 速衰接近顶部速度判定
     * </pre>
     *
     * <code>int32 BattleNearTopSpeed = 94;</code>
     * @return The battleNearTopSpeed.
     */
    int getBattleNearTopSpeed();
  }
  /**
   * Protobuf type {@code Config.BattleParamTemplate}
   */
  public static final class BattleParamTemplate extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Config.BattleParamTemplate)
      BattleParamTemplateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BattleParamTemplate.newBuilder() to construct.
    private BattleParamTemplate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BattleParamTemplate() {
      battleMapSizes_ = emptyIntList();
      runeRefreshPrices_ = emptyIntList();
      pvpSceneBuffs_ = emptyIntList();
      forgetCosts_ = emptyIntList();
      prayCosts_ = emptyIntList();
      battleSpeedUpRates_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BattleParamTemplate();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BattleParamTemplate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              battleStartWaitTime_ = input.readInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                battleMapSizes_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              battleMapSizes_.addInt(input.readInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                battleMapSizes_ = newIntList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                battleMapSizes_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder subBuilder = null;
              if (dodgeEffectLimit_ != null) {
                subBuilder = dodgeEffectLimit_.toBuilder();
              }
              dodgeEffectLimit_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dodgeEffectLimit_);
                dodgeEffectLimit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder subBuilder = null;
              if (critEffectLimit_ != null) {
                subBuilder = critEffectLimit_.toBuilder();
              }
              critEffectLimit_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(critEffectLimit_);
                critEffectLimit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder subBuilder = null;
              if (critDamEffectLimit_ != null) {
                subBuilder = critDamEffectLimit_.toBuilder();
              }
              critDamEffectLimit_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(critDamEffectLimit_);
                critDamEffectLimit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder subBuilder = null;
              if (defenseRateEffectLimit_ != null) {
                subBuilder = defenseRateEffectLimit_.toBuilder();
              }
              defenseRateEffectLimit_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(defenseRateEffectLimit_);
                defenseRateEffectLimit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 56: {

              damageReduceLimit_ = input.readInt32();
              break;
            }
            case 66: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder subBuilder = null;
              if (coolDownLimit_ != null) {
                subBuilder = coolDownLimit_.toBuilder();
              }
              coolDownLimit_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(coolDownLimit_);
                coolDownLimit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 74: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.Builder subBuilder = null;
              if (elementEffectLimit_ != null) {
                subBuilder = elementEffectLimit_.toBuilder();
              }
              elementEffectLimit_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(elementEffectLimit_);
                elementEffectLimit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 81: {

              elementAttackBase_ = input.readDouble();
              break;
            }
            case 89: {

              elementDefenseBase_ = input.readDouble();
              break;
            }
            case 96: {

              elementEffectBase_ = input.readInt32();
              break;
            }
            case 106: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder subBuilder = null;
              if (damageCorrectionRange_ != null) {
                subBuilder = damageCorrectionRange_.toBuilder();
              }
              damageCorrectionRange_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(damageCorrectionRange_);
                damageCorrectionRange_ = subBuilder.buildPartial();
              }

              break;
            }
            case 113: {

              dodgeCorrection_ = input.readDouble();
              break;
            }
            case 121: {

              critCorrection_ = input.readDouble();
              break;
            }
            case 128: {

              blckEffect_ = input.readInt32();
              break;
            }
            case 138: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder subBuilder = null;
              if (blockEffectLimit_ != null) {
                subBuilder = blockEffectLimit_.toBuilder();
              }
              blockEffectLimit_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(blockEffectLimit_);
                blockEffectLimit_ = subBuilder.buildPartial();
              }

              break;
            }
            case 144: {

              heroMaxEnergyValue_ = input.readInt32();
              break;
            }
            case 152: {

              heroMaxEnergyNum_ = input.readInt32();
              break;
            }
            case 160: {

              lordMaxEnergy_ = input.readInt32();
              break;
            }
            case 169: {

              maxAttackSpeed_ = input.readDouble();
              break;
            }
            case 176: {

              heroSkillCount_ = input.readInt32();
              break;
            }
            case 184: {

              monsterWalkModeTime_ = input.readInt32();
              break;
            }
            case 192: {

              monsterDropModeTime_ = input.readInt32();
              break;
            }
            case 202: {
              Position2IntOuterClass.Position2Int.Builder subBuilder = null;
              if (battleMapGrid_ != null) {
                subBuilder = battleMapGrid_.toBuilder();
              }
              battleMapGrid_ = input.readMessage(Position2IntOuterClass.Position2Int.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(battleMapGrid_);
                battleMapGrid_ = subBuilder.buildPartial();
              }

              break;
            }
            case 208: {

              gridSize_ = input.readInt32();
              break;
            }
            case 216: {

              lordGrid_ = input.readInt32();
              break;
            }
            case 224: {

              skillMoveTime_ = input.readInt32();
              break;
            }
            case 232: {

              skillFlashTime_ = input.readInt32();
              break;
            }
            case 240: {

              monsterDropRange_ = input.readInt32();
              break;
            }
            case 248: {

              offsetDistance_ = input.readInt32();
              break;
            }
            case 256: {

              dropItemStayTime_ = input.readInt32();
              break;
            }
            case 264: {

              bannerStayMaxtime_ = input.readInt32();
              break;
            }
            case 272: {

              lordMoveSpeed_ = input.readInt32();
              break;
            }
            case 280: {

              dropItemRange_ = input.readInt32();
              break;
            }
            case 288: {

              maxRoom_ = input.readInt32();
              break;
            }
            case 296: {

              lordHealthFactor_ = input.readInt32();
              break;
            }
            case 304: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                runeRefreshPrices_ = newIntList();
                mutable_bitField0_ |= 0x00000002;
              }
              runeRefreshPrices_.addInt(input.readInt32());
              break;
            }
            case 306: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                runeRefreshPrices_ = newIntList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                runeRefreshPrices_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 312: {

              heroMaxRuneCount_ = input.readInt32();
              break;
            }
            case 320: {

              maxSoulStampDemand_ = input.readInt32();
              break;
            }
            case 329: {

              soulStampDemandFactor_ = input.readDouble();
              break;
            }
            case 336: {

              bagCapacity_ = input.readInt32();
              break;
            }
            case 344: {

              resolveFactor_ = input.readInt32();
              break;
            }
            case 352: {

              skillFadeOutTime_ = input.readInt32();
              break;
            }
            case 360: {

              pvpEnemyLordGrid_ = input.readInt32();
              break;
            }
            case 368: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                pvpSceneBuffs_ = newIntList();
                mutable_bitField0_ |= 0x00000004;
              }
              pvpSceneBuffs_.addInt(input.readInt32());
              break;
            }
            case 370: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
                pvpSceneBuffs_ = newIntList();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                pvpSceneBuffs_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 376: {

              pvpFirstHandWaiting_ = input.readInt32();
              break;
            }
            case 384: {

              pvpSecondHandWaiting_ = input.readInt32();
              break;
            }
            case 392: {

              pvpStartCountDown_ = input.readInt32();
              break;
            }
            case 400: {

              pvpOverCountDown_ = input.readInt32();
              break;
            }
            case 410: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.Builder subBuilder = null;
              if (soulInterest_ != null) {
                subBuilder = soulInterest_.toBuilder();
              }
              soulInterest_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(soulInterest_);
                soulInterest_ = subBuilder.buildPartial();
              }

              break;
            }
            case 416: {

              battleHeroDieValue_ = input.readInt32();
              break;
            }
            case 424: {

              battleMaxTimeValue_ = input.readInt32();
              break;
            }
            case 432: {

              battleJumpTime_ = input.readInt32();
              break;
            }
            case 440: {

              professionUpgradeCount_ = input.readInt32();
              break;
            }
            case 448: {

              handCardLimit_ = input.readInt32();
              break;
            }
            case 456: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                forgetCosts_ = newIntList();
                mutable_bitField0_ |= 0x00000008;
              }
              forgetCosts_.addInt(input.readInt32());
              break;
            }
            case 458: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) != 0) && input.getBytesUntilLimit() > 0) {
                forgetCosts_ = newIntList();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                forgetCosts_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 464: {
              if (!((mutable_bitField0_ & 0x00000010) != 0)) {
                prayCosts_ = newIntList();
                mutable_bitField0_ |= 0x00000010;
              }
              prayCosts_.addInt(input.readInt32());
              break;
            }
            case 466: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) != 0) && input.getBytesUntilLimit() > 0) {
                prayCosts_ = newIntList();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                prayCosts_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 472: {

              cardLevelUpNeedNum_ = input.readInt32();
              break;
            }
            case 480: {

              cardUseToDrawUnique_ = input.readInt32();
              break;
            }
            case 488: {

              originalHandCardLimit_ = input.readInt32();
              break;
            }
            case 496: {

              uniqueSkillCardLimitCountOT_ = input.readInt32();
              break;
            }
            case 504: {

              dropCoefficientInEliteRoom_ = input.readInt32();
              break;
            }
            case 512: {

              dropCoefficientInBossRoom_ = input.readInt32();
              break;
            }
            case 520: {

              heroRebornTime_ = input.readInt32();
              break;
            }
            case 528: {

              heroRebornHpCostFactor_ = input.readInt32();
              break;
            }
            case 536: {

              originalHandCardNum_ = input.readInt32();
              break;
            }
            case 544: {

              challengeFirstHandChance_ = input.readInt32();
              break;
            }
            case 552: {

              pvpChallengeTime_ = input.readInt32();
              break;
            }
            case 560: {

              firstHandEnergyCardCount_ = input.readInt32();
              break;
            }
            case 568: {

              secondtHandEnergyCardCount_ = input.readInt32();
              break;
            }
            case 576: {

              pvpFirstHandTime_ = input.readInt32();
              break;
            }
            case 584: {

              pvpSecondHandTime_ = input.readInt32();
              break;
            }
            case 592: {

              lordCardSpacing_ = input.readInt32();
              break;
            }
            case 600: {

              energyCardCheckUp_ = input.readInt32();
              break;
            }
            case 608: {

              pvpOriginalHandCardNum_ = input.readInt32();
              break;
            }
            case 617: {
              if (!((mutable_bitField0_ & 0x00000020) != 0)) {
                battleSpeedUpRates_ = newDoubleList();
                mutable_bitField0_ |= 0x00000020;
              }
              battleSpeedUpRates_.addDouble(input.readDouble());
              break;
            }
            case 618: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) != 0) && input.getBytesUntilLimit() > 0) {
                battleSpeedUpRates_ = newDoubleList();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                battleSpeedUpRates_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 624: {

              hangUpIntervalTime_ = input.readInt32();
              break;
            }
            case 632: {

              nextWaveAppearInterval_ = input.readInt32();
              break;
            }
            case 642: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.Builder subBuilder = null;
              if (dice_ != null) {
                subBuilder = dice_.toBuilder();
              }
              dice_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dice_);
                dice_ = subBuilder.buildPartial();
              }

              break;
            }
            case 648: {

              remainsCompoundOriginalCount_ = input.readInt32();
              break;
            }
            case 658: {
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.Builder subBuilder = null;
              if (mazeValueFactor_ != null) {
                subBuilder = mazeValueFactor_.toBuilder();
              }
              mazeValueFactor_ = input.readMessage(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mazeValueFactor_);
                mazeValueFactor_ = subBuilder.buildPartial();
              }

              break;
            }
            case 664: {

              battleDashTime_ = input.readInt32();
              break;
            }
            case 672: {

              battleDashBackTime_ = input.readInt32();
              break;
            }
            case 680: {

              battleRoundSafeTime_ = input.readInt32();
              break;
            }
            case 688: {

              battleWaitNextTime_ = input.readInt32();
              break;
            }
            case 696: {

              battleRoundTime_ = input.readInt32();
              break;
            }
            case 704: {

              battleHitFlyForce_ = input.readInt32();
              break;
            }
            case 712: {

              battleHitDownForce_ = input.readInt32();
              break;
            }
            case 720: {

              battleHitFlyMaxHeight_ = input.readInt32();
              break;
            }
            case 728: {

              battleGravity_ = input.readInt32();
              break;
            }
            case 736: {

              battleFlyUpGravity_ = input.readInt32();
              break;
            }
            case 744: {

              battleNearTopGravity_ = input.readInt32();
              break;
            }
            case 752: {

              battleNearTopSpeed_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          battleMapSizes_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          runeRefreshPrices_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          pvpSceneBuffs_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          forgetCosts_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000010) != 0)) {
          prayCosts_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000020) != 0)) {
          battleSpeedUpRates_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Builder.class);
    }

    public interface Dodgeeffectlimit_OrBuilder extends
        // @@protoc_insertion_point(interface_extends:Config.BattleParamTemplate.Dodgeeffectlimit_)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Max
       * </pre>
       *
       * <code>int32 Max = 1;</code>
       * @return The max.
       */
      int getMax();

      /**
       * <pre>
       * Min
       * </pre>
       *
       * <code>int32 Min = 2;</code>
       * @return The min.
       */
      int getMin();
    }
    /**
     * Protobuf type {@code Config.BattleParamTemplate.Dodgeeffectlimit_}
     */
    public static final class Dodgeeffectlimit_ extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:Config.BattleParamTemplate.Dodgeeffectlimit_)
        Dodgeeffectlimit_OrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Dodgeeffectlimit_.newBuilder() to construct.
      private Dodgeeffectlimit_(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Dodgeeffectlimit_() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Dodgeeffectlimit_();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Dodgeeffectlimit_(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                max_ = input.readInt32();
                break;
              }
              case 16: {

                min_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Dodgeeffectlimit__descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Dodgeeffectlimit__fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder.class);
      }

      public static final int MAX_FIELD_NUMBER = 1;
      private int max_;
      /**
       * <pre>
       * Max
       * </pre>
       *
       * <code>int32 Max = 1;</code>
       * @return The max.
       */
      @java.lang.Override
      public int getMax() {
        return max_;
      }

      public static final int MIN_FIELD_NUMBER = 2;
      private int min_;
      /**
       * <pre>
       * Min
       * </pre>
       *
       * <code>int32 Min = 2;</code>
       * @return The min.
       */
      @java.lang.Override
      public int getMin() {
        return min_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (max_ != 0) {
          output.writeInt32(1, max_);
        }
        if (min_ != 0) {
          output.writeInt32(2, min_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (max_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, max_);
        }
        if (min_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, min_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_)) {
          return super.equals(obj);
        }
        Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ other = (Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_) obj;

        if (getMax()
            != other.getMax()) return false;
        if (getMin()
            != other.getMin()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + MAX_FIELD_NUMBER;
        hash = (53 * hash) + getMax();
        hash = (37 * hash) + MIN_FIELD_NUMBER;
        hash = (53 * hash) + getMin();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Config.BattleParamTemplate.Dodgeeffectlimit_}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:Config.BattleParamTemplate.Dodgeeffectlimit_)
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Dodgeeffectlimit__descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Dodgeeffectlimit__fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder.class);
        }

        // Construct using Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          max_ = 0;

          min_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Dodgeeffectlimit__descriptor;
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDefaultInstanceForType() {
          return Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance();
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ build() {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ buildPartial() {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ result = new Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_(this);
          result.max_ = max_;
          result.min_ = min_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_) {
            return mergeFrom((Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ other) {
          if (other == Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance()) return this;
          if (other.getMax() != 0) {
            setMax(other.getMax());
          }
          if (other.getMin() != 0) {
            setMin(other.getMin());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int max_ ;
        /**
         * <pre>
         * Max
         * </pre>
         *
         * <code>int32 Max = 1;</code>
         * @return The max.
         */
        @java.lang.Override
        public int getMax() {
          return max_;
        }
        /**
         * <pre>
         * Max
         * </pre>
         *
         * <code>int32 Max = 1;</code>
         * @param value The max to set.
         * @return This builder for chaining.
         */
        public Builder setMax(int value) {
          
          max_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Max
         * </pre>
         *
         * <code>int32 Max = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearMax() {
          
          max_ = 0;
          onChanged();
          return this;
        }

        private int min_ ;
        /**
         * <pre>
         * Min
         * </pre>
         *
         * <code>int32 Min = 2;</code>
         * @return The min.
         */
        @java.lang.Override
        public int getMin() {
          return min_;
        }
        /**
         * <pre>
         * Min
         * </pre>
         *
         * <code>int32 Min = 2;</code>
         * @param value The min to set.
         * @return This builder for chaining.
         */
        public Builder setMin(int value) {
          
          min_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Min
         * </pre>
         *
         * <code>int32 Min = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMin() {
          
          min_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:Config.BattleParamTemplate.Dodgeeffectlimit_)
      }

      // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate.Dodgeeffectlimit_)
      private static final Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_();
      }

      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Dodgeeffectlimit_>
          PARSER = new com.google.protobuf.AbstractParser<Dodgeeffectlimit_>() {
        @java.lang.Override
        public Dodgeeffectlimit_ parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Dodgeeffectlimit_(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Dodgeeffectlimit_> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Dodgeeffectlimit_> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface Elementeffectlimit_OrBuilder extends
        // @@protoc_insertion_point(interface_extends:Config.BattleParamTemplate.Elementeffectlimit_)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Max
       * </pre>
       *
       * <code>double Max = 1;</code>
       * @return The max.
       */
      double getMax();

      /**
       * <pre>
       * Min
       * </pre>
       *
       * <code>double Min = 2;</code>
       * @return The min.
       */
      double getMin();
    }
    /**
     * Protobuf type {@code Config.BattleParamTemplate.Elementeffectlimit_}
     */
    public static final class Elementeffectlimit_ extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:Config.BattleParamTemplate.Elementeffectlimit_)
        Elementeffectlimit_OrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Elementeffectlimit_.newBuilder() to construct.
      private Elementeffectlimit_(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Elementeffectlimit_() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Elementeffectlimit_();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Elementeffectlimit_(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {

                max_ = input.readDouble();
                break;
              }
              case 17: {

                min_ = input.readDouble();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Elementeffectlimit__descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Elementeffectlimit__fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.Builder.class);
      }

      public static final int MAX_FIELD_NUMBER = 1;
      private double max_;
      /**
       * <pre>
       * Max
       * </pre>
       *
       * <code>double Max = 1;</code>
       * @return The max.
       */
      @java.lang.Override
      public double getMax() {
        return max_;
      }

      public static final int MIN_FIELD_NUMBER = 2;
      private double min_;
      /**
       * <pre>
       * Min
       * </pre>
       *
       * <code>double Min = 2;</code>
       * @return The min.
       */
      @java.lang.Override
      public double getMin() {
        return min_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (max_ != 0D) {
          output.writeDouble(1, max_);
        }
        if (min_ != 0D) {
          output.writeDouble(2, min_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (max_ != 0D) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, max_);
        }
        if (min_ != 0D) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(2, min_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_)) {
          return super.equals(obj);
        }
        Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ other = (Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_) obj;

        if (java.lang.Double.doubleToLongBits(getMax())
            != java.lang.Double.doubleToLongBits(
                other.getMax())) return false;
        if (java.lang.Double.doubleToLongBits(getMin())
            != java.lang.Double.doubleToLongBits(
                other.getMin())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getMax()));
        hash = (37 * hash) + MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getMin()));
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Config.BattleParamTemplate.Elementeffectlimit_}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:Config.BattleParamTemplate.Elementeffectlimit_)
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_OrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Elementeffectlimit__descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Elementeffectlimit__fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.Builder.class);
        }

        // Construct using Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          max_ = 0D;

          min_ = 0D;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Elementeffectlimit__descriptor;
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ getDefaultInstanceForType() {
          return Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.getDefaultInstance();
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ build() {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ buildPartial() {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ result = new Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_(this);
          result.max_ = max_;
          result.min_ = min_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_) {
            return mergeFrom((Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ other) {
          if (other == Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.getDefaultInstance()) return this;
          if (other.getMax() != 0D) {
            setMax(other.getMax());
          }
          if (other.getMin() != 0D) {
            setMin(other.getMin());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private double max_ ;
        /**
         * <pre>
         * Max
         * </pre>
         *
         * <code>double Max = 1;</code>
         * @return The max.
         */
        @java.lang.Override
        public double getMax() {
          return max_;
        }
        /**
         * <pre>
         * Max
         * </pre>
         *
         * <code>double Max = 1;</code>
         * @param value The max to set.
         * @return This builder for chaining.
         */
        public Builder setMax(double value) {
          
          max_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Max
         * </pre>
         *
         * <code>double Max = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearMax() {
          
          max_ = 0D;
          onChanged();
          return this;
        }

        private double min_ ;
        /**
         * <pre>
         * Min
         * </pre>
         *
         * <code>double Min = 2;</code>
         * @return The min.
         */
        @java.lang.Override
        public double getMin() {
          return min_;
        }
        /**
         * <pre>
         * Min
         * </pre>
         *
         * <code>double Min = 2;</code>
         * @param value The min to set.
         * @return This builder for chaining.
         */
        public Builder setMin(double value) {
          
          min_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Min
         * </pre>
         *
         * <code>double Min = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMin() {
          
          min_ = 0D;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:Config.BattleParamTemplate.Elementeffectlimit_)
      }

      // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate.Elementeffectlimit_)
      private static final Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_();
      }

      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Elementeffectlimit_>
          PARSER = new com.google.protobuf.AbstractParser<Elementeffectlimit_>() {
        @java.lang.Override
        public Elementeffectlimit_ parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Elementeffectlimit_(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Elementeffectlimit_> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Elementeffectlimit_> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface Soulinterest_OrBuilder extends
        // @@protoc_insertion_point(interface_extends:Config.BattleParamTemplate.Soulinterest_)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * Factor
       * </pre>
       *
       * <code>int32 Factor = 1;</code>
       * @return The factor.
       */
      int getFactor();

      /**
       * <pre>
       * MaxCount
       * </pre>
       *
       * <code>int32 MaxCount = 2;</code>
       * @return The maxCount.
       */
      int getMaxCount();
    }
    /**
     * Protobuf type {@code Config.BattleParamTemplate.Soulinterest_}
     */
    public static final class Soulinterest_ extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:Config.BattleParamTemplate.Soulinterest_)
        Soulinterest_OrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Soulinterest_.newBuilder() to construct.
      private Soulinterest_(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Soulinterest_() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Soulinterest_();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Soulinterest_(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                factor_ = input.readInt32();
                break;
              }
              case 16: {

                maxCount_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Soulinterest__descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Soulinterest__fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.Builder.class);
      }

      public static final int FACTOR_FIELD_NUMBER = 1;
      private int factor_;
      /**
       * <pre>
       * Factor
       * </pre>
       *
       * <code>int32 Factor = 1;</code>
       * @return The factor.
       */
      @java.lang.Override
      public int getFactor() {
        return factor_;
      }

      public static final int MAXCOUNT_FIELD_NUMBER = 2;
      private int maxCount_;
      /**
       * <pre>
       * MaxCount
       * </pre>
       *
       * <code>int32 MaxCount = 2;</code>
       * @return The maxCount.
       */
      @java.lang.Override
      public int getMaxCount() {
        return maxCount_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (factor_ != 0) {
          output.writeInt32(1, factor_);
        }
        if (maxCount_ != 0) {
          output.writeInt32(2, maxCount_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (factor_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, factor_);
        }
        if (maxCount_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, maxCount_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_)) {
          return super.equals(obj);
        }
        Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ other = (Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_) obj;

        if (getFactor()
            != other.getFactor()) return false;
        if (getMaxCount()
            != other.getMaxCount()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + FACTOR_FIELD_NUMBER;
        hash = (53 * hash) + getFactor();
        hash = (37 * hash) + MAXCOUNT_FIELD_NUMBER;
        hash = (53 * hash) + getMaxCount();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Config.BattleParamTemplate.Soulinterest_}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:Config.BattleParamTemplate.Soulinterest_)
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_OrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Soulinterest__descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Soulinterest__fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.Builder.class);
        }

        // Construct using Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          factor_ = 0;

          maxCount_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Soulinterest__descriptor;
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ getDefaultInstanceForType() {
          return Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.getDefaultInstance();
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ build() {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ buildPartial() {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ result = new Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_(this);
          result.factor_ = factor_;
          result.maxCount_ = maxCount_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_) {
            return mergeFrom((Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ other) {
          if (other == Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.getDefaultInstance()) return this;
          if (other.getFactor() != 0) {
            setFactor(other.getFactor());
          }
          if (other.getMaxCount() != 0) {
            setMaxCount(other.getMaxCount());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int factor_ ;
        /**
         * <pre>
         * Factor
         * </pre>
         *
         * <code>int32 Factor = 1;</code>
         * @return The factor.
         */
        @java.lang.Override
        public int getFactor() {
          return factor_;
        }
        /**
         * <pre>
         * Factor
         * </pre>
         *
         * <code>int32 Factor = 1;</code>
         * @param value The factor to set.
         * @return This builder for chaining.
         */
        public Builder setFactor(int value) {
          
          factor_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Factor
         * </pre>
         *
         * <code>int32 Factor = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearFactor() {
          
          factor_ = 0;
          onChanged();
          return this;
        }

        private int maxCount_ ;
        /**
         * <pre>
         * MaxCount
         * </pre>
         *
         * <code>int32 MaxCount = 2;</code>
         * @return The maxCount.
         */
        @java.lang.Override
        public int getMaxCount() {
          return maxCount_;
        }
        /**
         * <pre>
         * MaxCount
         * </pre>
         *
         * <code>int32 MaxCount = 2;</code>
         * @param value The maxCount to set.
         * @return This builder for chaining.
         */
        public Builder setMaxCount(int value) {
          
          maxCount_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * MaxCount
         * </pre>
         *
         * <code>int32 MaxCount = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearMaxCount() {
          
          maxCount_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:Config.BattleParamTemplate.Soulinterest_)
      }

      // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate.Soulinterest_)
      private static final Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_();
      }

      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Soulinterest_>
          PARSER = new com.google.protobuf.AbstractParser<Soulinterest_>() {
        @java.lang.Override
        public Soulinterest_ parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Soulinterest_(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Soulinterest_> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Soulinterest_> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface Dice_OrBuilder extends
        // @@protoc_insertion_point(interface_extends:Config.BattleParamTemplate.Dice_)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * DiceCount
       * </pre>
       *
       * <code>int32 DiceCount = 1;</code>
       * @return The diceCount.
       */
      int getDiceCount();

      /**
       * <pre>
       * DiceValue
       * </pre>
       *
       * <code>int32 DiceValue = 2;</code>
       * @return The diceValue.
       */
      int getDiceValue();
    }
    /**
     * Protobuf type {@code Config.BattleParamTemplate.Dice_}
     */
    public static final class Dice_ extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:Config.BattleParamTemplate.Dice_)
        Dice_OrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Dice_.newBuilder() to construct.
      private Dice_(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Dice_() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Dice_();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Dice_(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {

                diceCount_ = input.readInt32();
                break;
              }
              case 16: {

                diceValue_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Dice__descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Dice__fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.Builder.class);
      }

      public static final int DICECOUNT_FIELD_NUMBER = 1;
      private int diceCount_;
      /**
       * <pre>
       * DiceCount
       * </pre>
       *
       * <code>int32 DiceCount = 1;</code>
       * @return The diceCount.
       */
      @java.lang.Override
      public int getDiceCount() {
        return diceCount_;
      }

      public static final int DICEVALUE_FIELD_NUMBER = 2;
      private int diceValue_;
      /**
       * <pre>
       * DiceValue
       * </pre>
       *
       * <code>int32 DiceValue = 2;</code>
       * @return The diceValue.
       */
      @java.lang.Override
      public int getDiceValue() {
        return diceValue_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (diceCount_ != 0) {
          output.writeInt32(1, diceCount_);
        }
        if (diceValue_ != 0) {
          output.writeInt32(2, diceValue_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (diceCount_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, diceCount_);
        }
        if (diceValue_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, diceValue_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_)) {
          return super.equals(obj);
        }
        Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ other = (Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_) obj;

        if (getDiceCount()
            != other.getDiceCount()) return false;
        if (getDiceValue()
            != other.getDiceValue()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + DICECOUNT_FIELD_NUMBER;
        hash = (53 * hash) + getDiceCount();
        hash = (37 * hash) + DICEVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getDiceValue();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Config.BattleParamTemplate.Dice_}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:Config.BattleParamTemplate.Dice_)
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_OrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Dice__descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Dice__fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.Builder.class);
        }

        // Construct using Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          diceCount_ = 0;

          diceValue_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Dice__descriptor;
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ getDefaultInstanceForType() {
          return Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.getDefaultInstance();
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ build() {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ buildPartial() {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ result = new Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_(this);
          result.diceCount_ = diceCount_;
          result.diceValue_ = diceValue_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_) {
            return mergeFrom((Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ other) {
          if (other == Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.getDefaultInstance()) return this;
          if (other.getDiceCount() != 0) {
            setDiceCount(other.getDiceCount());
          }
          if (other.getDiceValue() != 0) {
            setDiceValue(other.getDiceValue());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int diceCount_ ;
        /**
         * <pre>
         * DiceCount
         * </pre>
         *
         * <code>int32 DiceCount = 1;</code>
         * @return The diceCount.
         */
        @java.lang.Override
        public int getDiceCount() {
          return diceCount_;
        }
        /**
         * <pre>
         * DiceCount
         * </pre>
         *
         * <code>int32 DiceCount = 1;</code>
         * @param value The diceCount to set.
         * @return This builder for chaining.
         */
        public Builder setDiceCount(int value) {
          
          diceCount_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * DiceCount
         * </pre>
         *
         * <code>int32 DiceCount = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearDiceCount() {
          
          diceCount_ = 0;
          onChanged();
          return this;
        }

        private int diceValue_ ;
        /**
         * <pre>
         * DiceValue
         * </pre>
         *
         * <code>int32 DiceValue = 2;</code>
         * @return The diceValue.
         */
        @java.lang.Override
        public int getDiceValue() {
          return diceValue_;
        }
        /**
         * <pre>
         * DiceValue
         * </pre>
         *
         * <code>int32 DiceValue = 2;</code>
         * @param value The diceValue to set.
         * @return This builder for chaining.
         */
        public Builder setDiceValue(int value) {
          
          diceValue_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * DiceValue
         * </pre>
         *
         * <code>int32 DiceValue = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDiceValue() {
          
          diceValue_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:Config.BattleParamTemplate.Dice_)
      }

      // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate.Dice_)
      private static final Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_();
      }

      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Dice_>
          PARSER = new com.google.protobuf.AbstractParser<Dice_>() {
        @java.lang.Override
        public Dice_ parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Dice_(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Dice_> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Dice_> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface Mazevaluefactor_OrBuilder extends
        // @@protoc_insertion_point(interface_extends:Config.BattleParamTemplate.Mazevaluefactor_)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * AtkRate
       * </pre>
       *
       * <code>double AtkRate = 1;</code>
       * @return The atkRate.
       */
      double getAtkRate();

      /**
       * <pre>
       * Factor
       * </pre>
       *
       * <code>int32 Factor = 2;</code>
       * @return The factor.
       */
      int getFactor();
    }
    /**
     * Protobuf type {@code Config.BattleParamTemplate.Mazevaluefactor_}
     */
    public static final class Mazevaluefactor_ extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:Config.BattleParamTemplate.Mazevaluefactor_)
        Mazevaluefactor_OrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Mazevaluefactor_.newBuilder() to construct.
      private Mazevaluefactor_(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Mazevaluefactor_() {
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new Mazevaluefactor_();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Mazevaluefactor_(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {

                atkRate_ = input.readDouble();
                break;
              }
              case 16: {

                factor_ = input.readInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Mazevaluefactor__descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Mazevaluefactor__fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.Builder.class);
      }

      public static final int ATKRATE_FIELD_NUMBER = 1;
      private double atkRate_;
      /**
       * <pre>
       * AtkRate
       * </pre>
       *
       * <code>double AtkRate = 1;</code>
       * @return The atkRate.
       */
      @java.lang.Override
      public double getAtkRate() {
        return atkRate_;
      }

      public static final int FACTOR_FIELD_NUMBER = 2;
      private int factor_;
      /**
       * <pre>
       * Factor
       * </pre>
       *
       * <code>int32 Factor = 2;</code>
       * @return The factor.
       */
      @java.lang.Override
      public int getFactor() {
        return factor_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (atkRate_ != 0D) {
          output.writeDouble(1, atkRate_);
        }
        if (factor_ != 0) {
          output.writeInt32(2, factor_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (atkRate_ != 0D) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, atkRate_);
        }
        if (factor_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, factor_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_)) {
          return super.equals(obj);
        }
        Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ other = (Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_) obj;

        if (java.lang.Double.doubleToLongBits(getAtkRate())
            != java.lang.Double.doubleToLongBits(
                other.getAtkRate())) return false;
        if (getFactor()
            != other.getFactor()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ATKRATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getAtkRate()));
        hash = (37 * hash) + FACTOR_FIELD_NUMBER;
        hash = (53 * hash) + getFactor();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code Config.BattleParamTemplate.Mazevaluefactor_}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:Config.BattleParamTemplate.Mazevaluefactor_)
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_OrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Mazevaluefactor__descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Mazevaluefactor__fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.Builder.class);
        }

        // Construct using Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          atkRate_ = 0D;

          factor_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_Mazevaluefactor__descriptor;
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ getDefaultInstanceForType() {
          return Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.getDefaultInstance();
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ build() {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ buildPartial() {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ result = new Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_(this);
          result.atkRate_ = atkRate_;
          result.factor_ = factor_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_) {
            return mergeFrom((Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ other) {
          if (other == Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.getDefaultInstance()) return this;
          if (other.getAtkRate() != 0D) {
            setAtkRate(other.getAtkRate());
          }
          if (other.getFactor() != 0) {
            setFactor(other.getFactor());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private double atkRate_ ;
        /**
         * <pre>
         * AtkRate
         * </pre>
         *
         * <code>double AtkRate = 1;</code>
         * @return The atkRate.
         */
        @java.lang.Override
        public double getAtkRate() {
          return atkRate_;
        }
        /**
         * <pre>
         * AtkRate
         * </pre>
         *
         * <code>double AtkRate = 1;</code>
         * @param value The atkRate to set.
         * @return This builder for chaining.
         */
        public Builder setAtkRate(double value) {
          
          atkRate_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * AtkRate
         * </pre>
         *
         * <code>double AtkRate = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearAtkRate() {
          
          atkRate_ = 0D;
          onChanged();
          return this;
        }

        private int factor_ ;
        /**
         * <pre>
         * Factor
         * </pre>
         *
         * <code>int32 Factor = 2;</code>
         * @return The factor.
         */
        @java.lang.Override
        public int getFactor() {
          return factor_;
        }
        /**
         * <pre>
         * Factor
         * </pre>
         *
         * <code>int32 Factor = 2;</code>
         * @param value The factor to set.
         * @return This builder for chaining.
         */
        public Builder setFactor(int value) {
          
          factor_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Factor
         * </pre>
         *
         * <code>int32 Factor = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearFactor() {
          
          factor_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:Config.BattleParamTemplate.Mazevaluefactor_)
      }

      // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate.Mazevaluefactor_)
      private static final Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_();
      }

      public static Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Mazevaluefactor_>
          PARSER = new com.google.protobuf.AbstractParser<Mazevaluefactor_>() {
        @java.lang.Override
        public Mazevaluefactor_ parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Mazevaluefactor_(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Mazevaluefactor_> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Mazevaluefactor_> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int BATTLESTARTWAITTIME_FIELD_NUMBER = 1;
    private int battleStartWaitTime_;
    /**
     * <pre>
     * 战斗开始的等待时间
     * </pre>
     *
     * <code>int32 BattleStartWaitTime = 1;</code>
     * @return The battleStartWaitTime.
     */
    @java.lang.Override
    public int getBattleStartWaitTime() {
      return battleStartWaitTime_;
    }

    public static final int BATTLEMAPSIZES_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.IntList battleMapSizes_;
    /**
     * <pre>
     * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
     * </pre>
     *
     * <code>repeated int32 BattleMapSizes = 2;</code>
     * @return A list containing the battleMapSizes.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getBattleMapSizesList() {
      return battleMapSizes_;
    }
    /**
     * <pre>
     * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
     * </pre>
     *
     * <code>repeated int32 BattleMapSizes = 2;</code>
     * @return The count of battleMapSizes.
     */
    public int getBattleMapSizesCount() {
      return battleMapSizes_.size();
    }
    /**
     * <pre>
     * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
     * </pre>
     *
     * <code>repeated int32 BattleMapSizes = 2;</code>
     * @param index The index of the element to return.
     * @return The battleMapSizes at the given index.
     */
    public int getBattleMapSizes(int index) {
      return battleMapSizes_.getInt(index);
    }
    private int battleMapSizesMemoizedSerializedSize = -1;

    public static final int DODGEEFFECTLIMIT_FIELD_NUMBER = 3;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ dodgeEffectLimit_;
    /**
     * <pre>
     * 闪避上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
     * @return Whether the dodgeEffectLimit field is set.
     */
    @java.lang.Override
    public boolean hasDodgeEffectLimit() {
      return dodgeEffectLimit_ != null;
    }
    /**
     * <pre>
     * 闪避上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
     * @return The dodgeEffectLimit.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDodgeEffectLimit() {
      return dodgeEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : dodgeEffectLimit_;
    }
    /**
     * <pre>
     * 闪避上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getDodgeEffectLimitOrBuilder() {
      return getDodgeEffectLimit();
    }

    public static final int CRITEFFECTLIMIT_FIELD_NUMBER = 4;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ critEffectLimit_;
    /**
     * <pre>
     * 暴击上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
     * @return Whether the critEffectLimit field is set.
     */
    @java.lang.Override
    public boolean hasCritEffectLimit() {
      return critEffectLimit_ != null;
    }
    /**
     * <pre>
     * 暴击上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
     * @return The critEffectLimit.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getCritEffectLimit() {
      return critEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : critEffectLimit_;
    }
    /**
     * <pre>
     * 暴击上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getCritEffectLimitOrBuilder() {
      return getCritEffectLimit();
    }

    public static final int CRITDAMEFFECTLIMIT_FIELD_NUMBER = 5;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ critDamEffectLimit_;
    /**
     * <pre>
     * 暴击伤害上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
     * @return Whether the critDamEffectLimit field is set.
     */
    @java.lang.Override
    public boolean hasCritDamEffectLimit() {
      return critDamEffectLimit_ != null;
    }
    /**
     * <pre>
     * 暴击伤害上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
     * @return The critDamEffectLimit.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getCritDamEffectLimit() {
      return critDamEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : critDamEffectLimit_;
    }
    /**
     * <pre>
     * 暴击伤害上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getCritDamEffectLimitOrBuilder() {
      return getCritDamEffectLimit();
    }

    public static final int DEFENSERATEEFFECTLIMIT_FIELD_NUMBER = 6;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ defenseRateEffectLimit_;
    /**
     * <pre>
     * 伤害抗性上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
     * @return Whether the defenseRateEffectLimit field is set.
     */
    @java.lang.Override
    public boolean hasDefenseRateEffectLimit() {
      return defenseRateEffectLimit_ != null;
    }
    /**
     * <pre>
     * 伤害抗性上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
     * @return The defenseRateEffectLimit.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDefenseRateEffectLimit() {
      return defenseRateEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : defenseRateEffectLimit_;
    }
    /**
     * <pre>
     * 伤害抗性上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getDefenseRateEffectLimitOrBuilder() {
      return getDefenseRateEffectLimit();
    }

    public static final int DAMAGEREDUCELIMIT_FIELD_NUMBER = 7;
    private int damageReduceLimit_;
    /**
     * <pre>
     * 伤害减免上限
     * </pre>
     *
     * <code>int32 DamageReduceLimit = 7;</code>
     * @return The damageReduceLimit.
     */
    @java.lang.Override
    public int getDamageReduceLimit() {
      return damageReduceLimit_;
    }

    public static final int COOLDOWNLIMIT_FIELD_NUMBER = 8;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ coolDownLimit_;
    /**
     * <pre>
     * 攻击速度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
     * @return Whether the coolDownLimit field is set.
     */
    @java.lang.Override
    public boolean hasCoolDownLimit() {
      return coolDownLimit_ != null;
    }
    /**
     * <pre>
     * 攻击速度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
     * @return The coolDownLimit.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getCoolDownLimit() {
      return coolDownLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : coolDownLimit_;
    }
    /**
     * <pre>
     * 攻击速度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getCoolDownLimitOrBuilder() {
      return getCoolDownLimit();
    }

    public static final int ELEMENTEFFECTLIMIT_FIELD_NUMBER = 9;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ elementEffectLimit_;
    /**
     * <pre>
     * 克制强度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
     * @return Whether the elementEffectLimit field is set.
     */
    @java.lang.Override
    public boolean hasElementEffectLimit() {
      return elementEffectLimit_ != null;
    }
    /**
     * <pre>
     * 克制强度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
     * @return The elementEffectLimit.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ getElementEffectLimit() {
      return elementEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.getDefaultInstance() : elementEffectLimit_;
    }
    /**
     * <pre>
     * 克制强度上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_OrBuilder getElementEffectLimitOrBuilder() {
      return getElementEffectLimit();
    }

    public static final int ELEMENTATTACKBASE_FIELD_NUMBER = 10;
    private double elementAttackBase_;
    /**
     * <pre>
     * 攻击基础克制强度
     * </pre>
     *
     * <code>double ElementAttackBase = 10;</code>
     * @return The elementAttackBase.
     */
    @java.lang.Override
    public double getElementAttackBase() {
      return elementAttackBase_;
    }

    public static final int ELEMENTDEFENSEBASE_FIELD_NUMBER = 11;
    private double elementDefenseBase_;
    /**
     * <pre>
     * 防御基础克制强度
     * </pre>
     *
     * <code>double ElementDefenseBase = 11;</code>
     * @return The elementDefenseBase.
     */
    @java.lang.Override
    public double getElementDefenseBase() {
      return elementDefenseBase_;
    }

    public static final int ELEMENTEFFECTBASE_FIELD_NUMBER = 12;
    private int elementEffectBase_;
    /**
     * <pre>
     * 默认克制强度
     * </pre>
     *
     * <code>int32 ElementEffectBase = 12;</code>
     * @return The elementEffectBase.
     */
    @java.lang.Override
    public int getElementEffectBase() {
      return elementEffectBase_;
    }

    public static final int DAMAGECORRECTIONRANGE_FIELD_NUMBER = 13;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ damageCorrectionRange_;
    /**
     * <pre>
     * 伤害随机范围
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
     * @return Whether the damageCorrectionRange field is set.
     */
    @java.lang.Override
    public boolean hasDamageCorrectionRange() {
      return damageCorrectionRange_ != null;
    }
    /**
     * <pre>
     * 伤害随机范围
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
     * @return The damageCorrectionRange.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDamageCorrectionRange() {
      return damageCorrectionRange_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : damageCorrectionRange_;
    }
    /**
     * <pre>
     * 伤害随机范围
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getDamageCorrectionRangeOrBuilder() {
      return getDamageCorrectionRange();
    }

    public static final int DODGECORRECTION_FIELD_NUMBER = 14;
    private double dodgeCorrection_;
    /**
     * <pre>
     * 闪避修正系数
     * </pre>
     *
     * <code>double DodgeCorrection = 14;</code>
     * @return The dodgeCorrection.
     */
    @java.lang.Override
    public double getDodgeCorrection() {
      return dodgeCorrection_;
    }

    public static final int CRITCORRECTION_FIELD_NUMBER = 15;
    private double critCorrection_;
    /**
     * <pre>
     * 暴击修正系数
     * </pre>
     *
     * <code>double CritCorrection = 15;</code>
     * @return The critCorrection.
     */
    @java.lang.Override
    public double getCritCorrection() {
      return critCorrection_;
    }

    public static final int BLCKEFFECT_FIELD_NUMBER = 16;
    private int blckEffect_;
    /**
     * <pre>
     * 格档效果
     * </pre>
     *
     * <code>int32 BlckEffect = 16;</code>
     * @return The blckEffect.
     */
    @java.lang.Override
    public int getBlckEffect() {
      return blckEffect_;
    }

    public static final int BLOCKEFFECTLIMIT_FIELD_NUMBER = 17;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ blockEffectLimit_;
    /**
     * <pre>
     * 格挡率上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
     * @return Whether the blockEffectLimit field is set.
     */
    @java.lang.Override
    public boolean hasBlockEffectLimit() {
      return blockEffectLimit_ != null;
    }
    /**
     * <pre>
     * 格挡率上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
     * @return The blockEffectLimit.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getBlockEffectLimit() {
      return blockEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : blockEffectLimit_;
    }
    /**
     * <pre>
     * 格挡率上下限
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getBlockEffectLimitOrBuilder() {
      return getBlockEffectLimit();
    }

    public static final int HEROMAXENERGYVALUE_FIELD_NUMBER = 18;
    private int heroMaxEnergyValue_;
    /**
     * <pre>
     * 英雄能量值上限
     * </pre>
     *
     * <code>int32 HeroMaxEnergyValue = 18;</code>
     * @return The heroMaxEnergyValue.
     */
    @java.lang.Override
    public int getHeroMaxEnergyValue() {
      return heroMaxEnergyValue_;
    }

    public static final int HEROMAXENERGYNUM_FIELD_NUMBER = 19;
    private int heroMaxEnergyNum_;
    /**
     * <pre>
     * 英雄能量技累计次数上限
     * </pre>
     *
     * <code>int32 HeroMaxEnergyNum = 19;</code>
     * @return The heroMaxEnergyNum.
     */
    @java.lang.Override
    public int getHeroMaxEnergyNum() {
      return heroMaxEnergyNum_;
    }

    public static final int LORDMAXENERGY_FIELD_NUMBER = 20;
    private int lordMaxEnergy_;
    /**
     * <pre>
     * 小姐姐能量上限
     * </pre>
     *
     * <code>int32 LordMaxEnergy = 20;</code>
     * @return The lordMaxEnergy.
     */
    @java.lang.Override
    public int getLordMaxEnergy() {
      return lordMaxEnergy_;
    }

    public static final int MAXATTACKSPEED_FIELD_NUMBER = 21;
    private double maxAttackSpeed_;
    /**
     * <pre>
     * 最大攻击速度缩放比例。
     * </pre>
     *
     * <code>double MaxAttackSpeed = 21;</code>
     * @return The maxAttackSpeed.
     */
    @java.lang.Override
    public double getMaxAttackSpeed() {
      return maxAttackSpeed_;
    }

    public static final int HEROSKILLCOUNT_FIELD_NUMBER = 22;
    private int heroSkillCount_;
    /**
     * <pre>
     * 英雄技能存储上限
     * </pre>
     *
     * <code>int32 HeroSkillCount = 22;</code>
     * @return The heroSkillCount.
     */
    @java.lang.Override
    public int getHeroSkillCount() {
      return heroSkillCount_;
    }

    public static final int MONSTERWALKMODETIME_FIELD_NUMBER = 23;
    private int monsterWalkModeTime_;
    /**
     * <pre>
     * 怪物行走入场时间(毫秒）
     * </pre>
     *
     * <code>int32 MonsterWalkModeTime = 23;</code>
     * @return The monsterWalkModeTime.
     */
    @java.lang.Override
    public int getMonsterWalkModeTime() {
      return monsterWalkModeTime_;
    }

    public static final int MONSTERDROPMODETIME_FIELD_NUMBER = 24;
    private int monsterDropModeTime_;
    /**
     * <pre>
     * 怪物掉落入场时间(毫秒）
     * </pre>
     *
     * <code>int32 MonsterDropModeTime = 24;</code>
     * @return The monsterDropModeTime.
     */
    @java.lang.Override
    public int getMonsterDropModeTime() {
      return monsterDropModeTime_;
    }

    public static final int BATTLEMAPGRID_FIELD_NUMBER = 25;
    private Position2IntOuterClass.Position2Int battleMapGrid_;
    /**
     * <pre>
     * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
     * </pre>
     *
     * <code>.Position2Int BattleMapGrid = 25;</code>
     * @return Whether the battleMapGrid field is set.
     */
    @java.lang.Override
    public boolean hasBattleMapGrid() {
      return battleMapGrid_ != null;
    }
    /**
     * <pre>
     * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
     * </pre>
     *
     * <code>.Position2Int BattleMapGrid = 25;</code>
     * @return The battleMapGrid.
     */
    @java.lang.Override
    public Position2IntOuterClass.Position2Int getBattleMapGrid() {
      return battleMapGrid_ == null ? Position2IntOuterClass.Position2Int.getDefaultInstance() : battleMapGrid_;
    }
    /**
     * <pre>
     * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
     * </pre>
     *
     * <code>.Position2Int BattleMapGrid = 25;</code>
     */
    @java.lang.Override
    public Position2IntOuterClass.Position2IntOrBuilder getBattleMapGridOrBuilder() {
      return getBattleMapGrid();
    }

    public static final int GRIDSIZE_FIELD_NUMBER = 26;
    private int gridSize_;
    /**
     * <pre>
     * 格子尺寸，正方体直径
     * </pre>
     *
     * <code>int32 GridSize = 26;</code>
     * @return The gridSize.
     */
    @java.lang.Override
    public int getGridSize() {
      return gridSize_;
    }

    public static final int LORDGRID_FIELD_NUMBER = 27;
    private int lordGrid_;
    /**
     * <pre>
     * 小姐姐坐标
     * </pre>
     *
     * <code>int32 LordGrid = 27;</code>
     * @return The lordGrid.
     */
    @java.lang.Override
    public int getLordGrid() {
      return lordGrid_;
    }

    public static final int SKILLMOVETIME_FIELD_NUMBER = 28;
    private int skillMoveTime_;
    /**
     * <pre>
     * 必杀位移时间（毫秒）
     * </pre>
     *
     * <code>int32 SkillMoveTime = 28;</code>
     * @return The skillMoveTime.
     */
    @java.lang.Override
    public int getSkillMoveTime() {
      return skillMoveTime_;
    }

    public static final int SKILLFLASHTIME_FIELD_NUMBER = 29;
    private int skillFlashTime_;
    /**
     * <pre>
     * 必杀叮特效时间（毫秒）
     * </pre>
     *
     * <code>int32 SkillFlashTime = 29;</code>
     * @return The skillFlashTime.
     */
    @java.lang.Override
    public int getSkillFlashTime() {
      return skillFlashTime_;
    }

    public static final int MONSTERDROPRANGE_FIELD_NUMBER = 30;
    private int monsterDropRange_;
    /**
     * <pre>
     * 击杀魔物后掉落物掉落范围（以魔物的站立坐标为圆心）
     * </pre>
     *
     * <code>int32 MonsterDropRange = 30;</code>
     * @return The monsterDropRange.
     */
    @java.lang.Override
    public int getMonsterDropRange() {
      return monsterDropRange_;
    }

    public static final int OFFSETDISTANCE_FIELD_NUMBER = 31;
    private int offsetDistance_;
    /**
     * <pre>
     * 掉落物反向偏移距离量
     * </pre>
     *
     * <code>int32 OffsetDistance = 31;</code>
     * @return The offsetDistance.
     */
    @java.lang.Override
    public int getOffsetDistance() {
      return offsetDistance_;
    }

    public static final int DROPITEMSTAYTIME_FIELD_NUMBER = 32;
    private int dropItemStayTime_;
    /**
     * <pre>
     * 掉落物品停留显示时间，单位是毫秒
     * </pre>
     *
     * <code>int32 DropItemStayTime = 32;</code>
     * @return The dropItemStayTime.
     */
    @java.lang.Override
    public int getDropItemStayTime() {
      return dropItemStayTime_;
    }

    public static final int BANNERSTAYMAXTIME_FIELD_NUMBER = 33;
    private int bannerStayMaxtime_;
    /**
     * <pre>
     * 获取记录面板停留最大时间，单位是毫秒
     * </pre>
     *
     * <code>int32 BannerStayMaxtime = 33;</code>
     * @return The bannerStayMaxtime.
     */
    @java.lang.Override
    public int getBannerStayMaxtime() {
      return bannerStayMaxtime_;
    }

    public static final int LORDMOVESPEED_FIELD_NUMBER = 34;
    private int lordMoveSpeed_;
    /**
     * <pre>
     * 小姐姐移动速度
     * </pre>
     *
     * <code>int32 LordMoveSpeed = 34;</code>
     * @return The lordMoveSpeed.
     */
    @java.lang.Override
    public int getLordMoveSpeed() {
      return lordMoveSpeed_;
    }

    public static final int DROPITEMRANGE_FIELD_NUMBER = 35;
    private int dropItemRange_;
    /**
     * <pre>
     * 物品掉落范围，半径
     * </pre>
     *
     * <code>int32 DropItemRange = 35;</code>
     * @return The dropItemRange.
     */
    @java.lang.Override
    public int getDropItemRange() {
      return dropItemRange_;
    }

    public static final int MAXROOM_FIELD_NUMBER = 36;
    private int maxRoom_;
    /**
     * <pre>
     * 副本每列最大房间数
     * </pre>
     *
     * <code>int32 MaxRoom = 36;</code>
     * @return The maxRoom.
     */
    @java.lang.Override
    public int getMaxRoom() {
      return maxRoom_;
    }

    public static final int LORDHEALTHFACTOR_FIELD_NUMBER = 37;
    private int lordHealthFactor_;
    /**
     * <pre>
     * 每一点领主生命值，回复英雄的百分比生命值。此值为万分比。
     * </pre>
     *
     * <code>int32 LordHealthFactor = 37;</code>
     * @return The lordHealthFactor.
     */
    @java.lang.Override
    public int getLordHealthFactor() {
      return lordHealthFactor_;
    }

    public static final int RUNEREFRESHPRICES_FIELD_NUMBER = 38;
    private com.google.protobuf.Internal.IntList runeRefreshPrices_;
    /**
     * <pre>
     * RL中炼成阵刷新消耗规则
     * </pre>
     *
     * <code>repeated int32 RuneRefreshPrices = 38;</code>
     * @return A list containing the runeRefreshPrices.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getRuneRefreshPricesList() {
      return runeRefreshPrices_;
    }
    /**
     * <pre>
     * RL中炼成阵刷新消耗规则
     * </pre>
     *
     * <code>repeated int32 RuneRefreshPrices = 38;</code>
     * @return The count of runeRefreshPrices.
     */
    public int getRuneRefreshPricesCount() {
      return runeRefreshPrices_.size();
    }
    /**
     * <pre>
     * RL中炼成阵刷新消耗规则
     * </pre>
     *
     * <code>repeated int32 RuneRefreshPrices = 38;</code>
     * @param index The index of the element to return.
     * @return The runeRefreshPrices at the given index.
     */
    public int getRuneRefreshPrices(int index) {
      return runeRefreshPrices_.getInt(index);
    }
    private int runeRefreshPricesMemoizedSerializedSize = -1;

    public static final int HEROMAXRUNECOUNT_FIELD_NUMBER = 39;
    private int heroMaxRuneCount_;
    /**
     * <pre>
     * 英雄最多可携带的符文数量
     * </pre>
     *
     * <code>int32 HeroMaxRuneCount = 39;</code>
     * @return The heroMaxRuneCount.
     */
    @java.lang.Override
    public int getHeroMaxRuneCount() {
      return heroMaxRuneCount_;
    }

    public static final int MAXSOULSTAMPDEMAND_FIELD_NUMBER = 40;
    private int maxSoulStampDemand_;
    /**
     * <pre>
     * 最大炼成所需魂印数
     * </pre>
     *
     * <code>int32 MaxSoulStampDemand = 40;</code>
     * @return The maxSoulStampDemand.
     */
    @java.lang.Override
    public int getMaxSoulStampDemand() {
      return maxSoulStampDemand_;
    }

    public static final int SOULSTAMPDEMANDFACTOR_FIELD_NUMBER = 41;
    private double soulStampDemandFactor_;
    /**
     * <pre>
     * 炼成阵所需魂印数量，总等级*该系数，向下取整，即为每次炼成所需的魂印数
     * </pre>
     *
     * <code>double SoulStampDemandFactor = 41;</code>
     * @return The soulStampDemandFactor.
     */
    @java.lang.Override
    public double getSoulStampDemandFactor() {
      return soulStampDemandFactor_;
    }

    public static final int BAGCAPACITY_FIELD_NUMBER = 42;
    private int bagCapacity_;
    /**
     * <pre>
     * 战斗中，装备背包和魂印背包的数量上限。
     * </pre>
     *
     * <code>int32 BagCapacity = 42;</code>
     * @return The bagCapacity.
     */
    @java.lang.Override
    public int getBagCapacity() {
      return bagCapacity_;
    }

    public static final int RESOLVEFACTOR_FIELD_NUMBER = 43;
    private int resolveFactor_;
    /**
     * <pre>
     * 战斗中，分解装备获得的魔魂。(万分比，向下取整)
     * </pre>
     *
     * <code>int32 ResolveFactor = 43;</code>
     * @return The resolveFactor.
     */
    @java.lang.Override
    public int getResolveFactor() {
      return resolveFactor_;
    }

    public static final int SKILLFADEOUTTIME_FIELD_NUMBER = 44;
    private int skillFadeOutTime_;
    /**
     * <pre>
     * 战斗中，释放必杀技后，淡出的时间，单位毫秒
     * </pre>
     *
     * <code>int32 SkillFadeOutTime = 44;</code>
     * @return The skillFadeOutTime.
     */
    @java.lang.Override
    public int getSkillFadeOutTime() {
      return skillFadeOutTime_;
    }

    public static final int PVPENEMYLORDGRID_FIELD_NUMBER = 45;
    private int pvpEnemyLordGrid_;
    /**
     * <pre>
     * 对手小姐姐坐标
     * </pre>
     *
     * <code>int32 PvpEnemyLordGrid = 45;</code>
     * @return The pvpEnemyLordGrid.
     */
    @java.lang.Override
    public int getPvpEnemyLordGrid() {
      return pvpEnemyLordGrid_;
    }

    public static final int PVPSCENEBUFFS_FIELD_NUMBER = 46;
    private com.google.protobuf.Internal.IntList pvpSceneBuffs_;
    /**
     * <pre>
     * PVP战斗全场增强Buff，需填入BuffId
     * </pre>
     *
     * <code>repeated int32 PvpSceneBuffs = 46;</code>
     * @return A list containing the pvpSceneBuffs.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPvpSceneBuffsList() {
      return pvpSceneBuffs_;
    }
    /**
     * <pre>
     * PVP战斗全场增强Buff，需填入BuffId
     * </pre>
     *
     * <code>repeated int32 PvpSceneBuffs = 46;</code>
     * @return The count of pvpSceneBuffs.
     */
    public int getPvpSceneBuffsCount() {
      return pvpSceneBuffs_.size();
    }
    /**
     * <pre>
     * PVP战斗全场增强Buff，需填入BuffId
     * </pre>
     *
     * <code>repeated int32 PvpSceneBuffs = 46;</code>
     * @param index The index of the element to return.
     * @return The pvpSceneBuffs at the given index.
     */
    public int getPvpSceneBuffs(int index) {
      return pvpSceneBuffs_.getInt(index);
    }
    private int pvpSceneBuffsMemoizedSerializedSize = -1;

    public static final int PVPFIRSTHANDWAITING_FIELD_NUMBER = 47;
    private int pvpFirstHandWaiting_;
    /**
     * <pre>
     * 先手技能等待时间，单位是秒
     * </pre>
     *
     * <code>int32 PvpFirstHandWaiting = 47;</code>
     * @return The pvpFirstHandWaiting.
     */
    @java.lang.Override
    public int getPvpFirstHandWaiting() {
      return pvpFirstHandWaiting_;
    }

    public static final int PVPSECONDHANDWAITING_FIELD_NUMBER = 48;
    private int pvpSecondHandWaiting_;
    /**
     * <pre>
     * 后手技能等待时间，单位是秒
     * </pre>
     *
     * <code>int32 PvpSecondHandWaiting = 48;</code>
     * @return The pvpSecondHandWaiting.
     */
    @java.lang.Override
    public int getPvpSecondHandWaiting() {
      return pvpSecondHandWaiting_;
    }

    public static final int PVPSTARTCOUNTDOWN_FIELD_NUMBER = 49;
    private int pvpStartCountDown_;
    /**
     * <pre>
     * 竞技战斗开始前倒计时，单位是秒
     * </pre>
     *
     * <code>int32 PvpStartCountDown = 49;</code>
     * @return The pvpStartCountDown.
     */
    @java.lang.Override
    public int getPvpStartCountDown() {
      return pvpStartCountDown_;
    }

    public static final int PVPOVERCOUNTDOWN_FIELD_NUMBER = 50;
    private int pvpOverCountDown_;
    /**
     * <pre>
     * 竞技战斗结束前倒计时，单位是秒
     * </pre>
     *
     * <code>int32 PvpOverCountDown = 50;</code>
     * @return The pvpOverCountDown.
     */
    @java.lang.Override
    public int getPvpOverCountDown() {
      return pvpOverCountDown_;
    }

    public static final int SOULINTEREST_FIELD_NUMBER = 51;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ soulInterest_;
    /**
     * <pre>
     * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
     * @return Whether the soulInterest field is set.
     */
    @java.lang.Override
    public boolean hasSoulInterest() {
      return soulInterest_ != null;
    }
    /**
     * <pre>
     * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
     * @return The soulInterest.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ getSoulInterest() {
      return soulInterest_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.getDefaultInstance() : soulInterest_;
    }
    /**
     * <pre>
     * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_OrBuilder getSoulInterestOrBuilder() {
      return getSoulInterest();
    }

    public static final int BATTLEHERODIEVALUE_FIELD_NUMBER = 52;
    private int battleHeroDieValue_;
    /**
     * <pre>
     * 战斗最多死亡人数（含）
     * </pre>
     *
     * <code>int32 BattleHeroDieValue = 52;</code>
     * @return The battleHeroDieValue.
     */
    @java.lang.Override
    public int getBattleHeroDieValue() {
      return battleHeroDieValue_;
    }

    public static final int BATTLEMAXTIMEVALUE_FIELD_NUMBER = 53;
    private int battleMaxTimeValue_;
    /**
     * <pre>
     * 战斗最大时间（含）
     * </pre>
     *
     * <code>int32 BattleMaxTimeValue = 53;</code>
     * @return The battleMaxTimeValue.
     */
    @java.lang.Override
    public int getBattleMaxTimeValue() {
      return battleMaxTimeValue_;
    }

    public static final int BATTLEJUMPTIME_FIELD_NUMBER = 54;
    private int battleJumpTime_;
    /**
     * <pre>
     * 战斗移动跳跃时间（毫秒）
     * </pre>
     *
     * <code>int32 BattleJumpTime = 54;</code>
     * @return The battleJumpTime.
     */
    @java.lang.Override
    public int getBattleJumpTime() {
      return battleJumpTime_;
    }

    public static final int PROFESSIONUPGRADECOUNT_FIELD_NUMBER = 55;
    private int professionUpgradeCount_;
    /**
     * <pre>
     * 一个上古残页房间，同时展示的商品数量。
     * </pre>
     *
     * <code>int32 ProfessionUpgradeCount = 55;</code>
     * @return The professionUpgradeCount.
     */
    @java.lang.Override
    public int getProfessionUpgradeCount() {
      return professionUpgradeCount_;
    }

    public static final int HANDCARDLIMIT_FIELD_NUMBER = 56;
    private int handCardLimit_;
    /**
     * <pre>
     * 玩家战斗中手牌上限
     * </pre>
     *
     * <code>int32 HandCardLimit = 56;</code>
     * @return The handCardLimit.
     */
    @java.lang.Override
    public int getHandCardLimit() {
      return handCardLimit_;
    }

    public static final int FORGETCOSTS_FIELD_NUMBER = 57;
    private com.google.protobuf.Internal.IntList forgetCosts_;
    /**
     * <pre>
     * 遗忘操作消耗
     * </pre>
     *
     * <code>repeated int32 ForgetCosts = 57;</code>
     * @return A list containing the forgetCosts.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getForgetCostsList() {
      return forgetCosts_;
    }
    /**
     * <pre>
     * 遗忘操作消耗
     * </pre>
     *
     * <code>repeated int32 ForgetCosts = 57;</code>
     * @return The count of forgetCosts.
     */
    public int getForgetCostsCount() {
      return forgetCosts_.size();
    }
    /**
     * <pre>
     * 遗忘操作消耗
     * </pre>
     *
     * <code>repeated int32 ForgetCosts = 57;</code>
     * @param index The index of the element to return.
     * @return The forgetCosts at the given index.
     */
    public int getForgetCosts(int index) {
      return forgetCosts_.getInt(index);
    }
    private int forgetCostsMemoizedSerializedSize = -1;

    public static final int PRAYCOSTS_FIELD_NUMBER = 58;
    private com.google.protobuf.Internal.IntList prayCosts_;
    /**
     * <pre>
     * 祈祷操作消耗
     * </pre>
     *
     * <code>repeated int32 PrayCosts = 58;</code>
     * @return A list containing the prayCosts.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPrayCostsList() {
      return prayCosts_;
    }
    /**
     * <pre>
     * 祈祷操作消耗
     * </pre>
     *
     * <code>repeated int32 PrayCosts = 58;</code>
     * @return The count of prayCosts.
     */
    public int getPrayCostsCount() {
      return prayCosts_.size();
    }
    /**
     * <pre>
     * 祈祷操作消耗
     * </pre>
     *
     * <code>repeated int32 PrayCosts = 58;</code>
     * @param index The index of the element to return.
     * @return The prayCosts at the given index.
     */
    public int getPrayCosts(int index) {
      return prayCosts_.getInt(index);
    }
    private int prayCostsMemoizedSerializedSize = -1;

    public static final int CARDLEVELUPNEEDNUM_FIELD_NUMBER = 59;
    private int cardLevelUpNeedNum_;
    /**
     * <pre>
     * X张同卡升级为1张高级卡，“X”
     * </pre>
     *
     * <code>int32 CardLevelUpNeedNum = 59;</code>
     * @return The cardLevelUpNeedNum.
     */
    @java.lang.Override
    public int getCardLevelUpNeedNum() {
      return cardLevelUpNeedNum_;
    }

    public static final int CARDUSETODRAWUNIQUE_FIELD_NUMBER = 60;
    private int cardUseToDrawUnique_;
    /**
     * <pre>
     * 每使用5张基础卡，抽1张必杀卡（暂时屏蔽）
     * </pre>
     *
     * <code>int32 CardUseToDrawUnique = 60;</code>
     * @return The cardUseToDrawUnique.
     */
    @java.lang.Override
    public int getCardUseToDrawUnique() {
      return cardUseToDrawUnique_;
    }

    public static final int ORIGINALHANDCARDLIMIT_FIELD_NUMBER = 61;
    private int originalHandCardLimit_;
    /**
     * <pre>
     * 玩家战斗中初始手牌上限
     * </pre>
     *
     * <code>int32 OriginalHandCardLimit = 61;</code>
     * @return The originalHandCardLimit.
     */
    @java.lang.Override
    public int getOriginalHandCardLimit() {
      return originalHandCardLimit_;
    }

    public static final int UNIQUESKILLCARDLIMITCOUNTOT_FIELD_NUMBER = 62;
    private int uniqueSkillCardLimitCountOT_;
    /**
     * <pre>
     * 每轮发牌必杀卡数量上限
     * </pre>
     *
     * <code>int32 UniqueSkillCardLimitCountOT = 62;</code>
     * @return The uniqueSkillCardLimitCountOT.
     */
    @java.lang.Override
    public int getUniqueSkillCardLimitCountOT() {
      return uniqueSkillCardLimitCountOT_;
    }

    public static final int DROPCOEFFICIENTINELITEROOM_FIELD_NUMBER = 63;
    private int dropCoefficientInEliteRoom_;
    /**
     * <pre>
     * 精英房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
     * </pre>
     *
     * <code>int32 DropCoefficientInEliteRoom = 63;</code>
     * @return The dropCoefficientInEliteRoom.
     */
    @java.lang.Override
    public int getDropCoefficientInEliteRoom() {
      return dropCoefficientInEliteRoom_;
    }

    public static final int DROPCOEFFICIENTINBOSSROOM_FIELD_NUMBER = 64;
    private int dropCoefficientInBossRoom_;
    /**
     * <pre>
     * BOSS房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
     * </pre>
     *
     * <code>int32 DropCoefficientInBossRoom = 64;</code>
     * @return The dropCoefficientInBossRoom.
     */
    @java.lang.Override
    public int getDropCoefficientInBossRoom() {
      return dropCoefficientInBossRoom_;
    }

    public static final int HEROREBORNTIME_FIELD_NUMBER = 65;
    private int heroRebornTime_;
    /**
     * <pre>
     * 英雄死亡后，复活的时间，单位毫秒，用于在多层模式中
     * </pre>
     *
     * <code>int32 HeroRebornTime = 65;</code>
     * @return The heroRebornTime.
     */
    @java.lang.Override
    public int getHeroRebornTime() {
      return heroRebornTime_;
    }

    public static final int HEROREBORNHPCOSTFACTOR_FIELD_NUMBER = 66;
    private int heroRebornHpCostFactor_;
    /**
     * <pre>
     * 英雄死亡后，复活需要消耗的领主血量系数(仅限于迷宫中)，最终扣血量=英雄星级*该系数
     * </pre>
     *
     * <code>int32 HeroRebornHpCostFactor = 66;</code>
     * @return The heroRebornHpCostFactor.
     */
    @java.lang.Override
    public int getHeroRebornHpCostFactor() {
      return heroRebornHpCostFactor_;
    }

    public static final int ORIGINALHANDCARDNUM_FIELD_NUMBER = 67;
    private int originalHandCardNum_;
    /**
     * <pre>
     * 玩家战斗中初始发牌数量（受HandCardLimit限制）
     * </pre>
     *
     * <code>int32 OriginalHandCardNum = 67;</code>
     * @return The originalHandCardNum.
     */
    @java.lang.Override
    public int getOriginalHandCardNum() {
      return originalHandCardNum_;
    }

    public static final int CHALLENGEFIRSTHANDCHANCE_FIELD_NUMBER = 68;
    private int challengeFirstHandChance_;
    /**
     * <pre>
     * 挑战者先手概率（万分比）
     * </pre>
     *
     * <code>int32 ChallengeFirstHandChance = 68;</code>
     * @return The challengeFirstHandChance.
     */
    @java.lang.Override
    public int getChallengeFirstHandChance() {
      return challengeFirstHandChance_;
    }

    public static final int PVPCHALLENGETIME_FIELD_NUMBER = 69;
    private int pvpChallengeTime_;
    /**
     * <pre>
     * 天梯对战总时长
     * </pre>
     *
     * <code>int32 PvpChallengeTime = 69;</code>
     * @return The pvpChallengeTime.
     */
    @java.lang.Override
    public int getPvpChallengeTime() {
      return pvpChallengeTime_;
    }

    public static final int FIRSTHANDENERGYCARDCOUNT_FIELD_NUMBER = 70;
    private int firstHandEnergyCardCount_;
    /**
     * <pre>
     * 天梯先手首次发牌必杀卡牌数量
     * </pre>
     *
     * <code>int32 FirstHandEnergyCardCount = 70;</code>
     * @return The firstHandEnergyCardCount.
     */
    @java.lang.Override
    public int getFirstHandEnergyCardCount() {
      return firstHandEnergyCardCount_;
    }

    public static final int SECONDTHANDENERGYCARDCOUNT_FIELD_NUMBER = 71;
    private int secondtHandEnergyCardCount_;
    /**
     * <pre>
     * 天梯后手首次发牌必杀卡牌数量
     * </pre>
     *
     * <code>int32 SecondtHandEnergyCardCount = 71;</code>
     * @return The secondtHandEnergyCardCount.
     */
    @java.lang.Override
    public int getSecondtHandEnergyCardCount() {
      return secondtHandEnergyCardCount_;
    }

    public static final int PVPFIRSTHANDTIME_FIELD_NUMBER = 72;
    private int pvpFirstHandTime_;
    /**
     * <pre>
     * 先手等待出手时间（毫秒）
     * </pre>
     *
     * <code>int32 PvpFirstHandTime = 72;</code>
     * @return The pvpFirstHandTime.
     */
    @java.lang.Override
    public int getPvpFirstHandTime() {
      return pvpFirstHandTime_;
    }

    public static final int PVPSECONDHANDTIME_FIELD_NUMBER = 73;
    private int pvpSecondHandTime_;
    /**
     * <pre>
     * 后手等待出手时间（毫秒）
     * </pre>
     *
     * <code>int32 PvpSecondHandTime = 73;</code>
     * @return The pvpSecondHandTime.
     */
    @java.lang.Override
    public int getPvpSecondHandTime() {
      return pvpSecondHandTime_;
    }

    public static final int LORDCARDSPACING_FIELD_NUMBER = 74;
    private int lordCardSpacing_;
    /**
     * <pre>
     * 领主卡牌使用间隔时间（毫秒）
     * </pre>
     *
     * <code>int32 LordCardSpacing = 74;</code>
     * @return The lordCardSpacing.
     */
    @java.lang.Override
    public int getLordCardSpacing() {
      return lordCardSpacing_;
    }

    public static final int ENERGYCARDCHECKUP_FIELD_NUMBER = 75;
    private int energyCardCheckUp_;
    /**
     * <pre>
     * 必杀卡牌检查使用间隔（毫秒）
     * </pre>
     *
     * <code>int32 EnergyCardCheckUp = 75;</code>
     * @return The energyCardCheckUp.
     */
    @java.lang.Override
    public int getEnergyCardCheckUp() {
      return energyCardCheckUp_;
    }

    public static final int PVPORIGINALHANDCARDNUM_FIELD_NUMBER = 76;
    private int pvpOriginalHandCardNum_;
    /**
     * <pre>
     * PVP战斗玩家战斗中初始发牌数量（受HandCardLimit限制）
     * </pre>
     *
     * <code>int32 PvpOriginalHandCardNum = 76;</code>
     * @return The pvpOriginalHandCardNum.
     */
    @java.lang.Override
    public int getPvpOriginalHandCardNum() {
      return pvpOriginalHandCardNum_;
    }

    public static final int BATTLESPEEDUPRATES_FIELD_NUMBER = 77;
    private com.google.protobuf.Internal.DoubleList battleSpeedUpRates_;
    /**
     * <pre>
     * 所有战斗2倍速按钮实际读取值
     * </pre>
     *
     * <code>repeated double BattleSpeedUpRates = 77;</code>
     * @return A list containing the battleSpeedUpRates.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBattleSpeedUpRatesList() {
      return battleSpeedUpRates_;
    }
    /**
     * <pre>
     * 所有战斗2倍速按钮实际读取值
     * </pre>
     *
     * <code>repeated double BattleSpeedUpRates = 77;</code>
     * @return The count of battleSpeedUpRates.
     */
    public int getBattleSpeedUpRatesCount() {
      return battleSpeedUpRates_.size();
    }
    /**
     * <pre>
     * 所有战斗2倍速按钮实际读取值
     * </pre>
     *
     * <code>repeated double BattleSpeedUpRates = 77;</code>
     * @param index The index of the element to return.
     * @return The battleSpeedUpRates at the given index.
     */
    public double getBattleSpeedUpRates(int index) {
      return battleSpeedUpRates_.getDouble(index);
    }
    private int battleSpeedUpRatesMemoizedSerializedSize = -1;

    public static final int HANGUPINTERVALTIME_FIELD_NUMBER = 78;
    private int hangUpIntervalTime_;
    /**
     * <pre>
     * 挂机流程间隔时间
     * </pre>
     *
     * <code>int32 HangUpIntervalTime = 78;</code>
     * @return The hangUpIntervalTime.
     */
    @java.lang.Override
    public int getHangUpIntervalTime() {
      return hangUpIntervalTime_;
    }

    public static final int NEXTWAVEAPPEARINTERVAL_FIELD_NUMBER = 79;
    private int nextWaveAppearInterval_;
    /**
     * <pre>
     * 上一批次的怪物全部击杀完后，下一批次的怪物出现的时间间隔，单位(毫秒)
     * </pre>
     *
     * <code>int32 NextWaveAppearInterval = 79;</code>
     * @return The nextWaveAppearInterval.
     */
    @java.lang.Override
    public int getNextWaveAppearInterval() {
      return nextWaveAppearInterval_;
    }

    public static final int DICE_FIELD_NUMBER = 80;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ dice_;
    /**
     * <pre>
     * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
     * @return Whether the dice field is set.
     */
    @java.lang.Override
    public boolean hasDice() {
      return dice_ != null;
    }
    /**
     * <pre>
     * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
     * @return The dice.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ getDice() {
      return dice_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.getDefaultInstance() : dice_;
    }
    /**
     * <pre>
     * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_OrBuilder getDiceOrBuilder() {
      return getDice();
    }

    public static final int REMAINSCOMPOUNDORIGINALCOUNT_FIELD_NUMBER = 81;
    private int remainsCompoundOriginalCount_;
    /**
     * <pre>
     * 迷宫中玩家可合成遗物的初始次数
     * </pre>
     *
     * <code>int32 RemainsCompoundOriginalCount = 81;</code>
     * @return The remainsCompoundOriginalCount.
     */
    @java.lang.Override
    public int getRemainsCompoundOriginalCount() {
      return remainsCompoundOriginalCount_;
    }

    public static final int MAZEVALUEFACTOR_FIELD_NUMBER = 82;
    private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ mazeValueFactor_;
    /**
     * <pre>
     * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
     * @return Whether the mazeValueFactor field is set.
     */
    @java.lang.Override
    public boolean hasMazeValueFactor() {
      return mazeValueFactor_ != null;
    }
    /**
     * <pre>
     * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
     * @return The mazeValueFactor.
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ getMazeValueFactor() {
      return mazeValueFactor_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.getDefaultInstance() : mazeValueFactor_;
    }
    /**
     * <pre>
     * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
     * </pre>
     *
     * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
     */
    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_OrBuilder getMazeValueFactorOrBuilder() {
      return getMazeValueFactor();
    }

    public static final int BATTLEDASHTIME_FIELD_NUMBER = 83;
    private int battleDashTime_;
    /**
     * <pre>
     * 近战战斗冲刺时间（Dash）
     * </pre>
     *
     * <code>int32 BattleDashTime = 83;</code>
     * @return The battleDashTime.
     */
    @java.lang.Override
    public int getBattleDashTime() {
      return battleDashTime_;
    }

    public static final int BATTLEDASHBACKTIME_FIELD_NUMBER = 84;
    private int battleDashBackTime_;
    /**
     * <pre>
     * 近战战斗冲刺返回时间（DashBack）
     * </pre>
     *
     * <code>int32 BattleDashBackTime = 84;</code>
     * @return The battleDashBackTime.
     */
    @java.lang.Override
    public int getBattleDashBackTime() {
      return battleDashBackTime_;
    }

    public static final int BATTLEROUNDSAFETIME_FIELD_NUMBER = 85;
    private int battleRoundSafeTime_;
    /**
     * <pre>
     * 如果有击飞和击倒 留出的安全表现时间
     * </pre>
     *
     * <code>int32 BattleRoundSafeTime = 85;</code>
     * @return The battleRoundSafeTime.
     */
    @java.lang.Override
    public int getBattleRoundSafeTime() {
      return battleRoundSafeTime_;
    }

    public static final int BATTLEWAITNEXTTIME_FIELD_NUMBER = 86;
    private int battleWaitNextTime_;
    /**
     * <pre>
     * 下个不是友军（如果不是友军，需要等待当年动作执行完毕），行动前，需要等待一个比较短暂的时间，该时间在全局配置表配置。作用为让摄像机回调到一个位置。
     * </pre>
     *
     * <code>int32 BattleWaitNextTime = 86;</code>
     * @return The battleWaitNextTime.
     */
    @java.lang.Override
    public int getBattleWaitNextTime() {
      return battleWaitNextTime_;
    }

    public static final int BATTLEROUNDTIME_FIELD_NUMBER = 87;
    private int battleRoundTime_;
    /**
     * <pre>
     * 行为重新开始等待时间
     * </pre>
     *
     * <code>int32 BattleRoundTime = 87;</code>
     * @return The battleRoundTime.
     */
    @java.lang.Override
    public int getBattleRoundTime() {
      return battleRoundTime_;
    }

    public static final int BATTLEHITFLYFORCE_FIELD_NUMBER = 88;
    private int battleHitFlyForce_;
    /**
     * <pre>
     * 击飞力
     * </pre>
     *
     * <code>int32 BattleHitFlyForce = 88;</code>
     * @return The battleHitFlyForce.
     */
    @java.lang.Override
    public int getBattleHitFlyForce() {
      return battleHitFlyForce_;
    }

    public static final int BATTLEHITDOWNFORCE_FIELD_NUMBER = 89;
    private int battleHitDownForce_;
    /**
     * <pre>
     * 击倒力
     * </pre>
     *
     * <code>int32 BattleHitDownForce = 89;</code>
     * @return The battleHitDownForce.
     */
    @java.lang.Override
    public int getBattleHitDownForce() {
      return battleHitDownForce_;
    }

    public static final int BATTLEHITFLYMAXHEIGHT_FIELD_NUMBER = 90;
    private int battleHitFlyMaxHeight_;
    /**
     * <pre>
     * 击飞最大高度
     * </pre>
     *
     * <code>int32 BattleHitFlyMaxHeight = 90;</code>
     * @return The battleHitFlyMaxHeight.
     */
    @java.lang.Override
    public int getBattleHitFlyMaxHeight() {
      return battleHitFlyMaxHeight_;
    }

    public static final int BATTLEGRAVITY_FIELD_NUMBER = 91;
    private int battleGravity_;
    /**
     * <pre>
     * 击飞下降重力
     * </pre>
     *
     * <code>int32 BattleGravity = 91;</code>
     * @return The battleGravity.
     */
    @java.lang.Override
    public int getBattleGravity() {
      return battleGravity_;
    }

    public static final int BATTLEFLYUPGRAVITY_FIELD_NUMBER = 92;
    private int battleFlyUpGravity_;
    /**
     * <pre>
     * 击飞上行重力
     * </pre>
     *
     * <code>int32 BattleFlyUpGravity = 92;</code>
     * @return The battleFlyUpGravity.
     */
    @java.lang.Override
    public int getBattleFlyUpGravity() {
      return battleFlyUpGravity_;
    }

    public static final int BATTLENEARTOPGRAVITY_FIELD_NUMBER = 93;
    private int battleNearTopGravity_;
    /**
     * <pre>
     * 速度趋近顶部重力
     * </pre>
     *
     * <code>int32 BattleNearTopGravity = 93;</code>
     * @return The battleNearTopGravity.
     */
    @java.lang.Override
    public int getBattleNearTopGravity() {
      return battleNearTopGravity_;
    }

    public static final int BATTLENEARTOPSPEED_FIELD_NUMBER = 94;
    private int battleNearTopSpeed_;
    /**
     * <pre>
     * 速衰接近顶部速度判定
     * </pre>
     *
     * <code>int32 BattleNearTopSpeed = 94;</code>
     * @return The battleNearTopSpeed.
     */
    @java.lang.Override
    public int getBattleNearTopSpeed() {
      return battleNearTopSpeed_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (battleStartWaitTime_ != 0) {
        output.writeInt32(1, battleStartWaitTime_);
      }
      if (getBattleMapSizesList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(battleMapSizesMemoizedSerializedSize);
      }
      for (int i = 0; i < battleMapSizes_.size(); i++) {
        output.writeInt32NoTag(battleMapSizes_.getInt(i));
      }
      if (dodgeEffectLimit_ != null) {
        output.writeMessage(3, getDodgeEffectLimit());
      }
      if (critEffectLimit_ != null) {
        output.writeMessage(4, getCritEffectLimit());
      }
      if (critDamEffectLimit_ != null) {
        output.writeMessage(5, getCritDamEffectLimit());
      }
      if (defenseRateEffectLimit_ != null) {
        output.writeMessage(6, getDefenseRateEffectLimit());
      }
      if (damageReduceLimit_ != 0) {
        output.writeInt32(7, damageReduceLimit_);
      }
      if (coolDownLimit_ != null) {
        output.writeMessage(8, getCoolDownLimit());
      }
      if (elementEffectLimit_ != null) {
        output.writeMessage(9, getElementEffectLimit());
      }
      if (elementAttackBase_ != 0D) {
        output.writeDouble(10, elementAttackBase_);
      }
      if (elementDefenseBase_ != 0D) {
        output.writeDouble(11, elementDefenseBase_);
      }
      if (elementEffectBase_ != 0) {
        output.writeInt32(12, elementEffectBase_);
      }
      if (damageCorrectionRange_ != null) {
        output.writeMessage(13, getDamageCorrectionRange());
      }
      if (dodgeCorrection_ != 0D) {
        output.writeDouble(14, dodgeCorrection_);
      }
      if (critCorrection_ != 0D) {
        output.writeDouble(15, critCorrection_);
      }
      if (blckEffect_ != 0) {
        output.writeInt32(16, blckEffect_);
      }
      if (blockEffectLimit_ != null) {
        output.writeMessage(17, getBlockEffectLimit());
      }
      if (heroMaxEnergyValue_ != 0) {
        output.writeInt32(18, heroMaxEnergyValue_);
      }
      if (heroMaxEnergyNum_ != 0) {
        output.writeInt32(19, heroMaxEnergyNum_);
      }
      if (lordMaxEnergy_ != 0) {
        output.writeInt32(20, lordMaxEnergy_);
      }
      if (maxAttackSpeed_ != 0D) {
        output.writeDouble(21, maxAttackSpeed_);
      }
      if (heroSkillCount_ != 0) {
        output.writeInt32(22, heroSkillCount_);
      }
      if (monsterWalkModeTime_ != 0) {
        output.writeInt32(23, monsterWalkModeTime_);
      }
      if (monsterDropModeTime_ != 0) {
        output.writeInt32(24, monsterDropModeTime_);
      }
      if (battleMapGrid_ != null) {
        output.writeMessage(25, getBattleMapGrid());
      }
      if (gridSize_ != 0) {
        output.writeInt32(26, gridSize_);
      }
      if (lordGrid_ != 0) {
        output.writeInt32(27, lordGrid_);
      }
      if (skillMoveTime_ != 0) {
        output.writeInt32(28, skillMoveTime_);
      }
      if (skillFlashTime_ != 0) {
        output.writeInt32(29, skillFlashTime_);
      }
      if (monsterDropRange_ != 0) {
        output.writeInt32(30, monsterDropRange_);
      }
      if (offsetDistance_ != 0) {
        output.writeInt32(31, offsetDistance_);
      }
      if (dropItemStayTime_ != 0) {
        output.writeInt32(32, dropItemStayTime_);
      }
      if (bannerStayMaxtime_ != 0) {
        output.writeInt32(33, bannerStayMaxtime_);
      }
      if (lordMoveSpeed_ != 0) {
        output.writeInt32(34, lordMoveSpeed_);
      }
      if (dropItemRange_ != 0) {
        output.writeInt32(35, dropItemRange_);
      }
      if (maxRoom_ != 0) {
        output.writeInt32(36, maxRoom_);
      }
      if (lordHealthFactor_ != 0) {
        output.writeInt32(37, lordHealthFactor_);
      }
      if (getRuneRefreshPricesList().size() > 0) {
        output.writeUInt32NoTag(306);
        output.writeUInt32NoTag(runeRefreshPricesMemoizedSerializedSize);
      }
      for (int i = 0; i < runeRefreshPrices_.size(); i++) {
        output.writeInt32NoTag(runeRefreshPrices_.getInt(i));
      }
      if (heroMaxRuneCount_ != 0) {
        output.writeInt32(39, heroMaxRuneCount_);
      }
      if (maxSoulStampDemand_ != 0) {
        output.writeInt32(40, maxSoulStampDemand_);
      }
      if (soulStampDemandFactor_ != 0D) {
        output.writeDouble(41, soulStampDemandFactor_);
      }
      if (bagCapacity_ != 0) {
        output.writeInt32(42, bagCapacity_);
      }
      if (resolveFactor_ != 0) {
        output.writeInt32(43, resolveFactor_);
      }
      if (skillFadeOutTime_ != 0) {
        output.writeInt32(44, skillFadeOutTime_);
      }
      if (pvpEnemyLordGrid_ != 0) {
        output.writeInt32(45, pvpEnemyLordGrid_);
      }
      if (getPvpSceneBuffsList().size() > 0) {
        output.writeUInt32NoTag(370);
        output.writeUInt32NoTag(pvpSceneBuffsMemoizedSerializedSize);
      }
      for (int i = 0; i < pvpSceneBuffs_.size(); i++) {
        output.writeInt32NoTag(pvpSceneBuffs_.getInt(i));
      }
      if (pvpFirstHandWaiting_ != 0) {
        output.writeInt32(47, pvpFirstHandWaiting_);
      }
      if (pvpSecondHandWaiting_ != 0) {
        output.writeInt32(48, pvpSecondHandWaiting_);
      }
      if (pvpStartCountDown_ != 0) {
        output.writeInt32(49, pvpStartCountDown_);
      }
      if (pvpOverCountDown_ != 0) {
        output.writeInt32(50, pvpOverCountDown_);
      }
      if (soulInterest_ != null) {
        output.writeMessage(51, getSoulInterest());
      }
      if (battleHeroDieValue_ != 0) {
        output.writeInt32(52, battleHeroDieValue_);
      }
      if (battleMaxTimeValue_ != 0) {
        output.writeInt32(53, battleMaxTimeValue_);
      }
      if (battleJumpTime_ != 0) {
        output.writeInt32(54, battleJumpTime_);
      }
      if (professionUpgradeCount_ != 0) {
        output.writeInt32(55, professionUpgradeCount_);
      }
      if (handCardLimit_ != 0) {
        output.writeInt32(56, handCardLimit_);
      }
      if (getForgetCostsList().size() > 0) {
        output.writeUInt32NoTag(458);
        output.writeUInt32NoTag(forgetCostsMemoizedSerializedSize);
      }
      for (int i = 0; i < forgetCosts_.size(); i++) {
        output.writeInt32NoTag(forgetCosts_.getInt(i));
      }
      if (getPrayCostsList().size() > 0) {
        output.writeUInt32NoTag(466);
        output.writeUInt32NoTag(prayCostsMemoizedSerializedSize);
      }
      for (int i = 0; i < prayCosts_.size(); i++) {
        output.writeInt32NoTag(prayCosts_.getInt(i));
      }
      if (cardLevelUpNeedNum_ != 0) {
        output.writeInt32(59, cardLevelUpNeedNum_);
      }
      if (cardUseToDrawUnique_ != 0) {
        output.writeInt32(60, cardUseToDrawUnique_);
      }
      if (originalHandCardLimit_ != 0) {
        output.writeInt32(61, originalHandCardLimit_);
      }
      if (uniqueSkillCardLimitCountOT_ != 0) {
        output.writeInt32(62, uniqueSkillCardLimitCountOT_);
      }
      if (dropCoefficientInEliteRoom_ != 0) {
        output.writeInt32(63, dropCoefficientInEliteRoom_);
      }
      if (dropCoefficientInBossRoom_ != 0) {
        output.writeInt32(64, dropCoefficientInBossRoom_);
      }
      if (heroRebornTime_ != 0) {
        output.writeInt32(65, heroRebornTime_);
      }
      if (heroRebornHpCostFactor_ != 0) {
        output.writeInt32(66, heroRebornHpCostFactor_);
      }
      if (originalHandCardNum_ != 0) {
        output.writeInt32(67, originalHandCardNum_);
      }
      if (challengeFirstHandChance_ != 0) {
        output.writeInt32(68, challengeFirstHandChance_);
      }
      if (pvpChallengeTime_ != 0) {
        output.writeInt32(69, pvpChallengeTime_);
      }
      if (firstHandEnergyCardCount_ != 0) {
        output.writeInt32(70, firstHandEnergyCardCount_);
      }
      if (secondtHandEnergyCardCount_ != 0) {
        output.writeInt32(71, secondtHandEnergyCardCount_);
      }
      if (pvpFirstHandTime_ != 0) {
        output.writeInt32(72, pvpFirstHandTime_);
      }
      if (pvpSecondHandTime_ != 0) {
        output.writeInt32(73, pvpSecondHandTime_);
      }
      if (lordCardSpacing_ != 0) {
        output.writeInt32(74, lordCardSpacing_);
      }
      if (energyCardCheckUp_ != 0) {
        output.writeInt32(75, energyCardCheckUp_);
      }
      if (pvpOriginalHandCardNum_ != 0) {
        output.writeInt32(76, pvpOriginalHandCardNum_);
      }
      if (getBattleSpeedUpRatesList().size() > 0) {
        output.writeUInt32NoTag(618);
        output.writeUInt32NoTag(battleSpeedUpRatesMemoizedSerializedSize);
      }
      for (int i = 0; i < battleSpeedUpRates_.size(); i++) {
        output.writeDoubleNoTag(battleSpeedUpRates_.getDouble(i));
      }
      if (hangUpIntervalTime_ != 0) {
        output.writeInt32(78, hangUpIntervalTime_);
      }
      if (nextWaveAppearInterval_ != 0) {
        output.writeInt32(79, nextWaveAppearInterval_);
      }
      if (dice_ != null) {
        output.writeMessage(80, getDice());
      }
      if (remainsCompoundOriginalCount_ != 0) {
        output.writeInt32(81, remainsCompoundOriginalCount_);
      }
      if (mazeValueFactor_ != null) {
        output.writeMessage(82, getMazeValueFactor());
      }
      if (battleDashTime_ != 0) {
        output.writeInt32(83, battleDashTime_);
      }
      if (battleDashBackTime_ != 0) {
        output.writeInt32(84, battleDashBackTime_);
      }
      if (battleRoundSafeTime_ != 0) {
        output.writeInt32(85, battleRoundSafeTime_);
      }
      if (battleWaitNextTime_ != 0) {
        output.writeInt32(86, battleWaitNextTime_);
      }
      if (battleRoundTime_ != 0) {
        output.writeInt32(87, battleRoundTime_);
      }
      if (battleHitFlyForce_ != 0) {
        output.writeInt32(88, battleHitFlyForce_);
      }
      if (battleHitDownForce_ != 0) {
        output.writeInt32(89, battleHitDownForce_);
      }
      if (battleHitFlyMaxHeight_ != 0) {
        output.writeInt32(90, battleHitFlyMaxHeight_);
      }
      if (battleGravity_ != 0) {
        output.writeInt32(91, battleGravity_);
      }
      if (battleFlyUpGravity_ != 0) {
        output.writeInt32(92, battleFlyUpGravity_);
      }
      if (battleNearTopGravity_ != 0) {
        output.writeInt32(93, battleNearTopGravity_);
      }
      if (battleNearTopSpeed_ != 0) {
        output.writeInt32(94, battleNearTopSpeed_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (battleStartWaitTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, battleStartWaitTime_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < battleMapSizes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(battleMapSizes_.getInt(i));
        }
        size += dataSize;
        if (!getBattleMapSizesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        battleMapSizesMemoizedSerializedSize = dataSize;
      }
      if (dodgeEffectLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getDodgeEffectLimit());
      }
      if (critEffectLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCritEffectLimit());
      }
      if (critDamEffectLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getCritDamEffectLimit());
      }
      if (defenseRateEffectLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getDefenseRateEffectLimit());
      }
      if (damageReduceLimit_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, damageReduceLimit_);
      }
      if (coolDownLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getCoolDownLimit());
      }
      if (elementEffectLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getElementEffectLimit());
      }
      if (elementAttackBase_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, elementAttackBase_);
      }
      if (elementDefenseBase_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, elementDefenseBase_);
      }
      if (elementEffectBase_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, elementEffectBase_);
      }
      if (damageCorrectionRange_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getDamageCorrectionRange());
      }
      if (dodgeCorrection_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, dodgeCorrection_);
      }
      if (critCorrection_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(15, critCorrection_);
      }
      if (blckEffect_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, blckEffect_);
      }
      if (blockEffectLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getBlockEffectLimit());
      }
      if (heroMaxEnergyValue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, heroMaxEnergyValue_);
      }
      if (heroMaxEnergyNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, heroMaxEnergyNum_);
      }
      if (lordMaxEnergy_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, lordMaxEnergy_);
      }
      if (maxAttackSpeed_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(21, maxAttackSpeed_);
      }
      if (heroSkillCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, heroSkillCount_);
      }
      if (monsterWalkModeTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(23, monsterWalkModeTime_);
      }
      if (monsterDropModeTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, monsterDropModeTime_);
      }
      if (battleMapGrid_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, getBattleMapGrid());
      }
      if (gridSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(26, gridSize_);
      }
      if (lordGrid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(27, lordGrid_);
      }
      if (skillMoveTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, skillMoveTime_);
      }
      if (skillFlashTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(29, skillFlashTime_);
      }
      if (monsterDropRange_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, monsterDropRange_);
      }
      if (offsetDistance_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(31, offsetDistance_);
      }
      if (dropItemStayTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(32, dropItemStayTime_);
      }
      if (bannerStayMaxtime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(33, bannerStayMaxtime_);
      }
      if (lordMoveSpeed_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(34, lordMoveSpeed_);
      }
      if (dropItemRange_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(35, dropItemRange_);
      }
      if (maxRoom_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(36, maxRoom_);
      }
      if (lordHealthFactor_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(37, lordHealthFactor_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < runeRefreshPrices_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(runeRefreshPrices_.getInt(i));
        }
        size += dataSize;
        if (!getRuneRefreshPricesList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        runeRefreshPricesMemoizedSerializedSize = dataSize;
      }
      if (heroMaxRuneCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(39, heroMaxRuneCount_);
      }
      if (maxSoulStampDemand_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(40, maxSoulStampDemand_);
      }
      if (soulStampDemandFactor_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(41, soulStampDemandFactor_);
      }
      if (bagCapacity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(42, bagCapacity_);
      }
      if (resolveFactor_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(43, resolveFactor_);
      }
      if (skillFadeOutTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(44, skillFadeOutTime_);
      }
      if (pvpEnemyLordGrid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(45, pvpEnemyLordGrid_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < pvpSceneBuffs_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(pvpSceneBuffs_.getInt(i));
        }
        size += dataSize;
        if (!getPvpSceneBuffsList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        pvpSceneBuffsMemoizedSerializedSize = dataSize;
      }
      if (pvpFirstHandWaiting_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(47, pvpFirstHandWaiting_);
      }
      if (pvpSecondHandWaiting_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(48, pvpSecondHandWaiting_);
      }
      if (pvpStartCountDown_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(49, pvpStartCountDown_);
      }
      if (pvpOverCountDown_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(50, pvpOverCountDown_);
      }
      if (soulInterest_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(51, getSoulInterest());
      }
      if (battleHeroDieValue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(52, battleHeroDieValue_);
      }
      if (battleMaxTimeValue_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(53, battleMaxTimeValue_);
      }
      if (battleJumpTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(54, battleJumpTime_);
      }
      if (professionUpgradeCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(55, professionUpgradeCount_);
      }
      if (handCardLimit_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(56, handCardLimit_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < forgetCosts_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(forgetCosts_.getInt(i));
        }
        size += dataSize;
        if (!getForgetCostsList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        forgetCostsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < prayCosts_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(prayCosts_.getInt(i));
        }
        size += dataSize;
        if (!getPrayCostsList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        prayCostsMemoizedSerializedSize = dataSize;
      }
      if (cardLevelUpNeedNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(59, cardLevelUpNeedNum_);
      }
      if (cardUseToDrawUnique_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(60, cardUseToDrawUnique_);
      }
      if (originalHandCardLimit_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(61, originalHandCardLimit_);
      }
      if (uniqueSkillCardLimitCountOT_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(62, uniqueSkillCardLimitCountOT_);
      }
      if (dropCoefficientInEliteRoom_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(63, dropCoefficientInEliteRoom_);
      }
      if (dropCoefficientInBossRoom_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(64, dropCoefficientInBossRoom_);
      }
      if (heroRebornTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(65, heroRebornTime_);
      }
      if (heroRebornHpCostFactor_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(66, heroRebornHpCostFactor_);
      }
      if (originalHandCardNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(67, originalHandCardNum_);
      }
      if (challengeFirstHandChance_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(68, challengeFirstHandChance_);
      }
      if (pvpChallengeTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(69, pvpChallengeTime_);
      }
      if (firstHandEnergyCardCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(70, firstHandEnergyCardCount_);
      }
      if (secondtHandEnergyCardCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(71, secondtHandEnergyCardCount_);
      }
      if (pvpFirstHandTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(72, pvpFirstHandTime_);
      }
      if (pvpSecondHandTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(73, pvpSecondHandTime_);
      }
      if (lordCardSpacing_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(74, lordCardSpacing_);
      }
      if (energyCardCheckUp_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(75, energyCardCheckUp_);
      }
      if (pvpOriginalHandCardNum_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(76, pvpOriginalHandCardNum_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBattleSpeedUpRatesList().size();
        size += dataSize;
        if (!getBattleSpeedUpRatesList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        battleSpeedUpRatesMemoizedSerializedSize = dataSize;
      }
      if (hangUpIntervalTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(78, hangUpIntervalTime_);
      }
      if (nextWaveAppearInterval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(79, nextWaveAppearInterval_);
      }
      if (dice_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(80, getDice());
      }
      if (remainsCompoundOriginalCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(81, remainsCompoundOriginalCount_);
      }
      if (mazeValueFactor_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(82, getMazeValueFactor());
      }
      if (battleDashTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(83, battleDashTime_);
      }
      if (battleDashBackTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(84, battleDashBackTime_);
      }
      if (battleRoundSafeTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(85, battleRoundSafeTime_);
      }
      if (battleWaitNextTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(86, battleWaitNextTime_);
      }
      if (battleRoundTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(87, battleRoundTime_);
      }
      if (battleHitFlyForce_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(88, battleHitFlyForce_);
      }
      if (battleHitDownForce_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(89, battleHitDownForce_);
      }
      if (battleHitFlyMaxHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(90, battleHitFlyMaxHeight_);
      }
      if (battleGravity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(91, battleGravity_);
      }
      if (battleFlyUpGravity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(92, battleFlyUpGravity_);
      }
      if (battleNearTopGravity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(93, battleNearTopGravity_);
      }
      if (battleNearTopSpeed_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(94, battleNearTopSpeed_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate)) {
        return super.equals(obj);
      }
      Config.BattleParamTemplateOuterClass.BattleParamTemplate other = (Config.BattleParamTemplateOuterClass.BattleParamTemplate) obj;

      if (getBattleStartWaitTime()
          != other.getBattleStartWaitTime()) return false;
      if (!getBattleMapSizesList()
          .equals(other.getBattleMapSizesList())) return false;
      if (hasDodgeEffectLimit() != other.hasDodgeEffectLimit()) return false;
      if (hasDodgeEffectLimit()) {
        if (!getDodgeEffectLimit()
            .equals(other.getDodgeEffectLimit())) return false;
      }
      if (hasCritEffectLimit() != other.hasCritEffectLimit()) return false;
      if (hasCritEffectLimit()) {
        if (!getCritEffectLimit()
            .equals(other.getCritEffectLimit())) return false;
      }
      if (hasCritDamEffectLimit() != other.hasCritDamEffectLimit()) return false;
      if (hasCritDamEffectLimit()) {
        if (!getCritDamEffectLimit()
            .equals(other.getCritDamEffectLimit())) return false;
      }
      if (hasDefenseRateEffectLimit() != other.hasDefenseRateEffectLimit()) return false;
      if (hasDefenseRateEffectLimit()) {
        if (!getDefenseRateEffectLimit()
            .equals(other.getDefenseRateEffectLimit())) return false;
      }
      if (getDamageReduceLimit()
          != other.getDamageReduceLimit()) return false;
      if (hasCoolDownLimit() != other.hasCoolDownLimit()) return false;
      if (hasCoolDownLimit()) {
        if (!getCoolDownLimit()
            .equals(other.getCoolDownLimit())) return false;
      }
      if (hasElementEffectLimit() != other.hasElementEffectLimit()) return false;
      if (hasElementEffectLimit()) {
        if (!getElementEffectLimit()
            .equals(other.getElementEffectLimit())) return false;
      }
      if (java.lang.Double.doubleToLongBits(getElementAttackBase())
          != java.lang.Double.doubleToLongBits(
              other.getElementAttackBase())) return false;
      if (java.lang.Double.doubleToLongBits(getElementDefenseBase())
          != java.lang.Double.doubleToLongBits(
              other.getElementDefenseBase())) return false;
      if (getElementEffectBase()
          != other.getElementEffectBase()) return false;
      if (hasDamageCorrectionRange() != other.hasDamageCorrectionRange()) return false;
      if (hasDamageCorrectionRange()) {
        if (!getDamageCorrectionRange()
            .equals(other.getDamageCorrectionRange())) return false;
      }
      if (java.lang.Double.doubleToLongBits(getDodgeCorrection())
          != java.lang.Double.doubleToLongBits(
              other.getDodgeCorrection())) return false;
      if (java.lang.Double.doubleToLongBits(getCritCorrection())
          != java.lang.Double.doubleToLongBits(
              other.getCritCorrection())) return false;
      if (getBlckEffect()
          != other.getBlckEffect()) return false;
      if (hasBlockEffectLimit() != other.hasBlockEffectLimit()) return false;
      if (hasBlockEffectLimit()) {
        if (!getBlockEffectLimit()
            .equals(other.getBlockEffectLimit())) return false;
      }
      if (getHeroMaxEnergyValue()
          != other.getHeroMaxEnergyValue()) return false;
      if (getHeroMaxEnergyNum()
          != other.getHeroMaxEnergyNum()) return false;
      if (getLordMaxEnergy()
          != other.getLordMaxEnergy()) return false;
      if (java.lang.Double.doubleToLongBits(getMaxAttackSpeed())
          != java.lang.Double.doubleToLongBits(
              other.getMaxAttackSpeed())) return false;
      if (getHeroSkillCount()
          != other.getHeroSkillCount()) return false;
      if (getMonsterWalkModeTime()
          != other.getMonsterWalkModeTime()) return false;
      if (getMonsterDropModeTime()
          != other.getMonsterDropModeTime()) return false;
      if (hasBattleMapGrid() != other.hasBattleMapGrid()) return false;
      if (hasBattleMapGrid()) {
        if (!getBattleMapGrid()
            .equals(other.getBattleMapGrid())) return false;
      }
      if (getGridSize()
          != other.getGridSize()) return false;
      if (getLordGrid()
          != other.getLordGrid()) return false;
      if (getSkillMoveTime()
          != other.getSkillMoveTime()) return false;
      if (getSkillFlashTime()
          != other.getSkillFlashTime()) return false;
      if (getMonsterDropRange()
          != other.getMonsterDropRange()) return false;
      if (getOffsetDistance()
          != other.getOffsetDistance()) return false;
      if (getDropItemStayTime()
          != other.getDropItemStayTime()) return false;
      if (getBannerStayMaxtime()
          != other.getBannerStayMaxtime()) return false;
      if (getLordMoveSpeed()
          != other.getLordMoveSpeed()) return false;
      if (getDropItemRange()
          != other.getDropItemRange()) return false;
      if (getMaxRoom()
          != other.getMaxRoom()) return false;
      if (getLordHealthFactor()
          != other.getLordHealthFactor()) return false;
      if (!getRuneRefreshPricesList()
          .equals(other.getRuneRefreshPricesList())) return false;
      if (getHeroMaxRuneCount()
          != other.getHeroMaxRuneCount()) return false;
      if (getMaxSoulStampDemand()
          != other.getMaxSoulStampDemand()) return false;
      if (java.lang.Double.doubleToLongBits(getSoulStampDemandFactor())
          != java.lang.Double.doubleToLongBits(
              other.getSoulStampDemandFactor())) return false;
      if (getBagCapacity()
          != other.getBagCapacity()) return false;
      if (getResolveFactor()
          != other.getResolveFactor()) return false;
      if (getSkillFadeOutTime()
          != other.getSkillFadeOutTime()) return false;
      if (getPvpEnemyLordGrid()
          != other.getPvpEnemyLordGrid()) return false;
      if (!getPvpSceneBuffsList()
          .equals(other.getPvpSceneBuffsList())) return false;
      if (getPvpFirstHandWaiting()
          != other.getPvpFirstHandWaiting()) return false;
      if (getPvpSecondHandWaiting()
          != other.getPvpSecondHandWaiting()) return false;
      if (getPvpStartCountDown()
          != other.getPvpStartCountDown()) return false;
      if (getPvpOverCountDown()
          != other.getPvpOverCountDown()) return false;
      if (hasSoulInterest() != other.hasSoulInterest()) return false;
      if (hasSoulInterest()) {
        if (!getSoulInterest()
            .equals(other.getSoulInterest())) return false;
      }
      if (getBattleHeroDieValue()
          != other.getBattleHeroDieValue()) return false;
      if (getBattleMaxTimeValue()
          != other.getBattleMaxTimeValue()) return false;
      if (getBattleJumpTime()
          != other.getBattleJumpTime()) return false;
      if (getProfessionUpgradeCount()
          != other.getProfessionUpgradeCount()) return false;
      if (getHandCardLimit()
          != other.getHandCardLimit()) return false;
      if (!getForgetCostsList()
          .equals(other.getForgetCostsList())) return false;
      if (!getPrayCostsList()
          .equals(other.getPrayCostsList())) return false;
      if (getCardLevelUpNeedNum()
          != other.getCardLevelUpNeedNum()) return false;
      if (getCardUseToDrawUnique()
          != other.getCardUseToDrawUnique()) return false;
      if (getOriginalHandCardLimit()
          != other.getOriginalHandCardLimit()) return false;
      if (getUniqueSkillCardLimitCountOT()
          != other.getUniqueSkillCardLimitCountOT()) return false;
      if (getDropCoefficientInEliteRoom()
          != other.getDropCoefficientInEliteRoom()) return false;
      if (getDropCoefficientInBossRoom()
          != other.getDropCoefficientInBossRoom()) return false;
      if (getHeroRebornTime()
          != other.getHeroRebornTime()) return false;
      if (getHeroRebornHpCostFactor()
          != other.getHeroRebornHpCostFactor()) return false;
      if (getOriginalHandCardNum()
          != other.getOriginalHandCardNum()) return false;
      if (getChallengeFirstHandChance()
          != other.getChallengeFirstHandChance()) return false;
      if (getPvpChallengeTime()
          != other.getPvpChallengeTime()) return false;
      if (getFirstHandEnergyCardCount()
          != other.getFirstHandEnergyCardCount()) return false;
      if (getSecondtHandEnergyCardCount()
          != other.getSecondtHandEnergyCardCount()) return false;
      if (getPvpFirstHandTime()
          != other.getPvpFirstHandTime()) return false;
      if (getPvpSecondHandTime()
          != other.getPvpSecondHandTime()) return false;
      if (getLordCardSpacing()
          != other.getLordCardSpacing()) return false;
      if (getEnergyCardCheckUp()
          != other.getEnergyCardCheckUp()) return false;
      if (getPvpOriginalHandCardNum()
          != other.getPvpOriginalHandCardNum()) return false;
      if (!getBattleSpeedUpRatesList()
          .equals(other.getBattleSpeedUpRatesList())) return false;
      if (getHangUpIntervalTime()
          != other.getHangUpIntervalTime()) return false;
      if (getNextWaveAppearInterval()
          != other.getNextWaveAppearInterval()) return false;
      if (hasDice() != other.hasDice()) return false;
      if (hasDice()) {
        if (!getDice()
            .equals(other.getDice())) return false;
      }
      if (getRemainsCompoundOriginalCount()
          != other.getRemainsCompoundOriginalCount()) return false;
      if (hasMazeValueFactor() != other.hasMazeValueFactor()) return false;
      if (hasMazeValueFactor()) {
        if (!getMazeValueFactor()
            .equals(other.getMazeValueFactor())) return false;
      }
      if (getBattleDashTime()
          != other.getBattleDashTime()) return false;
      if (getBattleDashBackTime()
          != other.getBattleDashBackTime()) return false;
      if (getBattleRoundSafeTime()
          != other.getBattleRoundSafeTime()) return false;
      if (getBattleWaitNextTime()
          != other.getBattleWaitNextTime()) return false;
      if (getBattleRoundTime()
          != other.getBattleRoundTime()) return false;
      if (getBattleHitFlyForce()
          != other.getBattleHitFlyForce()) return false;
      if (getBattleHitDownForce()
          != other.getBattleHitDownForce()) return false;
      if (getBattleHitFlyMaxHeight()
          != other.getBattleHitFlyMaxHeight()) return false;
      if (getBattleGravity()
          != other.getBattleGravity()) return false;
      if (getBattleFlyUpGravity()
          != other.getBattleFlyUpGravity()) return false;
      if (getBattleNearTopGravity()
          != other.getBattleNearTopGravity()) return false;
      if (getBattleNearTopSpeed()
          != other.getBattleNearTopSpeed()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BATTLESTARTWAITTIME_FIELD_NUMBER;
      hash = (53 * hash) + getBattleStartWaitTime();
      if (getBattleMapSizesCount() > 0) {
        hash = (37 * hash) + BATTLEMAPSIZES_FIELD_NUMBER;
        hash = (53 * hash) + getBattleMapSizesList().hashCode();
      }
      if (hasDodgeEffectLimit()) {
        hash = (37 * hash) + DODGEEFFECTLIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getDodgeEffectLimit().hashCode();
      }
      if (hasCritEffectLimit()) {
        hash = (37 * hash) + CRITEFFECTLIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getCritEffectLimit().hashCode();
      }
      if (hasCritDamEffectLimit()) {
        hash = (37 * hash) + CRITDAMEFFECTLIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getCritDamEffectLimit().hashCode();
      }
      if (hasDefenseRateEffectLimit()) {
        hash = (37 * hash) + DEFENSERATEEFFECTLIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getDefenseRateEffectLimit().hashCode();
      }
      hash = (37 * hash) + DAMAGEREDUCELIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getDamageReduceLimit();
      if (hasCoolDownLimit()) {
        hash = (37 * hash) + COOLDOWNLIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getCoolDownLimit().hashCode();
      }
      if (hasElementEffectLimit()) {
        hash = (37 * hash) + ELEMENTEFFECTLIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getElementEffectLimit().hashCode();
      }
      hash = (37 * hash) + ELEMENTATTACKBASE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getElementAttackBase()));
      hash = (37 * hash) + ELEMENTDEFENSEBASE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getElementDefenseBase()));
      hash = (37 * hash) + ELEMENTEFFECTBASE_FIELD_NUMBER;
      hash = (53 * hash) + getElementEffectBase();
      if (hasDamageCorrectionRange()) {
        hash = (37 * hash) + DAMAGECORRECTIONRANGE_FIELD_NUMBER;
        hash = (53 * hash) + getDamageCorrectionRange().hashCode();
      }
      hash = (37 * hash) + DODGECORRECTION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getDodgeCorrection()));
      hash = (37 * hash) + CRITCORRECTION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCritCorrection()));
      hash = (37 * hash) + BLCKEFFECT_FIELD_NUMBER;
      hash = (53 * hash) + getBlckEffect();
      if (hasBlockEffectLimit()) {
        hash = (37 * hash) + BLOCKEFFECTLIMIT_FIELD_NUMBER;
        hash = (53 * hash) + getBlockEffectLimit().hashCode();
      }
      hash = (37 * hash) + HEROMAXENERGYVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getHeroMaxEnergyValue();
      hash = (37 * hash) + HEROMAXENERGYNUM_FIELD_NUMBER;
      hash = (53 * hash) + getHeroMaxEnergyNum();
      hash = (37 * hash) + LORDMAXENERGY_FIELD_NUMBER;
      hash = (53 * hash) + getLordMaxEnergy();
      hash = (37 * hash) + MAXATTACKSPEED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMaxAttackSpeed()));
      hash = (37 * hash) + HEROSKILLCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getHeroSkillCount();
      hash = (37 * hash) + MONSTERWALKMODETIME_FIELD_NUMBER;
      hash = (53 * hash) + getMonsterWalkModeTime();
      hash = (37 * hash) + MONSTERDROPMODETIME_FIELD_NUMBER;
      hash = (53 * hash) + getMonsterDropModeTime();
      if (hasBattleMapGrid()) {
        hash = (37 * hash) + BATTLEMAPGRID_FIELD_NUMBER;
        hash = (53 * hash) + getBattleMapGrid().hashCode();
      }
      hash = (37 * hash) + GRIDSIZE_FIELD_NUMBER;
      hash = (53 * hash) + getGridSize();
      hash = (37 * hash) + LORDGRID_FIELD_NUMBER;
      hash = (53 * hash) + getLordGrid();
      hash = (37 * hash) + SKILLMOVETIME_FIELD_NUMBER;
      hash = (53 * hash) + getSkillMoveTime();
      hash = (37 * hash) + SKILLFLASHTIME_FIELD_NUMBER;
      hash = (53 * hash) + getSkillFlashTime();
      hash = (37 * hash) + MONSTERDROPRANGE_FIELD_NUMBER;
      hash = (53 * hash) + getMonsterDropRange();
      hash = (37 * hash) + OFFSETDISTANCE_FIELD_NUMBER;
      hash = (53 * hash) + getOffsetDistance();
      hash = (37 * hash) + DROPITEMSTAYTIME_FIELD_NUMBER;
      hash = (53 * hash) + getDropItemStayTime();
      hash = (37 * hash) + BANNERSTAYMAXTIME_FIELD_NUMBER;
      hash = (53 * hash) + getBannerStayMaxtime();
      hash = (37 * hash) + LORDMOVESPEED_FIELD_NUMBER;
      hash = (53 * hash) + getLordMoveSpeed();
      hash = (37 * hash) + DROPITEMRANGE_FIELD_NUMBER;
      hash = (53 * hash) + getDropItemRange();
      hash = (37 * hash) + MAXROOM_FIELD_NUMBER;
      hash = (53 * hash) + getMaxRoom();
      hash = (37 * hash) + LORDHEALTHFACTOR_FIELD_NUMBER;
      hash = (53 * hash) + getLordHealthFactor();
      if (getRuneRefreshPricesCount() > 0) {
        hash = (37 * hash) + RUNEREFRESHPRICES_FIELD_NUMBER;
        hash = (53 * hash) + getRuneRefreshPricesList().hashCode();
      }
      hash = (37 * hash) + HEROMAXRUNECOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getHeroMaxRuneCount();
      hash = (37 * hash) + MAXSOULSTAMPDEMAND_FIELD_NUMBER;
      hash = (53 * hash) + getMaxSoulStampDemand();
      hash = (37 * hash) + SOULSTAMPDEMANDFACTOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getSoulStampDemandFactor()));
      hash = (37 * hash) + BAGCAPACITY_FIELD_NUMBER;
      hash = (53 * hash) + getBagCapacity();
      hash = (37 * hash) + RESOLVEFACTOR_FIELD_NUMBER;
      hash = (53 * hash) + getResolveFactor();
      hash = (37 * hash) + SKILLFADEOUTTIME_FIELD_NUMBER;
      hash = (53 * hash) + getSkillFadeOutTime();
      hash = (37 * hash) + PVPENEMYLORDGRID_FIELD_NUMBER;
      hash = (53 * hash) + getPvpEnemyLordGrid();
      if (getPvpSceneBuffsCount() > 0) {
        hash = (37 * hash) + PVPSCENEBUFFS_FIELD_NUMBER;
        hash = (53 * hash) + getPvpSceneBuffsList().hashCode();
      }
      hash = (37 * hash) + PVPFIRSTHANDWAITING_FIELD_NUMBER;
      hash = (53 * hash) + getPvpFirstHandWaiting();
      hash = (37 * hash) + PVPSECONDHANDWAITING_FIELD_NUMBER;
      hash = (53 * hash) + getPvpSecondHandWaiting();
      hash = (37 * hash) + PVPSTARTCOUNTDOWN_FIELD_NUMBER;
      hash = (53 * hash) + getPvpStartCountDown();
      hash = (37 * hash) + PVPOVERCOUNTDOWN_FIELD_NUMBER;
      hash = (53 * hash) + getPvpOverCountDown();
      if (hasSoulInterest()) {
        hash = (37 * hash) + SOULINTEREST_FIELD_NUMBER;
        hash = (53 * hash) + getSoulInterest().hashCode();
      }
      hash = (37 * hash) + BATTLEHERODIEVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getBattleHeroDieValue();
      hash = (37 * hash) + BATTLEMAXTIMEVALUE_FIELD_NUMBER;
      hash = (53 * hash) + getBattleMaxTimeValue();
      hash = (37 * hash) + BATTLEJUMPTIME_FIELD_NUMBER;
      hash = (53 * hash) + getBattleJumpTime();
      hash = (37 * hash) + PROFESSIONUPGRADECOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getProfessionUpgradeCount();
      hash = (37 * hash) + HANDCARDLIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getHandCardLimit();
      if (getForgetCostsCount() > 0) {
        hash = (37 * hash) + FORGETCOSTS_FIELD_NUMBER;
        hash = (53 * hash) + getForgetCostsList().hashCode();
      }
      if (getPrayCostsCount() > 0) {
        hash = (37 * hash) + PRAYCOSTS_FIELD_NUMBER;
        hash = (53 * hash) + getPrayCostsList().hashCode();
      }
      hash = (37 * hash) + CARDLEVELUPNEEDNUM_FIELD_NUMBER;
      hash = (53 * hash) + getCardLevelUpNeedNum();
      hash = (37 * hash) + CARDUSETODRAWUNIQUE_FIELD_NUMBER;
      hash = (53 * hash) + getCardUseToDrawUnique();
      hash = (37 * hash) + ORIGINALHANDCARDLIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getOriginalHandCardLimit();
      hash = (37 * hash) + UNIQUESKILLCARDLIMITCOUNTOT_FIELD_NUMBER;
      hash = (53 * hash) + getUniqueSkillCardLimitCountOT();
      hash = (37 * hash) + DROPCOEFFICIENTINELITEROOM_FIELD_NUMBER;
      hash = (53 * hash) + getDropCoefficientInEliteRoom();
      hash = (37 * hash) + DROPCOEFFICIENTINBOSSROOM_FIELD_NUMBER;
      hash = (53 * hash) + getDropCoefficientInBossRoom();
      hash = (37 * hash) + HEROREBORNTIME_FIELD_NUMBER;
      hash = (53 * hash) + getHeroRebornTime();
      hash = (37 * hash) + HEROREBORNHPCOSTFACTOR_FIELD_NUMBER;
      hash = (53 * hash) + getHeroRebornHpCostFactor();
      hash = (37 * hash) + ORIGINALHANDCARDNUM_FIELD_NUMBER;
      hash = (53 * hash) + getOriginalHandCardNum();
      hash = (37 * hash) + CHALLENGEFIRSTHANDCHANCE_FIELD_NUMBER;
      hash = (53 * hash) + getChallengeFirstHandChance();
      hash = (37 * hash) + PVPCHALLENGETIME_FIELD_NUMBER;
      hash = (53 * hash) + getPvpChallengeTime();
      hash = (37 * hash) + FIRSTHANDENERGYCARDCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getFirstHandEnergyCardCount();
      hash = (37 * hash) + SECONDTHANDENERGYCARDCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getSecondtHandEnergyCardCount();
      hash = (37 * hash) + PVPFIRSTHANDTIME_FIELD_NUMBER;
      hash = (53 * hash) + getPvpFirstHandTime();
      hash = (37 * hash) + PVPSECONDHANDTIME_FIELD_NUMBER;
      hash = (53 * hash) + getPvpSecondHandTime();
      hash = (37 * hash) + LORDCARDSPACING_FIELD_NUMBER;
      hash = (53 * hash) + getLordCardSpacing();
      hash = (37 * hash) + ENERGYCARDCHECKUP_FIELD_NUMBER;
      hash = (53 * hash) + getEnergyCardCheckUp();
      hash = (37 * hash) + PVPORIGINALHANDCARDNUM_FIELD_NUMBER;
      hash = (53 * hash) + getPvpOriginalHandCardNum();
      if (getBattleSpeedUpRatesCount() > 0) {
        hash = (37 * hash) + BATTLESPEEDUPRATES_FIELD_NUMBER;
        hash = (53 * hash) + getBattleSpeedUpRatesList().hashCode();
      }
      hash = (37 * hash) + HANGUPINTERVALTIME_FIELD_NUMBER;
      hash = (53 * hash) + getHangUpIntervalTime();
      hash = (37 * hash) + NEXTWAVEAPPEARINTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getNextWaveAppearInterval();
      if (hasDice()) {
        hash = (37 * hash) + DICE_FIELD_NUMBER;
        hash = (53 * hash) + getDice().hashCode();
      }
      hash = (37 * hash) + REMAINSCOMPOUNDORIGINALCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getRemainsCompoundOriginalCount();
      if (hasMazeValueFactor()) {
        hash = (37 * hash) + MAZEVALUEFACTOR_FIELD_NUMBER;
        hash = (53 * hash) + getMazeValueFactor().hashCode();
      }
      hash = (37 * hash) + BATTLEDASHTIME_FIELD_NUMBER;
      hash = (53 * hash) + getBattleDashTime();
      hash = (37 * hash) + BATTLEDASHBACKTIME_FIELD_NUMBER;
      hash = (53 * hash) + getBattleDashBackTime();
      hash = (37 * hash) + BATTLEROUNDSAFETIME_FIELD_NUMBER;
      hash = (53 * hash) + getBattleRoundSafeTime();
      hash = (37 * hash) + BATTLEWAITNEXTTIME_FIELD_NUMBER;
      hash = (53 * hash) + getBattleWaitNextTime();
      hash = (37 * hash) + BATTLEROUNDTIME_FIELD_NUMBER;
      hash = (53 * hash) + getBattleRoundTime();
      hash = (37 * hash) + BATTLEHITFLYFORCE_FIELD_NUMBER;
      hash = (53 * hash) + getBattleHitFlyForce();
      hash = (37 * hash) + BATTLEHITDOWNFORCE_FIELD_NUMBER;
      hash = (53 * hash) + getBattleHitDownForce();
      hash = (37 * hash) + BATTLEHITFLYMAXHEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getBattleHitFlyMaxHeight();
      hash = (37 * hash) + BATTLEGRAVITY_FIELD_NUMBER;
      hash = (53 * hash) + getBattleGravity();
      hash = (37 * hash) + BATTLEFLYUPGRAVITY_FIELD_NUMBER;
      hash = (53 * hash) + getBattleFlyUpGravity();
      hash = (37 * hash) + BATTLENEARTOPGRAVITY_FIELD_NUMBER;
      hash = (53 * hash) + getBattleNearTopGravity();
      hash = (37 * hash) + BATTLENEARTOPSPEED_FIELD_NUMBER;
      hash = (53 * hash) + getBattleNearTopSpeed();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Config.BattleParamTemplateOuterClass.BattleParamTemplate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Config.BattleParamTemplate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Config.BattleParamTemplate)
        Config.BattleParamTemplateOuterClass.BattleParamTemplateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Config.BattleParamTemplateOuterClass.BattleParamTemplate.class, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Builder.class);
      }

      // Construct using Config.BattleParamTemplateOuterClass.BattleParamTemplate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        battleStartWaitTime_ = 0;

        battleMapSizes_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        if (dodgeEffectLimitBuilder_ == null) {
          dodgeEffectLimit_ = null;
        } else {
          dodgeEffectLimit_ = null;
          dodgeEffectLimitBuilder_ = null;
        }
        if (critEffectLimitBuilder_ == null) {
          critEffectLimit_ = null;
        } else {
          critEffectLimit_ = null;
          critEffectLimitBuilder_ = null;
        }
        if (critDamEffectLimitBuilder_ == null) {
          critDamEffectLimit_ = null;
        } else {
          critDamEffectLimit_ = null;
          critDamEffectLimitBuilder_ = null;
        }
        if (defenseRateEffectLimitBuilder_ == null) {
          defenseRateEffectLimit_ = null;
        } else {
          defenseRateEffectLimit_ = null;
          defenseRateEffectLimitBuilder_ = null;
        }
        damageReduceLimit_ = 0;

        if (coolDownLimitBuilder_ == null) {
          coolDownLimit_ = null;
        } else {
          coolDownLimit_ = null;
          coolDownLimitBuilder_ = null;
        }
        if (elementEffectLimitBuilder_ == null) {
          elementEffectLimit_ = null;
        } else {
          elementEffectLimit_ = null;
          elementEffectLimitBuilder_ = null;
        }
        elementAttackBase_ = 0D;

        elementDefenseBase_ = 0D;

        elementEffectBase_ = 0;

        if (damageCorrectionRangeBuilder_ == null) {
          damageCorrectionRange_ = null;
        } else {
          damageCorrectionRange_ = null;
          damageCorrectionRangeBuilder_ = null;
        }
        dodgeCorrection_ = 0D;

        critCorrection_ = 0D;

        blckEffect_ = 0;

        if (blockEffectLimitBuilder_ == null) {
          blockEffectLimit_ = null;
        } else {
          blockEffectLimit_ = null;
          blockEffectLimitBuilder_ = null;
        }
        heroMaxEnergyValue_ = 0;

        heroMaxEnergyNum_ = 0;

        lordMaxEnergy_ = 0;

        maxAttackSpeed_ = 0D;

        heroSkillCount_ = 0;

        monsterWalkModeTime_ = 0;

        monsterDropModeTime_ = 0;

        if (battleMapGridBuilder_ == null) {
          battleMapGrid_ = null;
        } else {
          battleMapGrid_ = null;
          battleMapGridBuilder_ = null;
        }
        gridSize_ = 0;

        lordGrid_ = 0;

        skillMoveTime_ = 0;

        skillFlashTime_ = 0;

        monsterDropRange_ = 0;

        offsetDistance_ = 0;

        dropItemStayTime_ = 0;

        bannerStayMaxtime_ = 0;

        lordMoveSpeed_ = 0;

        dropItemRange_ = 0;

        maxRoom_ = 0;

        lordHealthFactor_ = 0;

        runeRefreshPrices_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        heroMaxRuneCount_ = 0;

        maxSoulStampDemand_ = 0;

        soulStampDemandFactor_ = 0D;

        bagCapacity_ = 0;

        resolveFactor_ = 0;

        skillFadeOutTime_ = 0;

        pvpEnemyLordGrid_ = 0;

        pvpSceneBuffs_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        pvpFirstHandWaiting_ = 0;

        pvpSecondHandWaiting_ = 0;

        pvpStartCountDown_ = 0;

        pvpOverCountDown_ = 0;

        if (soulInterestBuilder_ == null) {
          soulInterest_ = null;
        } else {
          soulInterest_ = null;
          soulInterestBuilder_ = null;
        }
        battleHeroDieValue_ = 0;

        battleMaxTimeValue_ = 0;

        battleJumpTime_ = 0;

        professionUpgradeCount_ = 0;

        handCardLimit_ = 0;

        forgetCosts_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000008);
        prayCosts_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        cardLevelUpNeedNum_ = 0;

        cardUseToDrawUnique_ = 0;

        originalHandCardLimit_ = 0;

        uniqueSkillCardLimitCountOT_ = 0;

        dropCoefficientInEliteRoom_ = 0;

        dropCoefficientInBossRoom_ = 0;

        heroRebornTime_ = 0;

        heroRebornHpCostFactor_ = 0;

        originalHandCardNum_ = 0;

        challengeFirstHandChance_ = 0;

        pvpChallengeTime_ = 0;

        firstHandEnergyCardCount_ = 0;

        secondtHandEnergyCardCount_ = 0;

        pvpFirstHandTime_ = 0;

        pvpSecondHandTime_ = 0;

        lordCardSpacing_ = 0;

        energyCardCheckUp_ = 0;

        pvpOriginalHandCardNum_ = 0;

        battleSpeedUpRates_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000020);
        hangUpIntervalTime_ = 0;

        nextWaveAppearInterval_ = 0;

        if (diceBuilder_ == null) {
          dice_ = null;
        } else {
          dice_ = null;
          diceBuilder_ = null;
        }
        remainsCompoundOriginalCount_ = 0;

        if (mazeValueFactorBuilder_ == null) {
          mazeValueFactor_ = null;
        } else {
          mazeValueFactor_ = null;
          mazeValueFactorBuilder_ = null;
        }
        battleDashTime_ = 0;

        battleDashBackTime_ = 0;

        battleRoundSafeTime_ = 0;

        battleWaitNextTime_ = 0;

        battleRoundTime_ = 0;

        battleHitFlyForce_ = 0;

        battleHitDownForce_ = 0;

        battleHitFlyMaxHeight_ = 0;

        battleGravity_ = 0;

        battleFlyUpGravity_ = 0;

        battleNearTopGravity_ = 0;

        battleNearTopSpeed_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Config.BattleParamTemplateOuterClass.internal_static_Config_BattleParamTemplate_descriptor;
      }

      @java.lang.Override
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate getDefaultInstanceForType() {
        return Config.BattleParamTemplateOuterClass.BattleParamTemplate.getDefaultInstance();
      }

      @java.lang.Override
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate build() {
        Config.BattleParamTemplateOuterClass.BattleParamTemplate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate buildPartial() {
        Config.BattleParamTemplateOuterClass.BattleParamTemplate result = new Config.BattleParamTemplateOuterClass.BattleParamTemplate(this);
        int from_bitField0_ = bitField0_;
        result.battleStartWaitTime_ = battleStartWaitTime_;
        if (((bitField0_ & 0x00000001) != 0)) {
          battleMapSizes_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.battleMapSizes_ = battleMapSizes_;
        if (dodgeEffectLimitBuilder_ == null) {
          result.dodgeEffectLimit_ = dodgeEffectLimit_;
        } else {
          result.dodgeEffectLimit_ = dodgeEffectLimitBuilder_.build();
        }
        if (critEffectLimitBuilder_ == null) {
          result.critEffectLimit_ = critEffectLimit_;
        } else {
          result.critEffectLimit_ = critEffectLimitBuilder_.build();
        }
        if (critDamEffectLimitBuilder_ == null) {
          result.critDamEffectLimit_ = critDamEffectLimit_;
        } else {
          result.critDamEffectLimit_ = critDamEffectLimitBuilder_.build();
        }
        if (defenseRateEffectLimitBuilder_ == null) {
          result.defenseRateEffectLimit_ = defenseRateEffectLimit_;
        } else {
          result.defenseRateEffectLimit_ = defenseRateEffectLimitBuilder_.build();
        }
        result.damageReduceLimit_ = damageReduceLimit_;
        if (coolDownLimitBuilder_ == null) {
          result.coolDownLimit_ = coolDownLimit_;
        } else {
          result.coolDownLimit_ = coolDownLimitBuilder_.build();
        }
        if (elementEffectLimitBuilder_ == null) {
          result.elementEffectLimit_ = elementEffectLimit_;
        } else {
          result.elementEffectLimit_ = elementEffectLimitBuilder_.build();
        }
        result.elementAttackBase_ = elementAttackBase_;
        result.elementDefenseBase_ = elementDefenseBase_;
        result.elementEffectBase_ = elementEffectBase_;
        if (damageCorrectionRangeBuilder_ == null) {
          result.damageCorrectionRange_ = damageCorrectionRange_;
        } else {
          result.damageCorrectionRange_ = damageCorrectionRangeBuilder_.build();
        }
        result.dodgeCorrection_ = dodgeCorrection_;
        result.critCorrection_ = critCorrection_;
        result.blckEffect_ = blckEffect_;
        if (blockEffectLimitBuilder_ == null) {
          result.blockEffectLimit_ = blockEffectLimit_;
        } else {
          result.blockEffectLimit_ = blockEffectLimitBuilder_.build();
        }
        result.heroMaxEnergyValue_ = heroMaxEnergyValue_;
        result.heroMaxEnergyNum_ = heroMaxEnergyNum_;
        result.lordMaxEnergy_ = lordMaxEnergy_;
        result.maxAttackSpeed_ = maxAttackSpeed_;
        result.heroSkillCount_ = heroSkillCount_;
        result.monsterWalkModeTime_ = monsterWalkModeTime_;
        result.monsterDropModeTime_ = monsterDropModeTime_;
        if (battleMapGridBuilder_ == null) {
          result.battleMapGrid_ = battleMapGrid_;
        } else {
          result.battleMapGrid_ = battleMapGridBuilder_.build();
        }
        result.gridSize_ = gridSize_;
        result.lordGrid_ = lordGrid_;
        result.skillMoveTime_ = skillMoveTime_;
        result.skillFlashTime_ = skillFlashTime_;
        result.monsterDropRange_ = monsterDropRange_;
        result.offsetDistance_ = offsetDistance_;
        result.dropItemStayTime_ = dropItemStayTime_;
        result.bannerStayMaxtime_ = bannerStayMaxtime_;
        result.lordMoveSpeed_ = lordMoveSpeed_;
        result.dropItemRange_ = dropItemRange_;
        result.maxRoom_ = maxRoom_;
        result.lordHealthFactor_ = lordHealthFactor_;
        if (((bitField0_ & 0x00000002) != 0)) {
          runeRefreshPrices_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.runeRefreshPrices_ = runeRefreshPrices_;
        result.heroMaxRuneCount_ = heroMaxRuneCount_;
        result.maxSoulStampDemand_ = maxSoulStampDemand_;
        result.soulStampDemandFactor_ = soulStampDemandFactor_;
        result.bagCapacity_ = bagCapacity_;
        result.resolveFactor_ = resolveFactor_;
        result.skillFadeOutTime_ = skillFadeOutTime_;
        result.pvpEnemyLordGrid_ = pvpEnemyLordGrid_;
        if (((bitField0_ & 0x00000004) != 0)) {
          pvpSceneBuffs_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.pvpSceneBuffs_ = pvpSceneBuffs_;
        result.pvpFirstHandWaiting_ = pvpFirstHandWaiting_;
        result.pvpSecondHandWaiting_ = pvpSecondHandWaiting_;
        result.pvpStartCountDown_ = pvpStartCountDown_;
        result.pvpOverCountDown_ = pvpOverCountDown_;
        if (soulInterestBuilder_ == null) {
          result.soulInterest_ = soulInterest_;
        } else {
          result.soulInterest_ = soulInterestBuilder_.build();
        }
        result.battleHeroDieValue_ = battleHeroDieValue_;
        result.battleMaxTimeValue_ = battleMaxTimeValue_;
        result.battleJumpTime_ = battleJumpTime_;
        result.professionUpgradeCount_ = professionUpgradeCount_;
        result.handCardLimit_ = handCardLimit_;
        if (((bitField0_ & 0x00000008) != 0)) {
          forgetCosts_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.forgetCosts_ = forgetCosts_;
        if (((bitField0_ & 0x00000010) != 0)) {
          prayCosts_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.prayCosts_ = prayCosts_;
        result.cardLevelUpNeedNum_ = cardLevelUpNeedNum_;
        result.cardUseToDrawUnique_ = cardUseToDrawUnique_;
        result.originalHandCardLimit_ = originalHandCardLimit_;
        result.uniqueSkillCardLimitCountOT_ = uniqueSkillCardLimitCountOT_;
        result.dropCoefficientInEliteRoom_ = dropCoefficientInEliteRoom_;
        result.dropCoefficientInBossRoom_ = dropCoefficientInBossRoom_;
        result.heroRebornTime_ = heroRebornTime_;
        result.heroRebornHpCostFactor_ = heroRebornHpCostFactor_;
        result.originalHandCardNum_ = originalHandCardNum_;
        result.challengeFirstHandChance_ = challengeFirstHandChance_;
        result.pvpChallengeTime_ = pvpChallengeTime_;
        result.firstHandEnergyCardCount_ = firstHandEnergyCardCount_;
        result.secondtHandEnergyCardCount_ = secondtHandEnergyCardCount_;
        result.pvpFirstHandTime_ = pvpFirstHandTime_;
        result.pvpSecondHandTime_ = pvpSecondHandTime_;
        result.lordCardSpacing_ = lordCardSpacing_;
        result.energyCardCheckUp_ = energyCardCheckUp_;
        result.pvpOriginalHandCardNum_ = pvpOriginalHandCardNum_;
        if (((bitField0_ & 0x00000020) != 0)) {
          battleSpeedUpRates_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.battleSpeedUpRates_ = battleSpeedUpRates_;
        result.hangUpIntervalTime_ = hangUpIntervalTime_;
        result.nextWaveAppearInterval_ = nextWaveAppearInterval_;
        if (diceBuilder_ == null) {
          result.dice_ = dice_;
        } else {
          result.dice_ = diceBuilder_.build();
        }
        result.remainsCompoundOriginalCount_ = remainsCompoundOriginalCount_;
        if (mazeValueFactorBuilder_ == null) {
          result.mazeValueFactor_ = mazeValueFactor_;
        } else {
          result.mazeValueFactor_ = mazeValueFactorBuilder_.build();
        }
        result.battleDashTime_ = battleDashTime_;
        result.battleDashBackTime_ = battleDashBackTime_;
        result.battleRoundSafeTime_ = battleRoundSafeTime_;
        result.battleWaitNextTime_ = battleWaitNextTime_;
        result.battleRoundTime_ = battleRoundTime_;
        result.battleHitFlyForce_ = battleHitFlyForce_;
        result.battleHitDownForce_ = battleHitDownForce_;
        result.battleHitFlyMaxHeight_ = battleHitFlyMaxHeight_;
        result.battleGravity_ = battleGravity_;
        result.battleFlyUpGravity_ = battleFlyUpGravity_;
        result.battleNearTopGravity_ = battleNearTopGravity_;
        result.battleNearTopSpeed_ = battleNearTopSpeed_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Config.BattleParamTemplateOuterClass.BattleParamTemplate) {
          return mergeFrom((Config.BattleParamTemplateOuterClass.BattleParamTemplate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Config.BattleParamTemplateOuterClass.BattleParamTemplate other) {
        if (other == Config.BattleParamTemplateOuterClass.BattleParamTemplate.getDefaultInstance()) return this;
        if (other.getBattleStartWaitTime() != 0) {
          setBattleStartWaitTime(other.getBattleStartWaitTime());
        }
        if (!other.battleMapSizes_.isEmpty()) {
          if (battleMapSizes_.isEmpty()) {
            battleMapSizes_ = other.battleMapSizes_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBattleMapSizesIsMutable();
            battleMapSizes_.addAll(other.battleMapSizes_);
          }
          onChanged();
        }
        if (other.hasDodgeEffectLimit()) {
          mergeDodgeEffectLimit(other.getDodgeEffectLimit());
        }
        if (other.hasCritEffectLimit()) {
          mergeCritEffectLimit(other.getCritEffectLimit());
        }
        if (other.hasCritDamEffectLimit()) {
          mergeCritDamEffectLimit(other.getCritDamEffectLimit());
        }
        if (other.hasDefenseRateEffectLimit()) {
          mergeDefenseRateEffectLimit(other.getDefenseRateEffectLimit());
        }
        if (other.getDamageReduceLimit() != 0) {
          setDamageReduceLimit(other.getDamageReduceLimit());
        }
        if (other.hasCoolDownLimit()) {
          mergeCoolDownLimit(other.getCoolDownLimit());
        }
        if (other.hasElementEffectLimit()) {
          mergeElementEffectLimit(other.getElementEffectLimit());
        }
        if (other.getElementAttackBase() != 0D) {
          setElementAttackBase(other.getElementAttackBase());
        }
        if (other.getElementDefenseBase() != 0D) {
          setElementDefenseBase(other.getElementDefenseBase());
        }
        if (other.getElementEffectBase() != 0) {
          setElementEffectBase(other.getElementEffectBase());
        }
        if (other.hasDamageCorrectionRange()) {
          mergeDamageCorrectionRange(other.getDamageCorrectionRange());
        }
        if (other.getDodgeCorrection() != 0D) {
          setDodgeCorrection(other.getDodgeCorrection());
        }
        if (other.getCritCorrection() != 0D) {
          setCritCorrection(other.getCritCorrection());
        }
        if (other.getBlckEffect() != 0) {
          setBlckEffect(other.getBlckEffect());
        }
        if (other.hasBlockEffectLimit()) {
          mergeBlockEffectLimit(other.getBlockEffectLimit());
        }
        if (other.getHeroMaxEnergyValue() != 0) {
          setHeroMaxEnergyValue(other.getHeroMaxEnergyValue());
        }
        if (other.getHeroMaxEnergyNum() != 0) {
          setHeroMaxEnergyNum(other.getHeroMaxEnergyNum());
        }
        if (other.getLordMaxEnergy() != 0) {
          setLordMaxEnergy(other.getLordMaxEnergy());
        }
        if (other.getMaxAttackSpeed() != 0D) {
          setMaxAttackSpeed(other.getMaxAttackSpeed());
        }
        if (other.getHeroSkillCount() != 0) {
          setHeroSkillCount(other.getHeroSkillCount());
        }
        if (other.getMonsterWalkModeTime() != 0) {
          setMonsterWalkModeTime(other.getMonsterWalkModeTime());
        }
        if (other.getMonsterDropModeTime() != 0) {
          setMonsterDropModeTime(other.getMonsterDropModeTime());
        }
        if (other.hasBattleMapGrid()) {
          mergeBattleMapGrid(other.getBattleMapGrid());
        }
        if (other.getGridSize() != 0) {
          setGridSize(other.getGridSize());
        }
        if (other.getLordGrid() != 0) {
          setLordGrid(other.getLordGrid());
        }
        if (other.getSkillMoveTime() != 0) {
          setSkillMoveTime(other.getSkillMoveTime());
        }
        if (other.getSkillFlashTime() != 0) {
          setSkillFlashTime(other.getSkillFlashTime());
        }
        if (other.getMonsterDropRange() != 0) {
          setMonsterDropRange(other.getMonsterDropRange());
        }
        if (other.getOffsetDistance() != 0) {
          setOffsetDistance(other.getOffsetDistance());
        }
        if (other.getDropItemStayTime() != 0) {
          setDropItemStayTime(other.getDropItemStayTime());
        }
        if (other.getBannerStayMaxtime() != 0) {
          setBannerStayMaxtime(other.getBannerStayMaxtime());
        }
        if (other.getLordMoveSpeed() != 0) {
          setLordMoveSpeed(other.getLordMoveSpeed());
        }
        if (other.getDropItemRange() != 0) {
          setDropItemRange(other.getDropItemRange());
        }
        if (other.getMaxRoom() != 0) {
          setMaxRoom(other.getMaxRoom());
        }
        if (other.getLordHealthFactor() != 0) {
          setLordHealthFactor(other.getLordHealthFactor());
        }
        if (!other.runeRefreshPrices_.isEmpty()) {
          if (runeRefreshPrices_.isEmpty()) {
            runeRefreshPrices_ = other.runeRefreshPrices_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRuneRefreshPricesIsMutable();
            runeRefreshPrices_.addAll(other.runeRefreshPrices_);
          }
          onChanged();
        }
        if (other.getHeroMaxRuneCount() != 0) {
          setHeroMaxRuneCount(other.getHeroMaxRuneCount());
        }
        if (other.getMaxSoulStampDemand() != 0) {
          setMaxSoulStampDemand(other.getMaxSoulStampDemand());
        }
        if (other.getSoulStampDemandFactor() != 0D) {
          setSoulStampDemandFactor(other.getSoulStampDemandFactor());
        }
        if (other.getBagCapacity() != 0) {
          setBagCapacity(other.getBagCapacity());
        }
        if (other.getResolveFactor() != 0) {
          setResolveFactor(other.getResolveFactor());
        }
        if (other.getSkillFadeOutTime() != 0) {
          setSkillFadeOutTime(other.getSkillFadeOutTime());
        }
        if (other.getPvpEnemyLordGrid() != 0) {
          setPvpEnemyLordGrid(other.getPvpEnemyLordGrid());
        }
        if (!other.pvpSceneBuffs_.isEmpty()) {
          if (pvpSceneBuffs_.isEmpty()) {
            pvpSceneBuffs_ = other.pvpSceneBuffs_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensurePvpSceneBuffsIsMutable();
            pvpSceneBuffs_.addAll(other.pvpSceneBuffs_);
          }
          onChanged();
        }
        if (other.getPvpFirstHandWaiting() != 0) {
          setPvpFirstHandWaiting(other.getPvpFirstHandWaiting());
        }
        if (other.getPvpSecondHandWaiting() != 0) {
          setPvpSecondHandWaiting(other.getPvpSecondHandWaiting());
        }
        if (other.getPvpStartCountDown() != 0) {
          setPvpStartCountDown(other.getPvpStartCountDown());
        }
        if (other.getPvpOverCountDown() != 0) {
          setPvpOverCountDown(other.getPvpOverCountDown());
        }
        if (other.hasSoulInterest()) {
          mergeSoulInterest(other.getSoulInterest());
        }
        if (other.getBattleHeroDieValue() != 0) {
          setBattleHeroDieValue(other.getBattleHeroDieValue());
        }
        if (other.getBattleMaxTimeValue() != 0) {
          setBattleMaxTimeValue(other.getBattleMaxTimeValue());
        }
        if (other.getBattleJumpTime() != 0) {
          setBattleJumpTime(other.getBattleJumpTime());
        }
        if (other.getProfessionUpgradeCount() != 0) {
          setProfessionUpgradeCount(other.getProfessionUpgradeCount());
        }
        if (other.getHandCardLimit() != 0) {
          setHandCardLimit(other.getHandCardLimit());
        }
        if (!other.forgetCosts_.isEmpty()) {
          if (forgetCosts_.isEmpty()) {
            forgetCosts_ = other.forgetCosts_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureForgetCostsIsMutable();
            forgetCosts_.addAll(other.forgetCosts_);
          }
          onChanged();
        }
        if (!other.prayCosts_.isEmpty()) {
          if (prayCosts_.isEmpty()) {
            prayCosts_ = other.prayCosts_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensurePrayCostsIsMutable();
            prayCosts_.addAll(other.prayCosts_);
          }
          onChanged();
        }
        if (other.getCardLevelUpNeedNum() != 0) {
          setCardLevelUpNeedNum(other.getCardLevelUpNeedNum());
        }
        if (other.getCardUseToDrawUnique() != 0) {
          setCardUseToDrawUnique(other.getCardUseToDrawUnique());
        }
        if (other.getOriginalHandCardLimit() != 0) {
          setOriginalHandCardLimit(other.getOriginalHandCardLimit());
        }
        if (other.getUniqueSkillCardLimitCountOT() != 0) {
          setUniqueSkillCardLimitCountOT(other.getUniqueSkillCardLimitCountOT());
        }
        if (other.getDropCoefficientInEliteRoom() != 0) {
          setDropCoefficientInEliteRoom(other.getDropCoefficientInEliteRoom());
        }
        if (other.getDropCoefficientInBossRoom() != 0) {
          setDropCoefficientInBossRoom(other.getDropCoefficientInBossRoom());
        }
        if (other.getHeroRebornTime() != 0) {
          setHeroRebornTime(other.getHeroRebornTime());
        }
        if (other.getHeroRebornHpCostFactor() != 0) {
          setHeroRebornHpCostFactor(other.getHeroRebornHpCostFactor());
        }
        if (other.getOriginalHandCardNum() != 0) {
          setOriginalHandCardNum(other.getOriginalHandCardNum());
        }
        if (other.getChallengeFirstHandChance() != 0) {
          setChallengeFirstHandChance(other.getChallengeFirstHandChance());
        }
        if (other.getPvpChallengeTime() != 0) {
          setPvpChallengeTime(other.getPvpChallengeTime());
        }
        if (other.getFirstHandEnergyCardCount() != 0) {
          setFirstHandEnergyCardCount(other.getFirstHandEnergyCardCount());
        }
        if (other.getSecondtHandEnergyCardCount() != 0) {
          setSecondtHandEnergyCardCount(other.getSecondtHandEnergyCardCount());
        }
        if (other.getPvpFirstHandTime() != 0) {
          setPvpFirstHandTime(other.getPvpFirstHandTime());
        }
        if (other.getPvpSecondHandTime() != 0) {
          setPvpSecondHandTime(other.getPvpSecondHandTime());
        }
        if (other.getLordCardSpacing() != 0) {
          setLordCardSpacing(other.getLordCardSpacing());
        }
        if (other.getEnergyCardCheckUp() != 0) {
          setEnergyCardCheckUp(other.getEnergyCardCheckUp());
        }
        if (other.getPvpOriginalHandCardNum() != 0) {
          setPvpOriginalHandCardNum(other.getPvpOriginalHandCardNum());
        }
        if (!other.battleSpeedUpRates_.isEmpty()) {
          if (battleSpeedUpRates_.isEmpty()) {
            battleSpeedUpRates_ = other.battleSpeedUpRates_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureBattleSpeedUpRatesIsMutable();
            battleSpeedUpRates_.addAll(other.battleSpeedUpRates_);
          }
          onChanged();
        }
        if (other.getHangUpIntervalTime() != 0) {
          setHangUpIntervalTime(other.getHangUpIntervalTime());
        }
        if (other.getNextWaveAppearInterval() != 0) {
          setNextWaveAppearInterval(other.getNextWaveAppearInterval());
        }
        if (other.hasDice()) {
          mergeDice(other.getDice());
        }
        if (other.getRemainsCompoundOriginalCount() != 0) {
          setRemainsCompoundOriginalCount(other.getRemainsCompoundOriginalCount());
        }
        if (other.hasMazeValueFactor()) {
          mergeMazeValueFactor(other.getMazeValueFactor());
        }
        if (other.getBattleDashTime() != 0) {
          setBattleDashTime(other.getBattleDashTime());
        }
        if (other.getBattleDashBackTime() != 0) {
          setBattleDashBackTime(other.getBattleDashBackTime());
        }
        if (other.getBattleRoundSafeTime() != 0) {
          setBattleRoundSafeTime(other.getBattleRoundSafeTime());
        }
        if (other.getBattleWaitNextTime() != 0) {
          setBattleWaitNextTime(other.getBattleWaitNextTime());
        }
        if (other.getBattleRoundTime() != 0) {
          setBattleRoundTime(other.getBattleRoundTime());
        }
        if (other.getBattleHitFlyForce() != 0) {
          setBattleHitFlyForce(other.getBattleHitFlyForce());
        }
        if (other.getBattleHitDownForce() != 0) {
          setBattleHitDownForce(other.getBattleHitDownForce());
        }
        if (other.getBattleHitFlyMaxHeight() != 0) {
          setBattleHitFlyMaxHeight(other.getBattleHitFlyMaxHeight());
        }
        if (other.getBattleGravity() != 0) {
          setBattleGravity(other.getBattleGravity());
        }
        if (other.getBattleFlyUpGravity() != 0) {
          setBattleFlyUpGravity(other.getBattleFlyUpGravity());
        }
        if (other.getBattleNearTopGravity() != 0) {
          setBattleNearTopGravity(other.getBattleNearTopGravity());
        }
        if (other.getBattleNearTopSpeed() != 0) {
          setBattleNearTopSpeed(other.getBattleNearTopSpeed());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Config.BattleParamTemplateOuterClass.BattleParamTemplate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Config.BattleParamTemplateOuterClass.BattleParamTemplate) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int battleStartWaitTime_ ;
      /**
       * <pre>
       * 战斗开始的等待时间
       * </pre>
       *
       * <code>int32 BattleStartWaitTime = 1;</code>
       * @return The battleStartWaitTime.
       */
      @java.lang.Override
      public int getBattleStartWaitTime() {
        return battleStartWaitTime_;
      }
      /**
       * <pre>
       * 战斗开始的等待时间
       * </pre>
       *
       * <code>int32 BattleStartWaitTime = 1;</code>
       * @param value The battleStartWaitTime to set.
       * @return This builder for chaining.
       */
      public Builder setBattleStartWaitTime(int value) {
        
        battleStartWaitTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 战斗开始的等待时间
       * </pre>
       *
       * <code>int32 BattleStartWaitTime = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleStartWaitTime() {
        
        battleStartWaitTime_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList battleMapSizes_ = emptyIntList();
      private void ensureBattleMapSizesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          battleMapSizes_ = mutableCopy(battleMapSizes_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
       * </pre>
       *
       * <code>repeated int32 BattleMapSizes = 2;</code>
       * @return A list containing the battleMapSizes.
       */
      public java.util.List<java.lang.Integer>
          getBattleMapSizesList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(battleMapSizes_) : battleMapSizes_;
      }
      /**
       * <pre>
       * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
       * </pre>
       *
       * <code>repeated int32 BattleMapSizes = 2;</code>
       * @return The count of battleMapSizes.
       */
      public int getBattleMapSizesCount() {
        return battleMapSizes_.size();
      }
      /**
       * <pre>
       * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
       * </pre>
       *
       * <code>repeated int32 BattleMapSizes = 2;</code>
       * @param index The index of the element to return.
       * @return The battleMapSizes at the given index.
       */
      public int getBattleMapSizes(int index) {
        return battleMapSizes_.getInt(index);
      }
      /**
       * <pre>
       * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
       * </pre>
       *
       * <code>repeated int32 BattleMapSizes = 2;</code>
       * @param index The index to set the value at.
       * @param value The battleMapSizes to set.
       * @return This builder for chaining.
       */
      public Builder setBattleMapSizes(
          int index, int value) {
        ensureBattleMapSizesIsMutable();
        battleMapSizes_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
       * </pre>
       *
       * <code>repeated int32 BattleMapSizes = 2;</code>
       * @param value The battleMapSizes to add.
       * @return This builder for chaining.
       */
      public Builder addBattleMapSizes(int value) {
        ensureBattleMapSizesIsMutable();
        battleMapSizes_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
       * </pre>
       *
       * <code>repeated int32 BattleMapSizes = 2;</code>
       * @param values The battleMapSizes to add.
       * @return This builder for chaining.
       */
      public Builder addAllBattleMapSizes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBattleMapSizesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, battleMapSizes_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 战斗场景的大小，第一项为宽，第二项为高(坐标原点为左下角)
       * </pre>
       *
       * <code>repeated int32 BattleMapSizes = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleMapSizes() {
        battleMapSizes_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ dodgeEffectLimit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> dodgeEffectLimitBuilder_;
      /**
       * <pre>
       * 闪避上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
       * @return Whether the dodgeEffectLimit field is set.
       */
      public boolean hasDodgeEffectLimit() {
        return dodgeEffectLimitBuilder_ != null || dodgeEffectLimit_ != null;
      }
      /**
       * <pre>
       * 闪避上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
       * @return The dodgeEffectLimit.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDodgeEffectLimit() {
        if (dodgeEffectLimitBuilder_ == null) {
          return dodgeEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : dodgeEffectLimit_;
        } else {
          return dodgeEffectLimitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 闪避上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
       */
      public Builder setDodgeEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (dodgeEffectLimitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dodgeEffectLimit_ = value;
          onChanged();
        } else {
          dodgeEffectLimitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 闪避上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
       */
      public Builder setDodgeEffectLimit(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder builderForValue) {
        if (dodgeEffectLimitBuilder_ == null) {
          dodgeEffectLimit_ = builderForValue.build();
          onChanged();
        } else {
          dodgeEffectLimitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 闪避上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
       */
      public Builder mergeDodgeEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (dodgeEffectLimitBuilder_ == null) {
          if (dodgeEffectLimit_ != null) {
            dodgeEffectLimit_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.newBuilder(dodgeEffectLimit_).mergeFrom(value).buildPartial();
          } else {
            dodgeEffectLimit_ = value;
          }
          onChanged();
        } else {
          dodgeEffectLimitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 闪避上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
       */
      public Builder clearDodgeEffectLimit() {
        if (dodgeEffectLimitBuilder_ == null) {
          dodgeEffectLimit_ = null;
          onChanged();
        } else {
          dodgeEffectLimit_ = null;
          dodgeEffectLimitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 闪避上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder getDodgeEffectLimitBuilder() {
        
        onChanged();
        return getDodgeEffectLimitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 闪避上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getDodgeEffectLimitOrBuilder() {
        if (dodgeEffectLimitBuilder_ != null) {
          return dodgeEffectLimitBuilder_.getMessageOrBuilder();
        } else {
          return dodgeEffectLimit_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : dodgeEffectLimit_;
        }
      }
      /**
       * <pre>
       * 闪避上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> 
          getDodgeEffectLimitFieldBuilder() {
        if (dodgeEffectLimitBuilder_ == null) {
          dodgeEffectLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder>(
                  getDodgeEffectLimit(),
                  getParentForChildren(),
                  isClean());
          dodgeEffectLimit_ = null;
        }
        return dodgeEffectLimitBuilder_;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ critEffectLimit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> critEffectLimitBuilder_;
      /**
       * <pre>
       * 暴击上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
       * @return Whether the critEffectLimit field is set.
       */
      public boolean hasCritEffectLimit() {
        return critEffectLimitBuilder_ != null || critEffectLimit_ != null;
      }
      /**
       * <pre>
       * 暴击上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
       * @return The critEffectLimit.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getCritEffectLimit() {
        if (critEffectLimitBuilder_ == null) {
          return critEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : critEffectLimit_;
        } else {
          return critEffectLimitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 暴击上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
       */
      public Builder setCritEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (critEffectLimitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          critEffectLimit_ = value;
          onChanged();
        } else {
          critEffectLimitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 暴击上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
       */
      public Builder setCritEffectLimit(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder builderForValue) {
        if (critEffectLimitBuilder_ == null) {
          critEffectLimit_ = builderForValue.build();
          onChanged();
        } else {
          critEffectLimitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 暴击上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
       */
      public Builder mergeCritEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (critEffectLimitBuilder_ == null) {
          if (critEffectLimit_ != null) {
            critEffectLimit_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.newBuilder(critEffectLimit_).mergeFrom(value).buildPartial();
          } else {
            critEffectLimit_ = value;
          }
          onChanged();
        } else {
          critEffectLimitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 暴击上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
       */
      public Builder clearCritEffectLimit() {
        if (critEffectLimitBuilder_ == null) {
          critEffectLimit_ = null;
          onChanged();
        } else {
          critEffectLimit_ = null;
          critEffectLimitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 暴击上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder getCritEffectLimitBuilder() {
        
        onChanged();
        return getCritEffectLimitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 暴击上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getCritEffectLimitOrBuilder() {
        if (critEffectLimitBuilder_ != null) {
          return critEffectLimitBuilder_.getMessageOrBuilder();
        } else {
          return critEffectLimit_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : critEffectLimit_;
        }
      }
      /**
       * <pre>
       * 暴击上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> 
          getCritEffectLimitFieldBuilder() {
        if (critEffectLimitBuilder_ == null) {
          critEffectLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder>(
                  getCritEffectLimit(),
                  getParentForChildren(),
                  isClean());
          critEffectLimit_ = null;
        }
        return critEffectLimitBuilder_;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ critDamEffectLimit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> critDamEffectLimitBuilder_;
      /**
       * <pre>
       * 暴击伤害上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
       * @return Whether the critDamEffectLimit field is set.
       */
      public boolean hasCritDamEffectLimit() {
        return critDamEffectLimitBuilder_ != null || critDamEffectLimit_ != null;
      }
      /**
       * <pre>
       * 暴击伤害上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
       * @return The critDamEffectLimit.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getCritDamEffectLimit() {
        if (critDamEffectLimitBuilder_ == null) {
          return critDamEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : critDamEffectLimit_;
        } else {
          return critDamEffectLimitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 暴击伤害上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
       */
      public Builder setCritDamEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (critDamEffectLimitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          critDamEffectLimit_ = value;
          onChanged();
        } else {
          critDamEffectLimitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 暴击伤害上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
       */
      public Builder setCritDamEffectLimit(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder builderForValue) {
        if (critDamEffectLimitBuilder_ == null) {
          critDamEffectLimit_ = builderForValue.build();
          onChanged();
        } else {
          critDamEffectLimitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 暴击伤害上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
       */
      public Builder mergeCritDamEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (critDamEffectLimitBuilder_ == null) {
          if (critDamEffectLimit_ != null) {
            critDamEffectLimit_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.newBuilder(critDamEffectLimit_).mergeFrom(value).buildPartial();
          } else {
            critDamEffectLimit_ = value;
          }
          onChanged();
        } else {
          critDamEffectLimitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 暴击伤害上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
       */
      public Builder clearCritDamEffectLimit() {
        if (critDamEffectLimitBuilder_ == null) {
          critDamEffectLimit_ = null;
          onChanged();
        } else {
          critDamEffectLimit_ = null;
          critDamEffectLimitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 暴击伤害上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder getCritDamEffectLimitBuilder() {
        
        onChanged();
        return getCritDamEffectLimitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 暴击伤害上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getCritDamEffectLimitOrBuilder() {
        if (critDamEffectLimitBuilder_ != null) {
          return critDamEffectLimitBuilder_.getMessageOrBuilder();
        } else {
          return critDamEffectLimit_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : critDamEffectLimit_;
        }
      }
      /**
       * <pre>
       * 暴击伤害上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> 
          getCritDamEffectLimitFieldBuilder() {
        if (critDamEffectLimitBuilder_ == null) {
          critDamEffectLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder>(
                  getCritDamEffectLimit(),
                  getParentForChildren(),
                  isClean());
          critDamEffectLimit_ = null;
        }
        return critDamEffectLimitBuilder_;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ defenseRateEffectLimit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> defenseRateEffectLimitBuilder_;
      /**
       * <pre>
       * 伤害抗性上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
       * @return Whether the defenseRateEffectLimit field is set.
       */
      public boolean hasDefenseRateEffectLimit() {
        return defenseRateEffectLimitBuilder_ != null || defenseRateEffectLimit_ != null;
      }
      /**
       * <pre>
       * 伤害抗性上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
       * @return The defenseRateEffectLimit.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDefenseRateEffectLimit() {
        if (defenseRateEffectLimitBuilder_ == null) {
          return defenseRateEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : defenseRateEffectLimit_;
        } else {
          return defenseRateEffectLimitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 伤害抗性上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
       */
      public Builder setDefenseRateEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (defenseRateEffectLimitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          defenseRateEffectLimit_ = value;
          onChanged();
        } else {
          defenseRateEffectLimitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 伤害抗性上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
       */
      public Builder setDefenseRateEffectLimit(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder builderForValue) {
        if (defenseRateEffectLimitBuilder_ == null) {
          defenseRateEffectLimit_ = builderForValue.build();
          onChanged();
        } else {
          defenseRateEffectLimitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 伤害抗性上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
       */
      public Builder mergeDefenseRateEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (defenseRateEffectLimitBuilder_ == null) {
          if (defenseRateEffectLimit_ != null) {
            defenseRateEffectLimit_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.newBuilder(defenseRateEffectLimit_).mergeFrom(value).buildPartial();
          } else {
            defenseRateEffectLimit_ = value;
          }
          onChanged();
        } else {
          defenseRateEffectLimitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 伤害抗性上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
       */
      public Builder clearDefenseRateEffectLimit() {
        if (defenseRateEffectLimitBuilder_ == null) {
          defenseRateEffectLimit_ = null;
          onChanged();
        } else {
          defenseRateEffectLimit_ = null;
          defenseRateEffectLimitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 伤害抗性上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder getDefenseRateEffectLimitBuilder() {
        
        onChanged();
        return getDefenseRateEffectLimitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 伤害抗性上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getDefenseRateEffectLimitOrBuilder() {
        if (defenseRateEffectLimitBuilder_ != null) {
          return defenseRateEffectLimitBuilder_.getMessageOrBuilder();
        } else {
          return defenseRateEffectLimit_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : defenseRateEffectLimit_;
        }
      }
      /**
       * <pre>
       * 伤害抗性上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> 
          getDefenseRateEffectLimitFieldBuilder() {
        if (defenseRateEffectLimitBuilder_ == null) {
          defenseRateEffectLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder>(
                  getDefenseRateEffectLimit(),
                  getParentForChildren(),
                  isClean());
          defenseRateEffectLimit_ = null;
        }
        return defenseRateEffectLimitBuilder_;
      }

      private int damageReduceLimit_ ;
      /**
       * <pre>
       * 伤害减免上限
       * </pre>
       *
       * <code>int32 DamageReduceLimit = 7;</code>
       * @return The damageReduceLimit.
       */
      @java.lang.Override
      public int getDamageReduceLimit() {
        return damageReduceLimit_;
      }
      /**
       * <pre>
       * 伤害减免上限
       * </pre>
       *
       * <code>int32 DamageReduceLimit = 7;</code>
       * @param value The damageReduceLimit to set.
       * @return This builder for chaining.
       */
      public Builder setDamageReduceLimit(int value) {
        
        damageReduceLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 伤害减免上限
       * </pre>
       *
       * <code>int32 DamageReduceLimit = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearDamageReduceLimit() {
        
        damageReduceLimit_ = 0;
        onChanged();
        return this;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ coolDownLimit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> coolDownLimitBuilder_;
      /**
       * <pre>
       * 攻击速度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
       * @return Whether the coolDownLimit field is set.
       */
      public boolean hasCoolDownLimit() {
        return coolDownLimitBuilder_ != null || coolDownLimit_ != null;
      }
      /**
       * <pre>
       * 攻击速度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
       * @return The coolDownLimit.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getCoolDownLimit() {
        if (coolDownLimitBuilder_ == null) {
          return coolDownLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : coolDownLimit_;
        } else {
          return coolDownLimitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 攻击速度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
       */
      public Builder setCoolDownLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (coolDownLimitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          coolDownLimit_ = value;
          onChanged();
        } else {
          coolDownLimitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 攻击速度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
       */
      public Builder setCoolDownLimit(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder builderForValue) {
        if (coolDownLimitBuilder_ == null) {
          coolDownLimit_ = builderForValue.build();
          onChanged();
        } else {
          coolDownLimitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 攻击速度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
       */
      public Builder mergeCoolDownLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (coolDownLimitBuilder_ == null) {
          if (coolDownLimit_ != null) {
            coolDownLimit_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.newBuilder(coolDownLimit_).mergeFrom(value).buildPartial();
          } else {
            coolDownLimit_ = value;
          }
          onChanged();
        } else {
          coolDownLimitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 攻击速度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
       */
      public Builder clearCoolDownLimit() {
        if (coolDownLimitBuilder_ == null) {
          coolDownLimit_ = null;
          onChanged();
        } else {
          coolDownLimit_ = null;
          coolDownLimitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 攻击速度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder getCoolDownLimitBuilder() {
        
        onChanged();
        return getCoolDownLimitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 攻击速度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getCoolDownLimitOrBuilder() {
        if (coolDownLimitBuilder_ != null) {
          return coolDownLimitBuilder_.getMessageOrBuilder();
        } else {
          return coolDownLimit_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : coolDownLimit_;
        }
      }
      /**
       * <pre>
       * 攻击速度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> 
          getCoolDownLimitFieldBuilder() {
        if (coolDownLimitBuilder_ == null) {
          coolDownLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder>(
                  getCoolDownLimit(),
                  getParentForChildren(),
                  isClean());
          coolDownLimit_ = null;
        }
        return coolDownLimitBuilder_;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ elementEffectLimit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_OrBuilder> elementEffectLimitBuilder_;
      /**
       * <pre>
       * 克制强度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
       * @return Whether the elementEffectLimit field is set.
       */
      public boolean hasElementEffectLimit() {
        return elementEffectLimitBuilder_ != null || elementEffectLimit_ != null;
      }
      /**
       * <pre>
       * 克制强度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
       * @return The elementEffectLimit.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ getElementEffectLimit() {
        if (elementEffectLimitBuilder_ == null) {
          return elementEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.getDefaultInstance() : elementEffectLimit_;
        } else {
          return elementEffectLimitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 克制强度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
       */
      public Builder setElementEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ value) {
        if (elementEffectLimitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          elementEffectLimit_ = value;
          onChanged();
        } else {
          elementEffectLimitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 克制强度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
       */
      public Builder setElementEffectLimit(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.Builder builderForValue) {
        if (elementEffectLimitBuilder_ == null) {
          elementEffectLimit_ = builderForValue.build();
          onChanged();
        } else {
          elementEffectLimitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 克制强度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
       */
      public Builder mergeElementEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_ value) {
        if (elementEffectLimitBuilder_ == null) {
          if (elementEffectLimit_ != null) {
            elementEffectLimit_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.newBuilder(elementEffectLimit_).mergeFrom(value).buildPartial();
          } else {
            elementEffectLimit_ = value;
          }
          onChanged();
        } else {
          elementEffectLimitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 克制强度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
       */
      public Builder clearElementEffectLimit() {
        if (elementEffectLimitBuilder_ == null) {
          elementEffectLimit_ = null;
          onChanged();
        } else {
          elementEffectLimit_ = null;
          elementEffectLimitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 克制强度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.Builder getElementEffectLimitBuilder() {
        
        onChanged();
        return getElementEffectLimitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 克制强度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_OrBuilder getElementEffectLimitOrBuilder() {
        if (elementEffectLimitBuilder_ != null) {
          return elementEffectLimitBuilder_.getMessageOrBuilder();
        } else {
          return elementEffectLimit_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.getDefaultInstance() : elementEffectLimit_;
        }
      }
      /**
       * <pre>
       * 克制强度上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_OrBuilder> 
          getElementEffectLimitFieldBuilder() {
        if (elementEffectLimitBuilder_ == null) {
          elementEffectLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Elementeffectlimit_OrBuilder>(
                  getElementEffectLimit(),
                  getParentForChildren(),
                  isClean());
          elementEffectLimit_ = null;
        }
        return elementEffectLimitBuilder_;
      }

      private double elementAttackBase_ ;
      /**
       * <pre>
       * 攻击基础克制强度
       * </pre>
       *
       * <code>double ElementAttackBase = 10;</code>
       * @return The elementAttackBase.
       */
      @java.lang.Override
      public double getElementAttackBase() {
        return elementAttackBase_;
      }
      /**
       * <pre>
       * 攻击基础克制强度
       * </pre>
       *
       * <code>double ElementAttackBase = 10;</code>
       * @param value The elementAttackBase to set.
       * @return This builder for chaining.
       */
      public Builder setElementAttackBase(double value) {
        
        elementAttackBase_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 攻击基础克制强度
       * </pre>
       *
       * <code>double ElementAttackBase = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearElementAttackBase() {
        
        elementAttackBase_ = 0D;
        onChanged();
        return this;
      }

      private double elementDefenseBase_ ;
      /**
       * <pre>
       * 防御基础克制强度
       * </pre>
       *
       * <code>double ElementDefenseBase = 11;</code>
       * @return The elementDefenseBase.
       */
      @java.lang.Override
      public double getElementDefenseBase() {
        return elementDefenseBase_;
      }
      /**
       * <pre>
       * 防御基础克制强度
       * </pre>
       *
       * <code>double ElementDefenseBase = 11;</code>
       * @param value The elementDefenseBase to set.
       * @return This builder for chaining.
       */
      public Builder setElementDefenseBase(double value) {
        
        elementDefenseBase_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 防御基础克制强度
       * </pre>
       *
       * <code>double ElementDefenseBase = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearElementDefenseBase() {
        
        elementDefenseBase_ = 0D;
        onChanged();
        return this;
      }

      private int elementEffectBase_ ;
      /**
       * <pre>
       * 默认克制强度
       * </pre>
       *
       * <code>int32 ElementEffectBase = 12;</code>
       * @return The elementEffectBase.
       */
      @java.lang.Override
      public int getElementEffectBase() {
        return elementEffectBase_;
      }
      /**
       * <pre>
       * 默认克制强度
       * </pre>
       *
       * <code>int32 ElementEffectBase = 12;</code>
       * @param value The elementEffectBase to set.
       * @return This builder for chaining.
       */
      public Builder setElementEffectBase(int value) {
        
        elementEffectBase_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 默认克制强度
       * </pre>
       *
       * <code>int32 ElementEffectBase = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearElementEffectBase() {
        
        elementEffectBase_ = 0;
        onChanged();
        return this;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ damageCorrectionRange_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> damageCorrectionRangeBuilder_;
      /**
       * <pre>
       * 伤害随机范围
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
       * @return Whether the damageCorrectionRange field is set.
       */
      public boolean hasDamageCorrectionRange() {
        return damageCorrectionRangeBuilder_ != null || damageCorrectionRange_ != null;
      }
      /**
       * <pre>
       * 伤害随机范围
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
       * @return The damageCorrectionRange.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getDamageCorrectionRange() {
        if (damageCorrectionRangeBuilder_ == null) {
          return damageCorrectionRange_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : damageCorrectionRange_;
        } else {
          return damageCorrectionRangeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 伤害随机范围
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
       */
      public Builder setDamageCorrectionRange(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (damageCorrectionRangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          damageCorrectionRange_ = value;
          onChanged();
        } else {
          damageCorrectionRangeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 伤害随机范围
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
       */
      public Builder setDamageCorrectionRange(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder builderForValue) {
        if (damageCorrectionRangeBuilder_ == null) {
          damageCorrectionRange_ = builderForValue.build();
          onChanged();
        } else {
          damageCorrectionRangeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 伤害随机范围
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
       */
      public Builder mergeDamageCorrectionRange(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (damageCorrectionRangeBuilder_ == null) {
          if (damageCorrectionRange_ != null) {
            damageCorrectionRange_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.newBuilder(damageCorrectionRange_).mergeFrom(value).buildPartial();
          } else {
            damageCorrectionRange_ = value;
          }
          onChanged();
        } else {
          damageCorrectionRangeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 伤害随机范围
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
       */
      public Builder clearDamageCorrectionRange() {
        if (damageCorrectionRangeBuilder_ == null) {
          damageCorrectionRange_ = null;
          onChanged();
        } else {
          damageCorrectionRange_ = null;
          damageCorrectionRangeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 伤害随机范围
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder getDamageCorrectionRangeBuilder() {
        
        onChanged();
        return getDamageCorrectionRangeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 伤害随机范围
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getDamageCorrectionRangeOrBuilder() {
        if (damageCorrectionRangeBuilder_ != null) {
          return damageCorrectionRangeBuilder_.getMessageOrBuilder();
        } else {
          return damageCorrectionRange_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : damageCorrectionRange_;
        }
      }
      /**
       * <pre>
       * 伤害随机范围
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> 
          getDamageCorrectionRangeFieldBuilder() {
        if (damageCorrectionRangeBuilder_ == null) {
          damageCorrectionRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder>(
                  getDamageCorrectionRange(),
                  getParentForChildren(),
                  isClean());
          damageCorrectionRange_ = null;
        }
        return damageCorrectionRangeBuilder_;
      }

      private double dodgeCorrection_ ;
      /**
       * <pre>
       * 闪避修正系数
       * </pre>
       *
       * <code>double DodgeCorrection = 14;</code>
       * @return The dodgeCorrection.
       */
      @java.lang.Override
      public double getDodgeCorrection() {
        return dodgeCorrection_;
      }
      /**
       * <pre>
       * 闪避修正系数
       * </pre>
       *
       * <code>double DodgeCorrection = 14;</code>
       * @param value The dodgeCorrection to set.
       * @return This builder for chaining.
       */
      public Builder setDodgeCorrection(double value) {
        
        dodgeCorrection_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 闪避修正系数
       * </pre>
       *
       * <code>double DodgeCorrection = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearDodgeCorrection() {
        
        dodgeCorrection_ = 0D;
        onChanged();
        return this;
      }

      private double critCorrection_ ;
      /**
       * <pre>
       * 暴击修正系数
       * </pre>
       *
       * <code>double CritCorrection = 15;</code>
       * @return The critCorrection.
       */
      @java.lang.Override
      public double getCritCorrection() {
        return critCorrection_;
      }
      /**
       * <pre>
       * 暴击修正系数
       * </pre>
       *
       * <code>double CritCorrection = 15;</code>
       * @param value The critCorrection to set.
       * @return This builder for chaining.
       */
      public Builder setCritCorrection(double value) {
        
        critCorrection_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 暴击修正系数
       * </pre>
       *
       * <code>double CritCorrection = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearCritCorrection() {
        
        critCorrection_ = 0D;
        onChanged();
        return this;
      }

      private int blckEffect_ ;
      /**
       * <pre>
       * 格档效果
       * </pre>
       *
       * <code>int32 BlckEffect = 16;</code>
       * @return The blckEffect.
       */
      @java.lang.Override
      public int getBlckEffect() {
        return blckEffect_;
      }
      /**
       * <pre>
       * 格档效果
       * </pre>
       *
       * <code>int32 BlckEffect = 16;</code>
       * @param value The blckEffect to set.
       * @return This builder for chaining.
       */
      public Builder setBlckEffect(int value) {
        
        blckEffect_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 格档效果
       * </pre>
       *
       * <code>int32 BlckEffect = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearBlckEffect() {
        
        blckEffect_ = 0;
        onChanged();
        return this;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ blockEffectLimit_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> blockEffectLimitBuilder_;
      /**
       * <pre>
       * 格挡率上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
       * @return Whether the blockEffectLimit field is set.
       */
      public boolean hasBlockEffectLimit() {
        return blockEffectLimitBuilder_ != null || blockEffectLimit_ != null;
      }
      /**
       * <pre>
       * 格挡率上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
       * @return The blockEffectLimit.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ getBlockEffectLimit() {
        if (blockEffectLimitBuilder_ == null) {
          return blockEffectLimit_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : blockEffectLimit_;
        } else {
          return blockEffectLimitBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 格挡率上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
       */
      public Builder setBlockEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (blockEffectLimitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          blockEffectLimit_ = value;
          onChanged();
        } else {
          blockEffectLimitBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 格挡率上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
       */
      public Builder setBlockEffectLimit(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder builderForValue) {
        if (blockEffectLimitBuilder_ == null) {
          blockEffectLimit_ = builderForValue.build();
          onChanged();
        } else {
          blockEffectLimitBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 格挡率上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
       */
      public Builder mergeBlockEffectLimit(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_ value) {
        if (blockEffectLimitBuilder_ == null) {
          if (blockEffectLimit_ != null) {
            blockEffectLimit_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.newBuilder(blockEffectLimit_).mergeFrom(value).buildPartial();
          } else {
            blockEffectLimit_ = value;
          }
          onChanged();
        } else {
          blockEffectLimitBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 格挡率上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
       */
      public Builder clearBlockEffectLimit() {
        if (blockEffectLimitBuilder_ == null) {
          blockEffectLimit_ = null;
          onChanged();
        } else {
          blockEffectLimit_ = null;
          blockEffectLimitBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 格挡率上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder getBlockEffectLimitBuilder() {
        
        onChanged();
        return getBlockEffectLimitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 格挡率上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder getBlockEffectLimitOrBuilder() {
        if (blockEffectLimitBuilder_ != null) {
          return blockEffectLimitBuilder_.getMessageOrBuilder();
        } else {
          return blockEffectLimit_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.getDefaultInstance() : blockEffectLimit_;
        }
      }
      /**
       * <pre>
       * 格挡率上下限
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder> 
          getBlockEffectLimitFieldBuilder() {
        if (blockEffectLimitBuilder_ == null) {
          blockEffectLimitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dodgeeffectlimit_OrBuilder>(
                  getBlockEffectLimit(),
                  getParentForChildren(),
                  isClean());
          blockEffectLimit_ = null;
        }
        return blockEffectLimitBuilder_;
      }

      private int heroMaxEnergyValue_ ;
      /**
       * <pre>
       * 英雄能量值上限
       * </pre>
       *
       * <code>int32 HeroMaxEnergyValue = 18;</code>
       * @return The heroMaxEnergyValue.
       */
      @java.lang.Override
      public int getHeroMaxEnergyValue() {
        return heroMaxEnergyValue_;
      }
      /**
       * <pre>
       * 英雄能量值上限
       * </pre>
       *
       * <code>int32 HeroMaxEnergyValue = 18;</code>
       * @param value The heroMaxEnergyValue to set.
       * @return This builder for chaining.
       */
      public Builder setHeroMaxEnergyValue(int value) {
        
        heroMaxEnergyValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 英雄能量值上限
       * </pre>
       *
       * <code>int32 HeroMaxEnergyValue = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeroMaxEnergyValue() {
        
        heroMaxEnergyValue_ = 0;
        onChanged();
        return this;
      }

      private int heroMaxEnergyNum_ ;
      /**
       * <pre>
       * 英雄能量技累计次数上限
       * </pre>
       *
       * <code>int32 HeroMaxEnergyNum = 19;</code>
       * @return The heroMaxEnergyNum.
       */
      @java.lang.Override
      public int getHeroMaxEnergyNum() {
        return heroMaxEnergyNum_;
      }
      /**
       * <pre>
       * 英雄能量技累计次数上限
       * </pre>
       *
       * <code>int32 HeroMaxEnergyNum = 19;</code>
       * @param value The heroMaxEnergyNum to set.
       * @return This builder for chaining.
       */
      public Builder setHeroMaxEnergyNum(int value) {
        
        heroMaxEnergyNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 英雄能量技累计次数上限
       * </pre>
       *
       * <code>int32 HeroMaxEnergyNum = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeroMaxEnergyNum() {
        
        heroMaxEnergyNum_ = 0;
        onChanged();
        return this;
      }

      private int lordMaxEnergy_ ;
      /**
       * <pre>
       * 小姐姐能量上限
       * </pre>
       *
       * <code>int32 LordMaxEnergy = 20;</code>
       * @return The lordMaxEnergy.
       */
      @java.lang.Override
      public int getLordMaxEnergy() {
        return lordMaxEnergy_;
      }
      /**
       * <pre>
       * 小姐姐能量上限
       * </pre>
       *
       * <code>int32 LordMaxEnergy = 20;</code>
       * @param value The lordMaxEnergy to set.
       * @return This builder for chaining.
       */
      public Builder setLordMaxEnergy(int value) {
        
        lordMaxEnergy_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 小姐姐能量上限
       * </pre>
       *
       * <code>int32 LordMaxEnergy = 20;</code>
       * @return This builder for chaining.
       */
      public Builder clearLordMaxEnergy() {
        
        lordMaxEnergy_ = 0;
        onChanged();
        return this;
      }

      private double maxAttackSpeed_ ;
      /**
       * <pre>
       * 最大攻击速度缩放比例。
       * </pre>
       *
       * <code>double MaxAttackSpeed = 21;</code>
       * @return The maxAttackSpeed.
       */
      @java.lang.Override
      public double getMaxAttackSpeed() {
        return maxAttackSpeed_;
      }
      /**
       * <pre>
       * 最大攻击速度缩放比例。
       * </pre>
       *
       * <code>double MaxAttackSpeed = 21;</code>
       * @param value The maxAttackSpeed to set.
       * @return This builder for chaining.
       */
      public Builder setMaxAttackSpeed(double value) {
        
        maxAttackSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 最大攻击速度缩放比例。
       * </pre>
       *
       * <code>double MaxAttackSpeed = 21;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxAttackSpeed() {
        
        maxAttackSpeed_ = 0D;
        onChanged();
        return this;
      }

      private int heroSkillCount_ ;
      /**
       * <pre>
       * 英雄技能存储上限
       * </pre>
       *
       * <code>int32 HeroSkillCount = 22;</code>
       * @return The heroSkillCount.
       */
      @java.lang.Override
      public int getHeroSkillCount() {
        return heroSkillCount_;
      }
      /**
       * <pre>
       * 英雄技能存储上限
       * </pre>
       *
       * <code>int32 HeroSkillCount = 22;</code>
       * @param value The heroSkillCount to set.
       * @return This builder for chaining.
       */
      public Builder setHeroSkillCount(int value) {
        
        heroSkillCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 英雄技能存储上限
       * </pre>
       *
       * <code>int32 HeroSkillCount = 22;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeroSkillCount() {
        
        heroSkillCount_ = 0;
        onChanged();
        return this;
      }

      private int monsterWalkModeTime_ ;
      /**
       * <pre>
       * 怪物行走入场时间(毫秒）
       * </pre>
       *
       * <code>int32 MonsterWalkModeTime = 23;</code>
       * @return The monsterWalkModeTime.
       */
      @java.lang.Override
      public int getMonsterWalkModeTime() {
        return monsterWalkModeTime_;
      }
      /**
       * <pre>
       * 怪物行走入场时间(毫秒）
       * </pre>
       *
       * <code>int32 MonsterWalkModeTime = 23;</code>
       * @param value The monsterWalkModeTime to set.
       * @return This builder for chaining.
       */
      public Builder setMonsterWalkModeTime(int value) {
        
        monsterWalkModeTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 怪物行走入场时间(毫秒）
       * </pre>
       *
       * <code>int32 MonsterWalkModeTime = 23;</code>
       * @return This builder for chaining.
       */
      public Builder clearMonsterWalkModeTime() {
        
        monsterWalkModeTime_ = 0;
        onChanged();
        return this;
      }

      private int monsterDropModeTime_ ;
      /**
       * <pre>
       * 怪物掉落入场时间(毫秒）
       * </pre>
       *
       * <code>int32 MonsterDropModeTime = 24;</code>
       * @return The monsterDropModeTime.
       */
      @java.lang.Override
      public int getMonsterDropModeTime() {
        return monsterDropModeTime_;
      }
      /**
       * <pre>
       * 怪物掉落入场时间(毫秒）
       * </pre>
       *
       * <code>int32 MonsterDropModeTime = 24;</code>
       * @param value The monsterDropModeTime to set.
       * @return This builder for chaining.
       */
      public Builder setMonsterDropModeTime(int value) {
        
        monsterDropModeTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 怪物掉落入场时间(毫秒）
       * </pre>
       *
       * <code>int32 MonsterDropModeTime = 24;</code>
       * @return This builder for chaining.
       */
      public Builder clearMonsterDropModeTime() {
        
        monsterDropModeTime_ = 0;
        onChanged();
        return this;
      }

      private Position2IntOuterClass.Position2Int battleMapGrid_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Position2IntOuterClass.Position2Int, Position2IntOuterClass.Position2Int.Builder, Position2IntOuterClass.Position2IntOrBuilder> battleMapGridBuilder_;
      /**
       * <pre>
       * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
       * </pre>
       *
       * <code>.Position2Int BattleMapGrid = 25;</code>
       * @return Whether the battleMapGrid field is set.
       */
      public boolean hasBattleMapGrid() {
        return battleMapGridBuilder_ != null || battleMapGrid_ != null;
      }
      /**
       * <pre>
       * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
       * </pre>
       *
       * <code>.Position2Int BattleMapGrid = 25;</code>
       * @return The battleMapGrid.
       */
      public Position2IntOuterClass.Position2Int getBattleMapGrid() {
        if (battleMapGridBuilder_ == null) {
          return battleMapGrid_ == null ? Position2IntOuterClass.Position2Int.getDefaultInstance() : battleMapGrid_;
        } else {
          return battleMapGridBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
       * </pre>
       *
       * <code>.Position2Int BattleMapGrid = 25;</code>
       */
      public Builder setBattleMapGrid(Position2IntOuterClass.Position2Int value) {
        if (battleMapGridBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          battleMapGrid_ = value;
          onChanged();
        } else {
          battleMapGridBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
       * </pre>
       *
       * <code>.Position2Int BattleMapGrid = 25;</code>
       */
      public Builder setBattleMapGrid(
          Position2IntOuterClass.Position2Int.Builder builderForValue) {
        if (battleMapGridBuilder_ == null) {
          battleMapGrid_ = builderForValue.build();
          onChanged();
        } else {
          battleMapGridBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
       * </pre>
       *
       * <code>.Position2Int BattleMapGrid = 25;</code>
       */
      public Builder mergeBattleMapGrid(Position2IntOuterClass.Position2Int value) {
        if (battleMapGridBuilder_ == null) {
          if (battleMapGrid_ != null) {
            battleMapGrid_ =
              Position2IntOuterClass.Position2Int.newBuilder(battleMapGrid_).mergeFrom(value).buildPartial();
          } else {
            battleMapGrid_ = value;
          }
          onChanged();
        } else {
          battleMapGridBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
       * </pre>
       *
       * <code>.Position2Int BattleMapGrid = 25;</code>
       */
      public Builder clearBattleMapGrid() {
        if (battleMapGridBuilder_ == null) {
          battleMapGrid_ = null;
          onChanged();
        } else {
          battleMapGrid_ = null;
          battleMapGridBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
       * </pre>
       *
       * <code>.Position2Int BattleMapGrid = 25;</code>
       */
      public Position2IntOuterClass.Position2Int.Builder getBattleMapGridBuilder() {
        
        onChanged();
        return getBattleMapGridFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
       * </pre>
       *
       * <code>.Position2Int BattleMapGrid = 25;</code>
       */
      public Position2IntOuterClass.Position2IntOrBuilder getBattleMapGridOrBuilder() {
        if (battleMapGridBuilder_ != null) {
          return battleMapGridBuilder_.getMessageOrBuilder();
        } else {
          return battleMapGrid_ == null ?
              Position2IntOuterClass.Position2Int.getDefaultInstance() : battleMapGrid_;
        }
      }
      /**
       * <pre>
       * 战场格子数量，第一项为宽，第二项为高(坐标原点为左上角)
       * </pre>
       *
       * <code>.Position2Int BattleMapGrid = 25;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Position2IntOuterClass.Position2Int, Position2IntOuterClass.Position2Int.Builder, Position2IntOuterClass.Position2IntOrBuilder> 
          getBattleMapGridFieldBuilder() {
        if (battleMapGridBuilder_ == null) {
          battleMapGridBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Position2IntOuterClass.Position2Int, Position2IntOuterClass.Position2Int.Builder, Position2IntOuterClass.Position2IntOrBuilder>(
                  getBattleMapGrid(),
                  getParentForChildren(),
                  isClean());
          battleMapGrid_ = null;
        }
        return battleMapGridBuilder_;
      }

      private int gridSize_ ;
      /**
       * <pre>
       * 格子尺寸，正方体直径
       * </pre>
       *
       * <code>int32 GridSize = 26;</code>
       * @return The gridSize.
       */
      @java.lang.Override
      public int getGridSize() {
        return gridSize_;
      }
      /**
       * <pre>
       * 格子尺寸，正方体直径
       * </pre>
       *
       * <code>int32 GridSize = 26;</code>
       * @param value The gridSize to set.
       * @return This builder for chaining.
       */
      public Builder setGridSize(int value) {
        
        gridSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 格子尺寸，正方体直径
       * </pre>
       *
       * <code>int32 GridSize = 26;</code>
       * @return This builder for chaining.
       */
      public Builder clearGridSize() {
        
        gridSize_ = 0;
        onChanged();
        return this;
      }

      private int lordGrid_ ;
      /**
       * <pre>
       * 小姐姐坐标
       * </pre>
       *
       * <code>int32 LordGrid = 27;</code>
       * @return The lordGrid.
       */
      @java.lang.Override
      public int getLordGrid() {
        return lordGrid_;
      }
      /**
       * <pre>
       * 小姐姐坐标
       * </pre>
       *
       * <code>int32 LordGrid = 27;</code>
       * @param value The lordGrid to set.
       * @return This builder for chaining.
       */
      public Builder setLordGrid(int value) {
        
        lordGrid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 小姐姐坐标
       * </pre>
       *
       * <code>int32 LordGrid = 27;</code>
       * @return This builder for chaining.
       */
      public Builder clearLordGrid() {
        
        lordGrid_ = 0;
        onChanged();
        return this;
      }

      private int skillMoveTime_ ;
      /**
       * <pre>
       * 必杀位移时间（毫秒）
       * </pre>
       *
       * <code>int32 SkillMoveTime = 28;</code>
       * @return The skillMoveTime.
       */
      @java.lang.Override
      public int getSkillMoveTime() {
        return skillMoveTime_;
      }
      /**
       * <pre>
       * 必杀位移时间（毫秒）
       * </pre>
       *
       * <code>int32 SkillMoveTime = 28;</code>
       * @param value The skillMoveTime to set.
       * @return This builder for chaining.
       */
      public Builder setSkillMoveTime(int value) {
        
        skillMoveTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 必杀位移时间（毫秒）
       * </pre>
       *
       * <code>int32 SkillMoveTime = 28;</code>
       * @return This builder for chaining.
       */
      public Builder clearSkillMoveTime() {
        
        skillMoveTime_ = 0;
        onChanged();
        return this;
      }

      private int skillFlashTime_ ;
      /**
       * <pre>
       * 必杀叮特效时间（毫秒）
       * </pre>
       *
       * <code>int32 SkillFlashTime = 29;</code>
       * @return The skillFlashTime.
       */
      @java.lang.Override
      public int getSkillFlashTime() {
        return skillFlashTime_;
      }
      /**
       * <pre>
       * 必杀叮特效时间（毫秒）
       * </pre>
       *
       * <code>int32 SkillFlashTime = 29;</code>
       * @param value The skillFlashTime to set.
       * @return This builder for chaining.
       */
      public Builder setSkillFlashTime(int value) {
        
        skillFlashTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 必杀叮特效时间（毫秒）
       * </pre>
       *
       * <code>int32 SkillFlashTime = 29;</code>
       * @return This builder for chaining.
       */
      public Builder clearSkillFlashTime() {
        
        skillFlashTime_ = 0;
        onChanged();
        return this;
      }

      private int monsterDropRange_ ;
      /**
       * <pre>
       * 击杀魔物后掉落物掉落范围（以魔物的站立坐标为圆心）
       * </pre>
       *
       * <code>int32 MonsterDropRange = 30;</code>
       * @return The monsterDropRange.
       */
      @java.lang.Override
      public int getMonsterDropRange() {
        return monsterDropRange_;
      }
      /**
       * <pre>
       * 击杀魔物后掉落物掉落范围（以魔物的站立坐标为圆心）
       * </pre>
       *
       * <code>int32 MonsterDropRange = 30;</code>
       * @param value The monsterDropRange to set.
       * @return This builder for chaining.
       */
      public Builder setMonsterDropRange(int value) {
        
        monsterDropRange_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 击杀魔物后掉落物掉落范围（以魔物的站立坐标为圆心）
       * </pre>
       *
       * <code>int32 MonsterDropRange = 30;</code>
       * @return This builder for chaining.
       */
      public Builder clearMonsterDropRange() {
        
        monsterDropRange_ = 0;
        onChanged();
        return this;
      }

      private int offsetDistance_ ;
      /**
       * <pre>
       * 掉落物反向偏移距离量
       * </pre>
       *
       * <code>int32 OffsetDistance = 31;</code>
       * @return The offsetDistance.
       */
      @java.lang.Override
      public int getOffsetDistance() {
        return offsetDistance_;
      }
      /**
       * <pre>
       * 掉落物反向偏移距离量
       * </pre>
       *
       * <code>int32 OffsetDistance = 31;</code>
       * @param value The offsetDistance to set.
       * @return This builder for chaining.
       */
      public Builder setOffsetDistance(int value) {
        
        offsetDistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 掉落物反向偏移距离量
       * </pre>
       *
       * <code>int32 OffsetDistance = 31;</code>
       * @return This builder for chaining.
       */
      public Builder clearOffsetDistance() {
        
        offsetDistance_ = 0;
        onChanged();
        return this;
      }

      private int dropItemStayTime_ ;
      /**
       * <pre>
       * 掉落物品停留显示时间，单位是毫秒
       * </pre>
       *
       * <code>int32 DropItemStayTime = 32;</code>
       * @return The dropItemStayTime.
       */
      @java.lang.Override
      public int getDropItemStayTime() {
        return dropItemStayTime_;
      }
      /**
       * <pre>
       * 掉落物品停留显示时间，单位是毫秒
       * </pre>
       *
       * <code>int32 DropItemStayTime = 32;</code>
       * @param value The dropItemStayTime to set.
       * @return This builder for chaining.
       */
      public Builder setDropItemStayTime(int value) {
        
        dropItemStayTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 掉落物品停留显示时间，单位是毫秒
       * </pre>
       *
       * <code>int32 DropItemStayTime = 32;</code>
       * @return This builder for chaining.
       */
      public Builder clearDropItemStayTime() {
        
        dropItemStayTime_ = 0;
        onChanged();
        return this;
      }

      private int bannerStayMaxtime_ ;
      /**
       * <pre>
       * 获取记录面板停留最大时间，单位是毫秒
       * </pre>
       *
       * <code>int32 BannerStayMaxtime = 33;</code>
       * @return The bannerStayMaxtime.
       */
      @java.lang.Override
      public int getBannerStayMaxtime() {
        return bannerStayMaxtime_;
      }
      /**
       * <pre>
       * 获取记录面板停留最大时间，单位是毫秒
       * </pre>
       *
       * <code>int32 BannerStayMaxtime = 33;</code>
       * @param value The bannerStayMaxtime to set.
       * @return This builder for chaining.
       */
      public Builder setBannerStayMaxtime(int value) {
        
        bannerStayMaxtime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 获取记录面板停留最大时间，单位是毫秒
       * </pre>
       *
       * <code>int32 BannerStayMaxtime = 33;</code>
       * @return This builder for chaining.
       */
      public Builder clearBannerStayMaxtime() {
        
        bannerStayMaxtime_ = 0;
        onChanged();
        return this;
      }

      private int lordMoveSpeed_ ;
      /**
       * <pre>
       * 小姐姐移动速度
       * </pre>
       *
       * <code>int32 LordMoveSpeed = 34;</code>
       * @return The lordMoveSpeed.
       */
      @java.lang.Override
      public int getLordMoveSpeed() {
        return lordMoveSpeed_;
      }
      /**
       * <pre>
       * 小姐姐移动速度
       * </pre>
       *
       * <code>int32 LordMoveSpeed = 34;</code>
       * @param value The lordMoveSpeed to set.
       * @return This builder for chaining.
       */
      public Builder setLordMoveSpeed(int value) {
        
        lordMoveSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 小姐姐移动速度
       * </pre>
       *
       * <code>int32 LordMoveSpeed = 34;</code>
       * @return This builder for chaining.
       */
      public Builder clearLordMoveSpeed() {
        
        lordMoveSpeed_ = 0;
        onChanged();
        return this;
      }

      private int dropItemRange_ ;
      /**
       * <pre>
       * 物品掉落范围，半径
       * </pre>
       *
       * <code>int32 DropItemRange = 35;</code>
       * @return The dropItemRange.
       */
      @java.lang.Override
      public int getDropItemRange() {
        return dropItemRange_;
      }
      /**
       * <pre>
       * 物品掉落范围，半径
       * </pre>
       *
       * <code>int32 DropItemRange = 35;</code>
       * @param value The dropItemRange to set.
       * @return This builder for chaining.
       */
      public Builder setDropItemRange(int value) {
        
        dropItemRange_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 物品掉落范围，半径
       * </pre>
       *
       * <code>int32 DropItemRange = 35;</code>
       * @return This builder for chaining.
       */
      public Builder clearDropItemRange() {
        
        dropItemRange_ = 0;
        onChanged();
        return this;
      }

      private int maxRoom_ ;
      /**
       * <pre>
       * 副本每列最大房间数
       * </pre>
       *
       * <code>int32 MaxRoom = 36;</code>
       * @return The maxRoom.
       */
      @java.lang.Override
      public int getMaxRoom() {
        return maxRoom_;
      }
      /**
       * <pre>
       * 副本每列最大房间数
       * </pre>
       *
       * <code>int32 MaxRoom = 36;</code>
       * @param value The maxRoom to set.
       * @return This builder for chaining.
       */
      public Builder setMaxRoom(int value) {
        
        maxRoom_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 副本每列最大房间数
       * </pre>
       *
       * <code>int32 MaxRoom = 36;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxRoom() {
        
        maxRoom_ = 0;
        onChanged();
        return this;
      }

      private int lordHealthFactor_ ;
      /**
       * <pre>
       * 每一点领主生命值，回复英雄的百分比生命值。此值为万分比。
       * </pre>
       *
       * <code>int32 LordHealthFactor = 37;</code>
       * @return The lordHealthFactor.
       */
      @java.lang.Override
      public int getLordHealthFactor() {
        return lordHealthFactor_;
      }
      /**
       * <pre>
       * 每一点领主生命值，回复英雄的百分比生命值。此值为万分比。
       * </pre>
       *
       * <code>int32 LordHealthFactor = 37;</code>
       * @param value The lordHealthFactor to set.
       * @return This builder for chaining.
       */
      public Builder setLordHealthFactor(int value) {
        
        lordHealthFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 每一点领主生命值，回复英雄的百分比生命值。此值为万分比。
       * </pre>
       *
       * <code>int32 LordHealthFactor = 37;</code>
       * @return This builder for chaining.
       */
      public Builder clearLordHealthFactor() {
        
        lordHealthFactor_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList runeRefreshPrices_ = emptyIntList();
      private void ensureRuneRefreshPricesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          runeRefreshPrices_ = mutableCopy(runeRefreshPrices_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * RL中炼成阵刷新消耗规则
       * </pre>
       *
       * <code>repeated int32 RuneRefreshPrices = 38;</code>
       * @return A list containing the runeRefreshPrices.
       */
      public java.util.List<java.lang.Integer>
          getRuneRefreshPricesList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(runeRefreshPrices_) : runeRefreshPrices_;
      }
      /**
       * <pre>
       * RL中炼成阵刷新消耗规则
       * </pre>
       *
       * <code>repeated int32 RuneRefreshPrices = 38;</code>
       * @return The count of runeRefreshPrices.
       */
      public int getRuneRefreshPricesCount() {
        return runeRefreshPrices_.size();
      }
      /**
       * <pre>
       * RL中炼成阵刷新消耗规则
       * </pre>
       *
       * <code>repeated int32 RuneRefreshPrices = 38;</code>
       * @param index The index of the element to return.
       * @return The runeRefreshPrices at the given index.
       */
      public int getRuneRefreshPrices(int index) {
        return runeRefreshPrices_.getInt(index);
      }
      /**
       * <pre>
       * RL中炼成阵刷新消耗规则
       * </pre>
       *
       * <code>repeated int32 RuneRefreshPrices = 38;</code>
       * @param index The index to set the value at.
       * @param value The runeRefreshPrices to set.
       * @return This builder for chaining.
       */
      public Builder setRuneRefreshPrices(
          int index, int value) {
        ensureRuneRefreshPricesIsMutable();
        runeRefreshPrices_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * RL中炼成阵刷新消耗规则
       * </pre>
       *
       * <code>repeated int32 RuneRefreshPrices = 38;</code>
       * @param value The runeRefreshPrices to add.
       * @return This builder for chaining.
       */
      public Builder addRuneRefreshPrices(int value) {
        ensureRuneRefreshPricesIsMutable();
        runeRefreshPrices_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * RL中炼成阵刷新消耗规则
       * </pre>
       *
       * <code>repeated int32 RuneRefreshPrices = 38;</code>
       * @param values The runeRefreshPrices to add.
       * @return This builder for chaining.
       */
      public Builder addAllRuneRefreshPrices(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureRuneRefreshPricesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, runeRefreshPrices_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * RL中炼成阵刷新消耗规则
       * </pre>
       *
       * <code>repeated int32 RuneRefreshPrices = 38;</code>
       * @return This builder for chaining.
       */
      public Builder clearRuneRefreshPrices() {
        runeRefreshPrices_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private int heroMaxRuneCount_ ;
      /**
       * <pre>
       * 英雄最多可携带的符文数量
       * </pre>
       *
       * <code>int32 HeroMaxRuneCount = 39;</code>
       * @return The heroMaxRuneCount.
       */
      @java.lang.Override
      public int getHeroMaxRuneCount() {
        return heroMaxRuneCount_;
      }
      /**
       * <pre>
       * 英雄最多可携带的符文数量
       * </pre>
       *
       * <code>int32 HeroMaxRuneCount = 39;</code>
       * @param value The heroMaxRuneCount to set.
       * @return This builder for chaining.
       */
      public Builder setHeroMaxRuneCount(int value) {
        
        heroMaxRuneCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 英雄最多可携带的符文数量
       * </pre>
       *
       * <code>int32 HeroMaxRuneCount = 39;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeroMaxRuneCount() {
        
        heroMaxRuneCount_ = 0;
        onChanged();
        return this;
      }

      private int maxSoulStampDemand_ ;
      /**
       * <pre>
       * 最大炼成所需魂印数
       * </pre>
       *
       * <code>int32 MaxSoulStampDemand = 40;</code>
       * @return The maxSoulStampDemand.
       */
      @java.lang.Override
      public int getMaxSoulStampDemand() {
        return maxSoulStampDemand_;
      }
      /**
       * <pre>
       * 最大炼成所需魂印数
       * </pre>
       *
       * <code>int32 MaxSoulStampDemand = 40;</code>
       * @param value The maxSoulStampDemand to set.
       * @return This builder for chaining.
       */
      public Builder setMaxSoulStampDemand(int value) {
        
        maxSoulStampDemand_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 最大炼成所需魂印数
       * </pre>
       *
       * <code>int32 MaxSoulStampDemand = 40;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxSoulStampDemand() {
        
        maxSoulStampDemand_ = 0;
        onChanged();
        return this;
      }

      private double soulStampDemandFactor_ ;
      /**
       * <pre>
       * 炼成阵所需魂印数量，总等级*该系数，向下取整，即为每次炼成所需的魂印数
       * </pre>
       *
       * <code>double SoulStampDemandFactor = 41;</code>
       * @return The soulStampDemandFactor.
       */
      @java.lang.Override
      public double getSoulStampDemandFactor() {
        return soulStampDemandFactor_;
      }
      /**
       * <pre>
       * 炼成阵所需魂印数量，总等级*该系数，向下取整，即为每次炼成所需的魂印数
       * </pre>
       *
       * <code>double SoulStampDemandFactor = 41;</code>
       * @param value The soulStampDemandFactor to set.
       * @return This builder for chaining.
       */
      public Builder setSoulStampDemandFactor(double value) {
        
        soulStampDemandFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 炼成阵所需魂印数量，总等级*该系数，向下取整，即为每次炼成所需的魂印数
       * </pre>
       *
       * <code>double SoulStampDemandFactor = 41;</code>
       * @return This builder for chaining.
       */
      public Builder clearSoulStampDemandFactor() {
        
        soulStampDemandFactor_ = 0D;
        onChanged();
        return this;
      }

      private int bagCapacity_ ;
      /**
       * <pre>
       * 战斗中，装备背包和魂印背包的数量上限。
       * </pre>
       *
       * <code>int32 BagCapacity = 42;</code>
       * @return The bagCapacity.
       */
      @java.lang.Override
      public int getBagCapacity() {
        return bagCapacity_;
      }
      /**
       * <pre>
       * 战斗中，装备背包和魂印背包的数量上限。
       * </pre>
       *
       * <code>int32 BagCapacity = 42;</code>
       * @param value The bagCapacity to set.
       * @return This builder for chaining.
       */
      public Builder setBagCapacity(int value) {
        
        bagCapacity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 战斗中，装备背包和魂印背包的数量上限。
       * </pre>
       *
       * <code>int32 BagCapacity = 42;</code>
       * @return This builder for chaining.
       */
      public Builder clearBagCapacity() {
        
        bagCapacity_ = 0;
        onChanged();
        return this;
      }

      private int resolveFactor_ ;
      /**
       * <pre>
       * 战斗中，分解装备获得的魔魂。(万分比，向下取整)
       * </pre>
       *
       * <code>int32 ResolveFactor = 43;</code>
       * @return The resolveFactor.
       */
      @java.lang.Override
      public int getResolveFactor() {
        return resolveFactor_;
      }
      /**
       * <pre>
       * 战斗中，分解装备获得的魔魂。(万分比，向下取整)
       * </pre>
       *
       * <code>int32 ResolveFactor = 43;</code>
       * @param value The resolveFactor to set.
       * @return This builder for chaining.
       */
      public Builder setResolveFactor(int value) {
        
        resolveFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 战斗中，分解装备获得的魔魂。(万分比，向下取整)
       * </pre>
       *
       * <code>int32 ResolveFactor = 43;</code>
       * @return This builder for chaining.
       */
      public Builder clearResolveFactor() {
        
        resolveFactor_ = 0;
        onChanged();
        return this;
      }

      private int skillFadeOutTime_ ;
      /**
       * <pre>
       * 战斗中，释放必杀技后，淡出的时间，单位毫秒
       * </pre>
       *
       * <code>int32 SkillFadeOutTime = 44;</code>
       * @return The skillFadeOutTime.
       */
      @java.lang.Override
      public int getSkillFadeOutTime() {
        return skillFadeOutTime_;
      }
      /**
       * <pre>
       * 战斗中，释放必杀技后，淡出的时间，单位毫秒
       * </pre>
       *
       * <code>int32 SkillFadeOutTime = 44;</code>
       * @param value The skillFadeOutTime to set.
       * @return This builder for chaining.
       */
      public Builder setSkillFadeOutTime(int value) {
        
        skillFadeOutTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 战斗中，释放必杀技后，淡出的时间，单位毫秒
       * </pre>
       *
       * <code>int32 SkillFadeOutTime = 44;</code>
       * @return This builder for chaining.
       */
      public Builder clearSkillFadeOutTime() {
        
        skillFadeOutTime_ = 0;
        onChanged();
        return this;
      }

      private int pvpEnemyLordGrid_ ;
      /**
       * <pre>
       * 对手小姐姐坐标
       * </pre>
       *
       * <code>int32 PvpEnemyLordGrid = 45;</code>
       * @return The pvpEnemyLordGrid.
       */
      @java.lang.Override
      public int getPvpEnemyLordGrid() {
        return pvpEnemyLordGrid_;
      }
      /**
       * <pre>
       * 对手小姐姐坐标
       * </pre>
       *
       * <code>int32 PvpEnemyLordGrid = 45;</code>
       * @param value The pvpEnemyLordGrid to set.
       * @return This builder for chaining.
       */
      public Builder setPvpEnemyLordGrid(int value) {
        
        pvpEnemyLordGrid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 对手小姐姐坐标
       * </pre>
       *
       * <code>int32 PvpEnemyLordGrid = 45;</code>
       * @return This builder for chaining.
       */
      public Builder clearPvpEnemyLordGrid() {
        
        pvpEnemyLordGrid_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList pvpSceneBuffs_ = emptyIntList();
      private void ensurePvpSceneBuffsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          pvpSceneBuffs_ = mutableCopy(pvpSceneBuffs_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * PVP战斗全场增强Buff，需填入BuffId
       * </pre>
       *
       * <code>repeated int32 PvpSceneBuffs = 46;</code>
       * @return A list containing the pvpSceneBuffs.
       */
      public java.util.List<java.lang.Integer>
          getPvpSceneBuffsList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(pvpSceneBuffs_) : pvpSceneBuffs_;
      }
      /**
       * <pre>
       * PVP战斗全场增强Buff，需填入BuffId
       * </pre>
       *
       * <code>repeated int32 PvpSceneBuffs = 46;</code>
       * @return The count of pvpSceneBuffs.
       */
      public int getPvpSceneBuffsCount() {
        return pvpSceneBuffs_.size();
      }
      /**
       * <pre>
       * PVP战斗全场增强Buff，需填入BuffId
       * </pre>
       *
       * <code>repeated int32 PvpSceneBuffs = 46;</code>
       * @param index The index of the element to return.
       * @return The pvpSceneBuffs at the given index.
       */
      public int getPvpSceneBuffs(int index) {
        return pvpSceneBuffs_.getInt(index);
      }
      /**
       * <pre>
       * PVP战斗全场增强Buff，需填入BuffId
       * </pre>
       *
       * <code>repeated int32 PvpSceneBuffs = 46;</code>
       * @param index The index to set the value at.
       * @param value The pvpSceneBuffs to set.
       * @return This builder for chaining.
       */
      public Builder setPvpSceneBuffs(
          int index, int value) {
        ensurePvpSceneBuffsIsMutable();
        pvpSceneBuffs_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * PVP战斗全场增强Buff，需填入BuffId
       * </pre>
       *
       * <code>repeated int32 PvpSceneBuffs = 46;</code>
       * @param value The pvpSceneBuffs to add.
       * @return This builder for chaining.
       */
      public Builder addPvpSceneBuffs(int value) {
        ensurePvpSceneBuffsIsMutable();
        pvpSceneBuffs_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * PVP战斗全场增强Buff，需填入BuffId
       * </pre>
       *
       * <code>repeated int32 PvpSceneBuffs = 46;</code>
       * @param values The pvpSceneBuffs to add.
       * @return This builder for chaining.
       */
      public Builder addAllPvpSceneBuffs(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePvpSceneBuffsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, pvpSceneBuffs_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * PVP战斗全场增强Buff，需填入BuffId
       * </pre>
       *
       * <code>repeated int32 PvpSceneBuffs = 46;</code>
       * @return This builder for chaining.
       */
      public Builder clearPvpSceneBuffs() {
        pvpSceneBuffs_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private int pvpFirstHandWaiting_ ;
      /**
       * <pre>
       * 先手技能等待时间，单位是秒
       * </pre>
       *
       * <code>int32 PvpFirstHandWaiting = 47;</code>
       * @return The pvpFirstHandWaiting.
       */
      @java.lang.Override
      public int getPvpFirstHandWaiting() {
        return pvpFirstHandWaiting_;
      }
      /**
       * <pre>
       * 先手技能等待时间，单位是秒
       * </pre>
       *
       * <code>int32 PvpFirstHandWaiting = 47;</code>
       * @param value The pvpFirstHandWaiting to set.
       * @return This builder for chaining.
       */
      public Builder setPvpFirstHandWaiting(int value) {
        
        pvpFirstHandWaiting_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 先手技能等待时间，单位是秒
       * </pre>
       *
       * <code>int32 PvpFirstHandWaiting = 47;</code>
       * @return This builder for chaining.
       */
      public Builder clearPvpFirstHandWaiting() {
        
        pvpFirstHandWaiting_ = 0;
        onChanged();
        return this;
      }

      private int pvpSecondHandWaiting_ ;
      /**
       * <pre>
       * 后手技能等待时间，单位是秒
       * </pre>
       *
       * <code>int32 PvpSecondHandWaiting = 48;</code>
       * @return The pvpSecondHandWaiting.
       */
      @java.lang.Override
      public int getPvpSecondHandWaiting() {
        return pvpSecondHandWaiting_;
      }
      /**
       * <pre>
       * 后手技能等待时间，单位是秒
       * </pre>
       *
       * <code>int32 PvpSecondHandWaiting = 48;</code>
       * @param value The pvpSecondHandWaiting to set.
       * @return This builder for chaining.
       */
      public Builder setPvpSecondHandWaiting(int value) {
        
        pvpSecondHandWaiting_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 后手技能等待时间，单位是秒
       * </pre>
       *
       * <code>int32 PvpSecondHandWaiting = 48;</code>
       * @return This builder for chaining.
       */
      public Builder clearPvpSecondHandWaiting() {
        
        pvpSecondHandWaiting_ = 0;
        onChanged();
        return this;
      }

      private int pvpStartCountDown_ ;
      /**
       * <pre>
       * 竞技战斗开始前倒计时，单位是秒
       * </pre>
       *
       * <code>int32 PvpStartCountDown = 49;</code>
       * @return The pvpStartCountDown.
       */
      @java.lang.Override
      public int getPvpStartCountDown() {
        return pvpStartCountDown_;
      }
      /**
       * <pre>
       * 竞技战斗开始前倒计时，单位是秒
       * </pre>
       *
       * <code>int32 PvpStartCountDown = 49;</code>
       * @param value The pvpStartCountDown to set.
       * @return This builder for chaining.
       */
      public Builder setPvpStartCountDown(int value) {
        
        pvpStartCountDown_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 竞技战斗开始前倒计时，单位是秒
       * </pre>
       *
       * <code>int32 PvpStartCountDown = 49;</code>
       * @return This builder for chaining.
       */
      public Builder clearPvpStartCountDown() {
        
        pvpStartCountDown_ = 0;
        onChanged();
        return this;
      }

      private int pvpOverCountDown_ ;
      /**
       * <pre>
       * 竞技战斗结束前倒计时，单位是秒
       * </pre>
       *
       * <code>int32 PvpOverCountDown = 50;</code>
       * @return The pvpOverCountDown.
       */
      @java.lang.Override
      public int getPvpOverCountDown() {
        return pvpOverCountDown_;
      }
      /**
       * <pre>
       * 竞技战斗结束前倒计时，单位是秒
       * </pre>
       *
       * <code>int32 PvpOverCountDown = 50;</code>
       * @param value The pvpOverCountDown to set.
       * @return This builder for chaining.
       */
      public Builder setPvpOverCountDown(int value) {
        
        pvpOverCountDown_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 竞技战斗结束前倒计时，单位是秒
       * </pre>
       *
       * <code>int32 PvpOverCountDown = 50;</code>
       * @return This builder for chaining.
       */
      public Builder clearPvpOverCountDown() {
        
        pvpOverCountDown_ = 0;
        onChanged();
        return this;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ soulInterest_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_OrBuilder> soulInterestBuilder_;
      /**
       * <pre>
       * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
       * @return Whether the soulInterest field is set.
       */
      public boolean hasSoulInterest() {
        return soulInterestBuilder_ != null || soulInterest_ != null;
      }
      /**
       * <pre>
       * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
       * @return The soulInterest.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ getSoulInterest() {
        if (soulInterestBuilder_ == null) {
          return soulInterest_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.getDefaultInstance() : soulInterest_;
        } else {
          return soulInterestBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
       */
      public Builder setSoulInterest(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ value) {
        if (soulInterestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          soulInterest_ = value;
          onChanged();
        } else {
          soulInterestBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
       */
      public Builder setSoulInterest(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.Builder builderForValue) {
        if (soulInterestBuilder_ == null) {
          soulInterest_ = builderForValue.build();
          onChanged();
        } else {
          soulInterestBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
       */
      public Builder mergeSoulInterest(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_ value) {
        if (soulInterestBuilder_ == null) {
          if (soulInterest_ != null) {
            soulInterest_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.newBuilder(soulInterest_).mergeFrom(value).buildPartial();
          } else {
            soulInterest_ = value;
          }
          onChanged();
        } else {
          soulInterestBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
       */
      public Builder clearSoulInterest() {
        if (soulInterestBuilder_ == null) {
          soulInterest_ = null;
          onChanged();
        } else {
          soulInterest_ = null;
          soulInterestBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.Builder getSoulInterestBuilder() {
        
        onChanged();
        return getSoulInterestFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_OrBuilder getSoulInterestOrBuilder() {
        if (soulInterestBuilder_ != null) {
          return soulInterestBuilder_.getMessageOrBuilder();
        } else {
          return soulInterest_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.getDefaultInstance() : soulInterest_;
        }
      }
      /**
       * <pre>
       * 每轮魔魂的利息，当前魔魂多少，乘以万分比（向下取整），第二个数是最大值
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_OrBuilder> 
          getSoulInterestFieldBuilder() {
        if (soulInterestBuilder_ == null) {
          soulInterestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Soulinterest_OrBuilder>(
                  getSoulInterest(),
                  getParentForChildren(),
                  isClean());
          soulInterest_ = null;
        }
        return soulInterestBuilder_;
      }

      private int battleHeroDieValue_ ;
      /**
       * <pre>
       * 战斗最多死亡人数（含）
       * </pre>
       *
       * <code>int32 BattleHeroDieValue = 52;</code>
       * @return The battleHeroDieValue.
       */
      @java.lang.Override
      public int getBattleHeroDieValue() {
        return battleHeroDieValue_;
      }
      /**
       * <pre>
       * 战斗最多死亡人数（含）
       * </pre>
       *
       * <code>int32 BattleHeroDieValue = 52;</code>
       * @param value The battleHeroDieValue to set.
       * @return This builder for chaining.
       */
      public Builder setBattleHeroDieValue(int value) {
        
        battleHeroDieValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 战斗最多死亡人数（含）
       * </pre>
       *
       * <code>int32 BattleHeroDieValue = 52;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleHeroDieValue() {
        
        battleHeroDieValue_ = 0;
        onChanged();
        return this;
      }

      private int battleMaxTimeValue_ ;
      /**
       * <pre>
       * 战斗最大时间（含）
       * </pre>
       *
       * <code>int32 BattleMaxTimeValue = 53;</code>
       * @return The battleMaxTimeValue.
       */
      @java.lang.Override
      public int getBattleMaxTimeValue() {
        return battleMaxTimeValue_;
      }
      /**
       * <pre>
       * 战斗最大时间（含）
       * </pre>
       *
       * <code>int32 BattleMaxTimeValue = 53;</code>
       * @param value The battleMaxTimeValue to set.
       * @return This builder for chaining.
       */
      public Builder setBattleMaxTimeValue(int value) {
        
        battleMaxTimeValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 战斗最大时间（含）
       * </pre>
       *
       * <code>int32 BattleMaxTimeValue = 53;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleMaxTimeValue() {
        
        battleMaxTimeValue_ = 0;
        onChanged();
        return this;
      }

      private int battleJumpTime_ ;
      /**
       * <pre>
       * 战斗移动跳跃时间（毫秒）
       * </pre>
       *
       * <code>int32 BattleJumpTime = 54;</code>
       * @return The battleJumpTime.
       */
      @java.lang.Override
      public int getBattleJumpTime() {
        return battleJumpTime_;
      }
      /**
       * <pre>
       * 战斗移动跳跃时间（毫秒）
       * </pre>
       *
       * <code>int32 BattleJumpTime = 54;</code>
       * @param value The battleJumpTime to set.
       * @return This builder for chaining.
       */
      public Builder setBattleJumpTime(int value) {
        
        battleJumpTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 战斗移动跳跃时间（毫秒）
       * </pre>
       *
       * <code>int32 BattleJumpTime = 54;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleJumpTime() {
        
        battleJumpTime_ = 0;
        onChanged();
        return this;
      }

      private int professionUpgradeCount_ ;
      /**
       * <pre>
       * 一个上古残页房间，同时展示的商品数量。
       * </pre>
       *
       * <code>int32 ProfessionUpgradeCount = 55;</code>
       * @return The professionUpgradeCount.
       */
      @java.lang.Override
      public int getProfessionUpgradeCount() {
        return professionUpgradeCount_;
      }
      /**
       * <pre>
       * 一个上古残页房间，同时展示的商品数量。
       * </pre>
       *
       * <code>int32 ProfessionUpgradeCount = 55;</code>
       * @param value The professionUpgradeCount to set.
       * @return This builder for chaining.
       */
      public Builder setProfessionUpgradeCount(int value) {
        
        professionUpgradeCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 一个上古残页房间，同时展示的商品数量。
       * </pre>
       *
       * <code>int32 ProfessionUpgradeCount = 55;</code>
       * @return This builder for chaining.
       */
      public Builder clearProfessionUpgradeCount() {
        
        professionUpgradeCount_ = 0;
        onChanged();
        return this;
      }

      private int handCardLimit_ ;
      /**
       * <pre>
       * 玩家战斗中手牌上限
       * </pre>
       *
       * <code>int32 HandCardLimit = 56;</code>
       * @return The handCardLimit.
       */
      @java.lang.Override
      public int getHandCardLimit() {
        return handCardLimit_;
      }
      /**
       * <pre>
       * 玩家战斗中手牌上限
       * </pre>
       *
       * <code>int32 HandCardLimit = 56;</code>
       * @param value The handCardLimit to set.
       * @return This builder for chaining.
       */
      public Builder setHandCardLimit(int value) {
        
        handCardLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 玩家战斗中手牌上限
       * </pre>
       *
       * <code>int32 HandCardLimit = 56;</code>
       * @return This builder for chaining.
       */
      public Builder clearHandCardLimit() {
        
        handCardLimit_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList forgetCosts_ = emptyIntList();
      private void ensureForgetCostsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          forgetCosts_ = mutableCopy(forgetCosts_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * 遗忘操作消耗
       * </pre>
       *
       * <code>repeated int32 ForgetCosts = 57;</code>
       * @return A list containing the forgetCosts.
       */
      public java.util.List<java.lang.Integer>
          getForgetCostsList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(forgetCosts_) : forgetCosts_;
      }
      /**
       * <pre>
       * 遗忘操作消耗
       * </pre>
       *
       * <code>repeated int32 ForgetCosts = 57;</code>
       * @return The count of forgetCosts.
       */
      public int getForgetCostsCount() {
        return forgetCosts_.size();
      }
      /**
       * <pre>
       * 遗忘操作消耗
       * </pre>
       *
       * <code>repeated int32 ForgetCosts = 57;</code>
       * @param index The index of the element to return.
       * @return The forgetCosts at the given index.
       */
      public int getForgetCosts(int index) {
        return forgetCosts_.getInt(index);
      }
      /**
       * <pre>
       * 遗忘操作消耗
       * </pre>
       *
       * <code>repeated int32 ForgetCosts = 57;</code>
       * @param index The index to set the value at.
       * @param value The forgetCosts to set.
       * @return This builder for chaining.
       */
      public Builder setForgetCosts(
          int index, int value) {
        ensureForgetCostsIsMutable();
        forgetCosts_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 遗忘操作消耗
       * </pre>
       *
       * <code>repeated int32 ForgetCosts = 57;</code>
       * @param value The forgetCosts to add.
       * @return This builder for chaining.
       */
      public Builder addForgetCosts(int value) {
        ensureForgetCostsIsMutable();
        forgetCosts_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 遗忘操作消耗
       * </pre>
       *
       * <code>repeated int32 ForgetCosts = 57;</code>
       * @param values The forgetCosts to add.
       * @return This builder for chaining.
       */
      public Builder addAllForgetCosts(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureForgetCostsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, forgetCosts_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 遗忘操作消耗
       * </pre>
       *
       * <code>repeated int32 ForgetCosts = 57;</code>
       * @return This builder for chaining.
       */
      public Builder clearForgetCosts() {
        forgetCosts_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList prayCosts_ = emptyIntList();
      private void ensurePrayCostsIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          prayCosts_ = mutableCopy(prayCosts_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <pre>
       * 祈祷操作消耗
       * </pre>
       *
       * <code>repeated int32 PrayCosts = 58;</code>
       * @return A list containing the prayCosts.
       */
      public java.util.List<java.lang.Integer>
          getPrayCostsList() {
        return ((bitField0_ & 0x00000010) != 0) ?
                 java.util.Collections.unmodifiableList(prayCosts_) : prayCosts_;
      }
      /**
       * <pre>
       * 祈祷操作消耗
       * </pre>
       *
       * <code>repeated int32 PrayCosts = 58;</code>
       * @return The count of prayCosts.
       */
      public int getPrayCostsCount() {
        return prayCosts_.size();
      }
      /**
       * <pre>
       * 祈祷操作消耗
       * </pre>
       *
       * <code>repeated int32 PrayCosts = 58;</code>
       * @param index The index of the element to return.
       * @return The prayCosts at the given index.
       */
      public int getPrayCosts(int index) {
        return prayCosts_.getInt(index);
      }
      /**
       * <pre>
       * 祈祷操作消耗
       * </pre>
       *
       * <code>repeated int32 PrayCosts = 58;</code>
       * @param index The index to set the value at.
       * @param value The prayCosts to set.
       * @return This builder for chaining.
       */
      public Builder setPrayCosts(
          int index, int value) {
        ensurePrayCostsIsMutable();
        prayCosts_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 祈祷操作消耗
       * </pre>
       *
       * <code>repeated int32 PrayCosts = 58;</code>
       * @param value The prayCosts to add.
       * @return This builder for chaining.
       */
      public Builder addPrayCosts(int value) {
        ensurePrayCostsIsMutable();
        prayCosts_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 祈祷操作消耗
       * </pre>
       *
       * <code>repeated int32 PrayCosts = 58;</code>
       * @param values The prayCosts to add.
       * @return This builder for chaining.
       */
      public Builder addAllPrayCosts(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePrayCostsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, prayCosts_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 祈祷操作消耗
       * </pre>
       *
       * <code>repeated int32 PrayCosts = 58;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrayCosts() {
        prayCosts_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private int cardLevelUpNeedNum_ ;
      /**
       * <pre>
       * X张同卡升级为1张高级卡，“X”
       * </pre>
       *
       * <code>int32 CardLevelUpNeedNum = 59;</code>
       * @return The cardLevelUpNeedNum.
       */
      @java.lang.Override
      public int getCardLevelUpNeedNum() {
        return cardLevelUpNeedNum_;
      }
      /**
       * <pre>
       * X张同卡升级为1张高级卡，“X”
       * </pre>
       *
       * <code>int32 CardLevelUpNeedNum = 59;</code>
       * @param value The cardLevelUpNeedNum to set.
       * @return This builder for chaining.
       */
      public Builder setCardLevelUpNeedNum(int value) {
        
        cardLevelUpNeedNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * X张同卡升级为1张高级卡，“X”
       * </pre>
       *
       * <code>int32 CardLevelUpNeedNum = 59;</code>
       * @return This builder for chaining.
       */
      public Builder clearCardLevelUpNeedNum() {
        
        cardLevelUpNeedNum_ = 0;
        onChanged();
        return this;
      }

      private int cardUseToDrawUnique_ ;
      /**
       * <pre>
       * 每使用5张基础卡，抽1张必杀卡（暂时屏蔽）
       * </pre>
       *
       * <code>int32 CardUseToDrawUnique = 60;</code>
       * @return The cardUseToDrawUnique.
       */
      @java.lang.Override
      public int getCardUseToDrawUnique() {
        return cardUseToDrawUnique_;
      }
      /**
       * <pre>
       * 每使用5张基础卡，抽1张必杀卡（暂时屏蔽）
       * </pre>
       *
       * <code>int32 CardUseToDrawUnique = 60;</code>
       * @param value The cardUseToDrawUnique to set.
       * @return This builder for chaining.
       */
      public Builder setCardUseToDrawUnique(int value) {
        
        cardUseToDrawUnique_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 每使用5张基础卡，抽1张必杀卡（暂时屏蔽）
       * </pre>
       *
       * <code>int32 CardUseToDrawUnique = 60;</code>
       * @return This builder for chaining.
       */
      public Builder clearCardUseToDrawUnique() {
        
        cardUseToDrawUnique_ = 0;
        onChanged();
        return this;
      }

      private int originalHandCardLimit_ ;
      /**
       * <pre>
       * 玩家战斗中初始手牌上限
       * </pre>
       *
       * <code>int32 OriginalHandCardLimit = 61;</code>
       * @return The originalHandCardLimit.
       */
      @java.lang.Override
      public int getOriginalHandCardLimit() {
        return originalHandCardLimit_;
      }
      /**
       * <pre>
       * 玩家战斗中初始手牌上限
       * </pre>
       *
       * <code>int32 OriginalHandCardLimit = 61;</code>
       * @param value The originalHandCardLimit to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalHandCardLimit(int value) {
        
        originalHandCardLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 玩家战斗中初始手牌上限
       * </pre>
       *
       * <code>int32 OriginalHandCardLimit = 61;</code>
       * @return This builder for chaining.
       */
      public Builder clearOriginalHandCardLimit() {
        
        originalHandCardLimit_ = 0;
        onChanged();
        return this;
      }

      private int uniqueSkillCardLimitCountOT_ ;
      /**
       * <pre>
       * 每轮发牌必杀卡数量上限
       * </pre>
       *
       * <code>int32 UniqueSkillCardLimitCountOT = 62;</code>
       * @return The uniqueSkillCardLimitCountOT.
       */
      @java.lang.Override
      public int getUniqueSkillCardLimitCountOT() {
        return uniqueSkillCardLimitCountOT_;
      }
      /**
       * <pre>
       * 每轮发牌必杀卡数量上限
       * </pre>
       *
       * <code>int32 UniqueSkillCardLimitCountOT = 62;</code>
       * @param value The uniqueSkillCardLimitCountOT to set.
       * @return This builder for chaining.
       */
      public Builder setUniqueSkillCardLimitCountOT(int value) {
        
        uniqueSkillCardLimitCountOT_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 每轮发牌必杀卡数量上限
       * </pre>
       *
       * <code>int32 UniqueSkillCardLimitCountOT = 62;</code>
       * @return This builder for chaining.
       */
      public Builder clearUniqueSkillCardLimitCountOT() {
        
        uniqueSkillCardLimitCountOT_ = 0;
        onChanged();
        return this;
      }

      private int dropCoefficientInEliteRoom_ ;
      /**
       * <pre>
       * 精英房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
       * </pre>
       *
       * <code>int32 DropCoefficientInEliteRoom = 63;</code>
       * @return The dropCoefficientInEliteRoom.
       */
      @java.lang.Override
      public int getDropCoefficientInEliteRoom() {
        return dropCoefficientInEliteRoom_;
      }
      /**
       * <pre>
       * 精英房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
       * </pre>
       *
       * <code>int32 DropCoefficientInEliteRoom = 63;</code>
       * @param value The dropCoefficientInEliteRoom to set.
       * @return This builder for chaining.
       */
      public Builder setDropCoefficientInEliteRoom(int value) {
        
        dropCoefficientInEliteRoom_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 精英房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
       * </pre>
       *
       * <code>int32 DropCoefficientInEliteRoom = 63;</code>
       * @return This builder for chaining.
       */
      public Builder clearDropCoefficientInEliteRoom() {
        
        dropCoefficientInEliteRoom_ = 0;
        onChanged();
        return this;
      }

      private int dropCoefficientInBossRoom_ ;
      /**
       * <pre>
       * BOSS房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
       * </pre>
       *
       * <code>int32 DropCoefficientInBossRoom = 64;</code>
       * @return The dropCoefficientInBossRoom.
       */
      @java.lang.Override
      public int getDropCoefficientInBossRoom() {
        return dropCoefficientInBossRoom_;
      }
      /**
       * <pre>
       * BOSS房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
       * </pre>
       *
       * <code>int32 DropCoefficientInBossRoom = 64;</code>
       * @param value The dropCoefficientInBossRoom to set.
       * @return This builder for chaining.
       */
      public Builder setDropCoefficientInBossRoom(int value) {
        
        dropCoefficientInBossRoom_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * BOSS房掉落翻倍系数（对应战斗地图配置表的MonsterValueBase的掉落字段）
       * </pre>
       *
       * <code>int32 DropCoefficientInBossRoom = 64;</code>
       * @return This builder for chaining.
       */
      public Builder clearDropCoefficientInBossRoom() {
        
        dropCoefficientInBossRoom_ = 0;
        onChanged();
        return this;
      }

      private int heroRebornTime_ ;
      /**
       * <pre>
       * 英雄死亡后，复活的时间，单位毫秒，用于在多层模式中
       * </pre>
       *
       * <code>int32 HeroRebornTime = 65;</code>
       * @return The heroRebornTime.
       */
      @java.lang.Override
      public int getHeroRebornTime() {
        return heroRebornTime_;
      }
      /**
       * <pre>
       * 英雄死亡后，复活的时间，单位毫秒，用于在多层模式中
       * </pre>
       *
       * <code>int32 HeroRebornTime = 65;</code>
       * @param value The heroRebornTime to set.
       * @return This builder for chaining.
       */
      public Builder setHeroRebornTime(int value) {
        
        heroRebornTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 英雄死亡后，复活的时间，单位毫秒，用于在多层模式中
       * </pre>
       *
       * <code>int32 HeroRebornTime = 65;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeroRebornTime() {
        
        heroRebornTime_ = 0;
        onChanged();
        return this;
      }

      private int heroRebornHpCostFactor_ ;
      /**
       * <pre>
       * 英雄死亡后，复活需要消耗的领主血量系数(仅限于迷宫中)，最终扣血量=英雄星级*该系数
       * </pre>
       *
       * <code>int32 HeroRebornHpCostFactor = 66;</code>
       * @return The heroRebornHpCostFactor.
       */
      @java.lang.Override
      public int getHeroRebornHpCostFactor() {
        return heroRebornHpCostFactor_;
      }
      /**
       * <pre>
       * 英雄死亡后，复活需要消耗的领主血量系数(仅限于迷宫中)，最终扣血量=英雄星级*该系数
       * </pre>
       *
       * <code>int32 HeroRebornHpCostFactor = 66;</code>
       * @param value The heroRebornHpCostFactor to set.
       * @return This builder for chaining.
       */
      public Builder setHeroRebornHpCostFactor(int value) {
        
        heroRebornHpCostFactor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 英雄死亡后，复活需要消耗的领主血量系数(仅限于迷宫中)，最终扣血量=英雄星级*该系数
       * </pre>
       *
       * <code>int32 HeroRebornHpCostFactor = 66;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeroRebornHpCostFactor() {
        
        heroRebornHpCostFactor_ = 0;
        onChanged();
        return this;
      }

      private int originalHandCardNum_ ;
      /**
       * <pre>
       * 玩家战斗中初始发牌数量（受HandCardLimit限制）
       * </pre>
       *
       * <code>int32 OriginalHandCardNum = 67;</code>
       * @return The originalHandCardNum.
       */
      @java.lang.Override
      public int getOriginalHandCardNum() {
        return originalHandCardNum_;
      }
      /**
       * <pre>
       * 玩家战斗中初始发牌数量（受HandCardLimit限制）
       * </pre>
       *
       * <code>int32 OriginalHandCardNum = 67;</code>
       * @param value The originalHandCardNum to set.
       * @return This builder for chaining.
       */
      public Builder setOriginalHandCardNum(int value) {
        
        originalHandCardNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 玩家战斗中初始发牌数量（受HandCardLimit限制）
       * </pre>
       *
       * <code>int32 OriginalHandCardNum = 67;</code>
       * @return This builder for chaining.
       */
      public Builder clearOriginalHandCardNum() {
        
        originalHandCardNum_ = 0;
        onChanged();
        return this;
      }

      private int challengeFirstHandChance_ ;
      /**
       * <pre>
       * 挑战者先手概率（万分比）
       * </pre>
       *
       * <code>int32 ChallengeFirstHandChance = 68;</code>
       * @return The challengeFirstHandChance.
       */
      @java.lang.Override
      public int getChallengeFirstHandChance() {
        return challengeFirstHandChance_;
      }
      /**
       * <pre>
       * 挑战者先手概率（万分比）
       * </pre>
       *
       * <code>int32 ChallengeFirstHandChance = 68;</code>
       * @param value The challengeFirstHandChance to set.
       * @return This builder for chaining.
       */
      public Builder setChallengeFirstHandChance(int value) {
        
        challengeFirstHandChance_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 挑战者先手概率（万分比）
       * </pre>
       *
       * <code>int32 ChallengeFirstHandChance = 68;</code>
       * @return This builder for chaining.
       */
      public Builder clearChallengeFirstHandChance() {
        
        challengeFirstHandChance_ = 0;
        onChanged();
        return this;
      }

      private int pvpChallengeTime_ ;
      /**
       * <pre>
       * 天梯对战总时长
       * </pre>
       *
       * <code>int32 PvpChallengeTime = 69;</code>
       * @return The pvpChallengeTime.
       */
      @java.lang.Override
      public int getPvpChallengeTime() {
        return pvpChallengeTime_;
      }
      /**
       * <pre>
       * 天梯对战总时长
       * </pre>
       *
       * <code>int32 PvpChallengeTime = 69;</code>
       * @param value The pvpChallengeTime to set.
       * @return This builder for chaining.
       */
      public Builder setPvpChallengeTime(int value) {
        
        pvpChallengeTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 天梯对战总时长
       * </pre>
       *
       * <code>int32 PvpChallengeTime = 69;</code>
       * @return This builder for chaining.
       */
      public Builder clearPvpChallengeTime() {
        
        pvpChallengeTime_ = 0;
        onChanged();
        return this;
      }

      private int firstHandEnergyCardCount_ ;
      /**
       * <pre>
       * 天梯先手首次发牌必杀卡牌数量
       * </pre>
       *
       * <code>int32 FirstHandEnergyCardCount = 70;</code>
       * @return The firstHandEnergyCardCount.
       */
      @java.lang.Override
      public int getFirstHandEnergyCardCount() {
        return firstHandEnergyCardCount_;
      }
      /**
       * <pre>
       * 天梯先手首次发牌必杀卡牌数量
       * </pre>
       *
       * <code>int32 FirstHandEnergyCardCount = 70;</code>
       * @param value The firstHandEnergyCardCount to set.
       * @return This builder for chaining.
       */
      public Builder setFirstHandEnergyCardCount(int value) {
        
        firstHandEnergyCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 天梯先手首次发牌必杀卡牌数量
       * </pre>
       *
       * <code>int32 FirstHandEnergyCardCount = 70;</code>
       * @return This builder for chaining.
       */
      public Builder clearFirstHandEnergyCardCount() {
        
        firstHandEnergyCardCount_ = 0;
        onChanged();
        return this;
      }

      private int secondtHandEnergyCardCount_ ;
      /**
       * <pre>
       * 天梯后手首次发牌必杀卡牌数量
       * </pre>
       *
       * <code>int32 SecondtHandEnergyCardCount = 71;</code>
       * @return The secondtHandEnergyCardCount.
       */
      @java.lang.Override
      public int getSecondtHandEnergyCardCount() {
        return secondtHandEnergyCardCount_;
      }
      /**
       * <pre>
       * 天梯后手首次发牌必杀卡牌数量
       * </pre>
       *
       * <code>int32 SecondtHandEnergyCardCount = 71;</code>
       * @param value The secondtHandEnergyCardCount to set.
       * @return This builder for chaining.
       */
      public Builder setSecondtHandEnergyCardCount(int value) {
        
        secondtHandEnergyCardCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 天梯后手首次发牌必杀卡牌数量
       * </pre>
       *
       * <code>int32 SecondtHandEnergyCardCount = 71;</code>
       * @return This builder for chaining.
       */
      public Builder clearSecondtHandEnergyCardCount() {
        
        secondtHandEnergyCardCount_ = 0;
        onChanged();
        return this;
      }

      private int pvpFirstHandTime_ ;
      /**
       * <pre>
       * 先手等待出手时间（毫秒）
       * </pre>
       *
       * <code>int32 PvpFirstHandTime = 72;</code>
       * @return The pvpFirstHandTime.
       */
      @java.lang.Override
      public int getPvpFirstHandTime() {
        return pvpFirstHandTime_;
      }
      /**
       * <pre>
       * 先手等待出手时间（毫秒）
       * </pre>
       *
       * <code>int32 PvpFirstHandTime = 72;</code>
       * @param value The pvpFirstHandTime to set.
       * @return This builder for chaining.
       */
      public Builder setPvpFirstHandTime(int value) {
        
        pvpFirstHandTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 先手等待出手时间（毫秒）
       * </pre>
       *
       * <code>int32 PvpFirstHandTime = 72;</code>
       * @return This builder for chaining.
       */
      public Builder clearPvpFirstHandTime() {
        
        pvpFirstHandTime_ = 0;
        onChanged();
        return this;
      }

      private int pvpSecondHandTime_ ;
      /**
       * <pre>
       * 后手等待出手时间（毫秒）
       * </pre>
       *
       * <code>int32 PvpSecondHandTime = 73;</code>
       * @return The pvpSecondHandTime.
       */
      @java.lang.Override
      public int getPvpSecondHandTime() {
        return pvpSecondHandTime_;
      }
      /**
       * <pre>
       * 后手等待出手时间（毫秒）
       * </pre>
       *
       * <code>int32 PvpSecondHandTime = 73;</code>
       * @param value The pvpSecondHandTime to set.
       * @return This builder for chaining.
       */
      public Builder setPvpSecondHandTime(int value) {
        
        pvpSecondHandTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 后手等待出手时间（毫秒）
       * </pre>
       *
       * <code>int32 PvpSecondHandTime = 73;</code>
       * @return This builder for chaining.
       */
      public Builder clearPvpSecondHandTime() {
        
        pvpSecondHandTime_ = 0;
        onChanged();
        return this;
      }

      private int lordCardSpacing_ ;
      /**
       * <pre>
       * 领主卡牌使用间隔时间（毫秒）
       * </pre>
       *
       * <code>int32 LordCardSpacing = 74;</code>
       * @return The lordCardSpacing.
       */
      @java.lang.Override
      public int getLordCardSpacing() {
        return lordCardSpacing_;
      }
      /**
       * <pre>
       * 领主卡牌使用间隔时间（毫秒）
       * </pre>
       *
       * <code>int32 LordCardSpacing = 74;</code>
       * @param value The lordCardSpacing to set.
       * @return This builder for chaining.
       */
      public Builder setLordCardSpacing(int value) {
        
        lordCardSpacing_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 领主卡牌使用间隔时间（毫秒）
       * </pre>
       *
       * <code>int32 LordCardSpacing = 74;</code>
       * @return This builder for chaining.
       */
      public Builder clearLordCardSpacing() {
        
        lordCardSpacing_ = 0;
        onChanged();
        return this;
      }

      private int energyCardCheckUp_ ;
      /**
       * <pre>
       * 必杀卡牌检查使用间隔（毫秒）
       * </pre>
       *
       * <code>int32 EnergyCardCheckUp = 75;</code>
       * @return The energyCardCheckUp.
       */
      @java.lang.Override
      public int getEnergyCardCheckUp() {
        return energyCardCheckUp_;
      }
      /**
       * <pre>
       * 必杀卡牌检查使用间隔（毫秒）
       * </pre>
       *
       * <code>int32 EnergyCardCheckUp = 75;</code>
       * @param value The energyCardCheckUp to set.
       * @return This builder for chaining.
       */
      public Builder setEnergyCardCheckUp(int value) {
        
        energyCardCheckUp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 必杀卡牌检查使用间隔（毫秒）
       * </pre>
       *
       * <code>int32 EnergyCardCheckUp = 75;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnergyCardCheckUp() {
        
        energyCardCheckUp_ = 0;
        onChanged();
        return this;
      }

      private int pvpOriginalHandCardNum_ ;
      /**
       * <pre>
       * PVP战斗玩家战斗中初始发牌数量（受HandCardLimit限制）
       * </pre>
       *
       * <code>int32 PvpOriginalHandCardNum = 76;</code>
       * @return The pvpOriginalHandCardNum.
       */
      @java.lang.Override
      public int getPvpOriginalHandCardNum() {
        return pvpOriginalHandCardNum_;
      }
      /**
       * <pre>
       * PVP战斗玩家战斗中初始发牌数量（受HandCardLimit限制）
       * </pre>
       *
       * <code>int32 PvpOriginalHandCardNum = 76;</code>
       * @param value The pvpOriginalHandCardNum to set.
       * @return This builder for chaining.
       */
      public Builder setPvpOriginalHandCardNum(int value) {
        
        pvpOriginalHandCardNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * PVP战斗玩家战斗中初始发牌数量（受HandCardLimit限制）
       * </pre>
       *
       * <code>int32 PvpOriginalHandCardNum = 76;</code>
       * @return This builder for chaining.
       */
      public Builder clearPvpOriginalHandCardNum() {
        
        pvpOriginalHandCardNum_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList battleSpeedUpRates_ = emptyDoubleList();
      private void ensureBattleSpeedUpRatesIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          battleSpeedUpRates_ = mutableCopy(battleSpeedUpRates_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <pre>
       * 所有战斗2倍速按钮实际读取值
       * </pre>
       *
       * <code>repeated double BattleSpeedUpRates = 77;</code>
       * @return A list containing the battleSpeedUpRates.
       */
      public java.util.List<java.lang.Double>
          getBattleSpeedUpRatesList() {
        return ((bitField0_ & 0x00000020) != 0) ?
                 java.util.Collections.unmodifiableList(battleSpeedUpRates_) : battleSpeedUpRates_;
      }
      /**
       * <pre>
       * 所有战斗2倍速按钮实际读取值
       * </pre>
       *
       * <code>repeated double BattleSpeedUpRates = 77;</code>
       * @return The count of battleSpeedUpRates.
       */
      public int getBattleSpeedUpRatesCount() {
        return battleSpeedUpRates_.size();
      }
      /**
       * <pre>
       * 所有战斗2倍速按钮实际读取值
       * </pre>
       *
       * <code>repeated double BattleSpeedUpRates = 77;</code>
       * @param index The index of the element to return.
       * @return The battleSpeedUpRates at the given index.
       */
      public double getBattleSpeedUpRates(int index) {
        return battleSpeedUpRates_.getDouble(index);
      }
      /**
       * <pre>
       * 所有战斗2倍速按钮实际读取值
       * </pre>
       *
       * <code>repeated double BattleSpeedUpRates = 77;</code>
       * @param index The index to set the value at.
       * @param value The battleSpeedUpRates to set.
       * @return This builder for chaining.
       */
      public Builder setBattleSpeedUpRates(
          int index, double value) {
        ensureBattleSpeedUpRatesIsMutable();
        battleSpeedUpRates_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 所有战斗2倍速按钮实际读取值
       * </pre>
       *
       * <code>repeated double BattleSpeedUpRates = 77;</code>
       * @param value The battleSpeedUpRates to add.
       * @return This builder for chaining.
       */
      public Builder addBattleSpeedUpRates(double value) {
        ensureBattleSpeedUpRatesIsMutable();
        battleSpeedUpRates_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 所有战斗2倍速按钮实际读取值
       * </pre>
       *
       * <code>repeated double BattleSpeedUpRates = 77;</code>
       * @param values The battleSpeedUpRates to add.
       * @return This builder for chaining.
       */
      public Builder addAllBattleSpeedUpRates(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBattleSpeedUpRatesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, battleSpeedUpRates_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 所有战斗2倍速按钮实际读取值
       * </pre>
       *
       * <code>repeated double BattleSpeedUpRates = 77;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleSpeedUpRates() {
        battleSpeedUpRates_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private int hangUpIntervalTime_ ;
      /**
       * <pre>
       * 挂机流程间隔时间
       * </pre>
       *
       * <code>int32 HangUpIntervalTime = 78;</code>
       * @return The hangUpIntervalTime.
       */
      @java.lang.Override
      public int getHangUpIntervalTime() {
        return hangUpIntervalTime_;
      }
      /**
       * <pre>
       * 挂机流程间隔时间
       * </pre>
       *
       * <code>int32 HangUpIntervalTime = 78;</code>
       * @param value The hangUpIntervalTime to set.
       * @return This builder for chaining.
       */
      public Builder setHangUpIntervalTime(int value) {
        
        hangUpIntervalTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 挂机流程间隔时间
       * </pre>
       *
       * <code>int32 HangUpIntervalTime = 78;</code>
       * @return This builder for chaining.
       */
      public Builder clearHangUpIntervalTime() {
        
        hangUpIntervalTime_ = 0;
        onChanged();
        return this;
      }

      private int nextWaveAppearInterval_ ;
      /**
       * <pre>
       * 上一批次的怪物全部击杀完后，下一批次的怪物出现的时间间隔，单位(毫秒)
       * </pre>
       *
       * <code>int32 NextWaveAppearInterval = 79;</code>
       * @return The nextWaveAppearInterval.
       */
      @java.lang.Override
      public int getNextWaveAppearInterval() {
        return nextWaveAppearInterval_;
      }
      /**
       * <pre>
       * 上一批次的怪物全部击杀完后，下一批次的怪物出现的时间间隔，单位(毫秒)
       * </pre>
       *
       * <code>int32 NextWaveAppearInterval = 79;</code>
       * @param value The nextWaveAppearInterval to set.
       * @return This builder for chaining.
       */
      public Builder setNextWaveAppearInterval(int value) {
        
        nextWaveAppearInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 上一批次的怪物全部击杀完后，下一批次的怪物出现的时间间隔，单位(毫秒)
       * </pre>
       *
       * <code>int32 NextWaveAppearInterval = 79;</code>
       * @return This builder for chaining.
       */
      public Builder clearNextWaveAppearInterval() {
        
        nextWaveAppearInterval_ = 0;
        onChanged();
        return this;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ dice_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_OrBuilder> diceBuilder_;
      /**
       * <pre>
       * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
       * @return Whether the dice field is set.
       */
      public boolean hasDice() {
        return diceBuilder_ != null || dice_ != null;
      }
      /**
       * <pre>
       * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
       * @return The dice.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ getDice() {
        if (diceBuilder_ == null) {
          return dice_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.getDefaultInstance() : dice_;
        } else {
          return diceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
       */
      public Builder setDice(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ value) {
        if (diceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dice_ = value;
          onChanged();
        } else {
          diceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
       */
      public Builder setDice(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.Builder builderForValue) {
        if (diceBuilder_ == null) {
          dice_ = builderForValue.build();
          onChanged();
        } else {
          diceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
       */
      public Builder mergeDice(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_ value) {
        if (diceBuilder_ == null) {
          if (dice_ != null) {
            dice_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.newBuilder(dice_).mergeFrom(value).buildPartial();
          } else {
            dice_ = value;
          }
          onChanged();
        } else {
          diceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
       */
      public Builder clearDice() {
        if (diceBuilder_ == null) {
          dice_ = null;
          onChanged();
        } else {
          dice_ = null;
          diceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.Builder getDiceBuilder() {
        
        onChanged();
        return getDiceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_OrBuilder getDiceOrBuilder() {
        if (diceBuilder_ != null) {
          return diceBuilder_.getMessageOrBuilder();
        } else {
          return dice_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.getDefaultInstance() : dice_;
        }
      }
      /**
       * <pre>
       * 迷宫中玩家可选骰子数量的上限及迷宫中玩家骰子最大的面数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Dice_ Dice = 80;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_OrBuilder> 
          getDiceFieldBuilder() {
        if (diceBuilder_ == null) {
          diceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Dice_OrBuilder>(
                  getDice(),
                  getParentForChildren(),
                  isClean());
          dice_ = null;
        }
        return diceBuilder_;
      }

      private int remainsCompoundOriginalCount_ ;
      /**
       * <pre>
       * 迷宫中玩家可合成遗物的初始次数
       * </pre>
       *
       * <code>int32 RemainsCompoundOriginalCount = 81;</code>
       * @return The remainsCompoundOriginalCount.
       */
      @java.lang.Override
      public int getRemainsCompoundOriginalCount() {
        return remainsCompoundOriginalCount_;
      }
      /**
       * <pre>
       * 迷宫中玩家可合成遗物的初始次数
       * </pre>
       *
       * <code>int32 RemainsCompoundOriginalCount = 81;</code>
       * @param value The remainsCompoundOriginalCount to set.
       * @return This builder for chaining.
       */
      public Builder setRemainsCompoundOriginalCount(int value) {
        
        remainsCompoundOriginalCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 迷宫中玩家可合成遗物的初始次数
       * </pre>
       *
       * <code>int32 RemainsCompoundOriginalCount = 81;</code>
       * @return This builder for chaining.
       */
      public Builder clearRemainsCompoundOriginalCount() {
        
        remainsCompoundOriginalCount_ = 0;
        onChanged();
        return this;
      }

      private Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ mazeValueFactor_;
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_OrBuilder> mazeValueFactorBuilder_;
      /**
       * <pre>
       * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
       * @return Whether the mazeValueFactor field is set.
       */
      public boolean hasMazeValueFactor() {
        return mazeValueFactorBuilder_ != null || mazeValueFactor_ != null;
      }
      /**
       * <pre>
       * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
       * @return The mazeValueFactor.
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ getMazeValueFactor() {
        if (mazeValueFactorBuilder_ == null) {
          return mazeValueFactor_ == null ? Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.getDefaultInstance() : mazeValueFactor_;
        } else {
          return mazeValueFactorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
       */
      public Builder setMazeValueFactor(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ value) {
        if (mazeValueFactorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mazeValueFactor_ = value;
          onChanged();
        } else {
          mazeValueFactorBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
       */
      public Builder setMazeValueFactor(
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.Builder builderForValue) {
        if (mazeValueFactorBuilder_ == null) {
          mazeValueFactor_ = builderForValue.build();
          onChanged();
        } else {
          mazeValueFactorBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
       */
      public Builder mergeMazeValueFactor(Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_ value) {
        if (mazeValueFactorBuilder_ == null) {
          if (mazeValueFactor_ != null) {
            mazeValueFactor_ =
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.newBuilder(mazeValueFactor_).mergeFrom(value).buildPartial();
          } else {
            mazeValueFactor_ = value;
          }
          onChanged();
        } else {
          mazeValueFactorBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
       */
      public Builder clearMazeValueFactor() {
        if (mazeValueFactorBuilder_ == null) {
          mazeValueFactor_ = null;
          onChanged();
        } else {
          mazeValueFactor_ = null;
          mazeValueFactorBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.Builder getMazeValueFactorBuilder() {
        
        onChanged();
        return getMazeValueFactorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
       */
      public Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_OrBuilder getMazeValueFactorOrBuilder() {
        if (mazeValueFactorBuilder_ != null) {
          return mazeValueFactorBuilder_.getMessageOrBuilder();
        } else {
          return mazeValueFactor_ == null ?
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.getDefaultInstance() : mazeValueFactor_;
        }
      }
      /**
       * <pre>
       * 迷宫动态难度的函数系数，AtkRate为攻击力计算时的倍速，Factor为计算函数中用的参数
       * </pre>
       *
       * <code>.Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_OrBuilder> 
          getMazeValueFactorFieldBuilder() {
        if (mazeValueFactorBuilder_ == null) {
          mazeValueFactorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_.Builder, Config.BattleParamTemplateOuterClass.BattleParamTemplate.Mazevaluefactor_OrBuilder>(
                  getMazeValueFactor(),
                  getParentForChildren(),
                  isClean());
          mazeValueFactor_ = null;
        }
        return mazeValueFactorBuilder_;
      }

      private int battleDashTime_ ;
      /**
       * <pre>
       * 近战战斗冲刺时间（Dash）
       * </pre>
       *
       * <code>int32 BattleDashTime = 83;</code>
       * @return The battleDashTime.
       */
      @java.lang.Override
      public int getBattleDashTime() {
        return battleDashTime_;
      }
      /**
       * <pre>
       * 近战战斗冲刺时间（Dash）
       * </pre>
       *
       * <code>int32 BattleDashTime = 83;</code>
       * @param value The battleDashTime to set.
       * @return This builder for chaining.
       */
      public Builder setBattleDashTime(int value) {
        
        battleDashTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 近战战斗冲刺时间（Dash）
       * </pre>
       *
       * <code>int32 BattleDashTime = 83;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleDashTime() {
        
        battleDashTime_ = 0;
        onChanged();
        return this;
      }

      private int battleDashBackTime_ ;
      /**
       * <pre>
       * 近战战斗冲刺返回时间（DashBack）
       * </pre>
       *
       * <code>int32 BattleDashBackTime = 84;</code>
       * @return The battleDashBackTime.
       */
      @java.lang.Override
      public int getBattleDashBackTime() {
        return battleDashBackTime_;
      }
      /**
       * <pre>
       * 近战战斗冲刺返回时间（DashBack）
       * </pre>
       *
       * <code>int32 BattleDashBackTime = 84;</code>
       * @param value The battleDashBackTime to set.
       * @return This builder for chaining.
       */
      public Builder setBattleDashBackTime(int value) {
        
        battleDashBackTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 近战战斗冲刺返回时间（DashBack）
       * </pre>
       *
       * <code>int32 BattleDashBackTime = 84;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleDashBackTime() {
        
        battleDashBackTime_ = 0;
        onChanged();
        return this;
      }

      private int battleRoundSafeTime_ ;
      /**
       * <pre>
       * 如果有击飞和击倒 留出的安全表现时间
       * </pre>
       *
       * <code>int32 BattleRoundSafeTime = 85;</code>
       * @return The battleRoundSafeTime.
       */
      @java.lang.Override
      public int getBattleRoundSafeTime() {
        return battleRoundSafeTime_;
      }
      /**
       * <pre>
       * 如果有击飞和击倒 留出的安全表现时间
       * </pre>
       *
       * <code>int32 BattleRoundSafeTime = 85;</code>
       * @param value The battleRoundSafeTime to set.
       * @return This builder for chaining.
       */
      public Builder setBattleRoundSafeTime(int value) {
        
        battleRoundSafeTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 如果有击飞和击倒 留出的安全表现时间
       * </pre>
       *
       * <code>int32 BattleRoundSafeTime = 85;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleRoundSafeTime() {
        
        battleRoundSafeTime_ = 0;
        onChanged();
        return this;
      }

      private int battleWaitNextTime_ ;
      /**
       * <pre>
       * 下个不是友军（如果不是友军，需要等待当年动作执行完毕），行动前，需要等待一个比较短暂的时间，该时间在全局配置表配置。作用为让摄像机回调到一个位置。
       * </pre>
       *
       * <code>int32 BattleWaitNextTime = 86;</code>
       * @return The battleWaitNextTime.
       */
      @java.lang.Override
      public int getBattleWaitNextTime() {
        return battleWaitNextTime_;
      }
      /**
       * <pre>
       * 下个不是友军（如果不是友军，需要等待当年动作执行完毕），行动前，需要等待一个比较短暂的时间，该时间在全局配置表配置。作用为让摄像机回调到一个位置。
       * </pre>
       *
       * <code>int32 BattleWaitNextTime = 86;</code>
       * @param value The battleWaitNextTime to set.
       * @return This builder for chaining.
       */
      public Builder setBattleWaitNextTime(int value) {
        
        battleWaitNextTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 下个不是友军（如果不是友军，需要等待当年动作执行完毕），行动前，需要等待一个比较短暂的时间，该时间在全局配置表配置。作用为让摄像机回调到一个位置。
       * </pre>
       *
       * <code>int32 BattleWaitNextTime = 86;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleWaitNextTime() {
        
        battleWaitNextTime_ = 0;
        onChanged();
        return this;
      }

      private int battleRoundTime_ ;
      /**
       * <pre>
       * 行为重新开始等待时间
       * </pre>
       *
       * <code>int32 BattleRoundTime = 87;</code>
       * @return The battleRoundTime.
       */
      @java.lang.Override
      public int getBattleRoundTime() {
        return battleRoundTime_;
      }
      /**
       * <pre>
       * 行为重新开始等待时间
       * </pre>
       *
       * <code>int32 BattleRoundTime = 87;</code>
       * @param value The battleRoundTime to set.
       * @return This builder for chaining.
       */
      public Builder setBattleRoundTime(int value) {
        
        battleRoundTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 行为重新开始等待时间
       * </pre>
       *
       * <code>int32 BattleRoundTime = 87;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleRoundTime() {
        
        battleRoundTime_ = 0;
        onChanged();
        return this;
      }

      private int battleHitFlyForce_ ;
      /**
       * <pre>
       * 击飞力
       * </pre>
       *
       * <code>int32 BattleHitFlyForce = 88;</code>
       * @return The battleHitFlyForce.
       */
      @java.lang.Override
      public int getBattleHitFlyForce() {
        return battleHitFlyForce_;
      }
      /**
       * <pre>
       * 击飞力
       * </pre>
       *
       * <code>int32 BattleHitFlyForce = 88;</code>
       * @param value The battleHitFlyForce to set.
       * @return This builder for chaining.
       */
      public Builder setBattleHitFlyForce(int value) {
        
        battleHitFlyForce_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 击飞力
       * </pre>
       *
       * <code>int32 BattleHitFlyForce = 88;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleHitFlyForce() {
        
        battleHitFlyForce_ = 0;
        onChanged();
        return this;
      }

      private int battleHitDownForce_ ;
      /**
       * <pre>
       * 击倒力
       * </pre>
       *
       * <code>int32 BattleHitDownForce = 89;</code>
       * @return The battleHitDownForce.
       */
      @java.lang.Override
      public int getBattleHitDownForce() {
        return battleHitDownForce_;
      }
      /**
       * <pre>
       * 击倒力
       * </pre>
       *
       * <code>int32 BattleHitDownForce = 89;</code>
       * @param value The battleHitDownForce to set.
       * @return This builder for chaining.
       */
      public Builder setBattleHitDownForce(int value) {
        
        battleHitDownForce_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 击倒力
       * </pre>
       *
       * <code>int32 BattleHitDownForce = 89;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleHitDownForce() {
        
        battleHitDownForce_ = 0;
        onChanged();
        return this;
      }

      private int battleHitFlyMaxHeight_ ;
      /**
       * <pre>
       * 击飞最大高度
       * </pre>
       *
       * <code>int32 BattleHitFlyMaxHeight = 90;</code>
       * @return The battleHitFlyMaxHeight.
       */
      @java.lang.Override
      public int getBattleHitFlyMaxHeight() {
        return battleHitFlyMaxHeight_;
      }
      /**
       * <pre>
       * 击飞最大高度
       * </pre>
       *
       * <code>int32 BattleHitFlyMaxHeight = 90;</code>
       * @param value The battleHitFlyMaxHeight to set.
       * @return This builder for chaining.
       */
      public Builder setBattleHitFlyMaxHeight(int value) {
        
        battleHitFlyMaxHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 击飞最大高度
       * </pre>
       *
       * <code>int32 BattleHitFlyMaxHeight = 90;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleHitFlyMaxHeight() {
        
        battleHitFlyMaxHeight_ = 0;
        onChanged();
        return this;
      }

      private int battleGravity_ ;
      /**
       * <pre>
       * 击飞下降重力
       * </pre>
       *
       * <code>int32 BattleGravity = 91;</code>
       * @return The battleGravity.
       */
      @java.lang.Override
      public int getBattleGravity() {
        return battleGravity_;
      }
      /**
       * <pre>
       * 击飞下降重力
       * </pre>
       *
       * <code>int32 BattleGravity = 91;</code>
       * @param value The battleGravity to set.
       * @return This builder for chaining.
       */
      public Builder setBattleGravity(int value) {
        
        battleGravity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 击飞下降重力
       * </pre>
       *
       * <code>int32 BattleGravity = 91;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleGravity() {
        
        battleGravity_ = 0;
        onChanged();
        return this;
      }

      private int battleFlyUpGravity_ ;
      /**
       * <pre>
       * 击飞上行重力
       * </pre>
       *
       * <code>int32 BattleFlyUpGravity = 92;</code>
       * @return The battleFlyUpGravity.
       */
      @java.lang.Override
      public int getBattleFlyUpGravity() {
        return battleFlyUpGravity_;
      }
      /**
       * <pre>
       * 击飞上行重力
       * </pre>
       *
       * <code>int32 BattleFlyUpGravity = 92;</code>
       * @param value The battleFlyUpGravity to set.
       * @return This builder for chaining.
       */
      public Builder setBattleFlyUpGravity(int value) {
        
        battleFlyUpGravity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 击飞上行重力
       * </pre>
       *
       * <code>int32 BattleFlyUpGravity = 92;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleFlyUpGravity() {
        
        battleFlyUpGravity_ = 0;
        onChanged();
        return this;
      }

      private int battleNearTopGravity_ ;
      /**
       * <pre>
       * 速度趋近顶部重力
       * </pre>
       *
       * <code>int32 BattleNearTopGravity = 93;</code>
       * @return The battleNearTopGravity.
       */
      @java.lang.Override
      public int getBattleNearTopGravity() {
        return battleNearTopGravity_;
      }
      /**
       * <pre>
       * 速度趋近顶部重力
       * </pre>
       *
       * <code>int32 BattleNearTopGravity = 93;</code>
       * @param value The battleNearTopGravity to set.
       * @return This builder for chaining.
       */
      public Builder setBattleNearTopGravity(int value) {
        
        battleNearTopGravity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 速度趋近顶部重力
       * </pre>
       *
       * <code>int32 BattleNearTopGravity = 93;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleNearTopGravity() {
        
        battleNearTopGravity_ = 0;
        onChanged();
        return this;
      }

      private int battleNearTopSpeed_ ;
      /**
       * <pre>
       * 速衰接近顶部速度判定
       * </pre>
       *
       * <code>int32 BattleNearTopSpeed = 94;</code>
       * @return The battleNearTopSpeed.
       */
      @java.lang.Override
      public int getBattleNearTopSpeed() {
        return battleNearTopSpeed_;
      }
      /**
       * <pre>
       * 速衰接近顶部速度判定
       * </pre>
       *
       * <code>int32 BattleNearTopSpeed = 94;</code>
       * @param value The battleNearTopSpeed to set.
       * @return This builder for chaining.
       */
      public Builder setBattleNearTopSpeed(int value) {
        
        battleNearTopSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 速衰接近顶部速度判定
       * </pre>
       *
       * <code>int32 BattleNearTopSpeed = 94;</code>
       * @return This builder for chaining.
       */
      public Builder clearBattleNearTopSpeed() {
        
        battleNearTopSpeed_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Config.BattleParamTemplate)
    }

    // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate)
    private static final Config.BattleParamTemplateOuterClass.BattleParamTemplate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Config.BattleParamTemplateOuterClass.BattleParamTemplate();
    }

    public static Config.BattleParamTemplateOuterClass.BattleParamTemplate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BattleParamTemplate>
        PARSER = new com.google.protobuf.AbstractParser<BattleParamTemplate>() {
      @java.lang.Override
      public BattleParamTemplate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BattleParamTemplate(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BattleParamTemplate> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BattleParamTemplate> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public Config.BattleParamTemplateOuterClass.BattleParamTemplate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Config_BattleParamTemplate_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Config_BattleParamTemplate_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Config_BattleParamTemplate_Dodgeeffectlimit__descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Config_BattleParamTemplate_Dodgeeffectlimit__fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Config_BattleParamTemplate_Elementeffectlimit__descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Config_BattleParamTemplate_Elementeffectlimit__fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Config_BattleParamTemplate_Soulinterest__descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Config_BattleParamTemplate_Soulinterest__fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Config_BattleParamTemplate_Dice__descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Config_BattleParamTemplate_Dice__fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Config_BattleParamTemplate_Mazevaluefactor__descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Config_BattleParamTemplate_Mazevaluefactor__fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n protos/BattleParamTemplate.proto\022\006Conf" +
      "ig\032\031protos/Position2Int.proto\"\342\031\n\023Battle" +
      "ParamTemplate\022\033\n\023BattleStartWaitTime\030\001 \001" +
      "(\005\022\026\n\016BattleMapSizes\030\002 \003(\005\022G\n\020DodgeEffec" +
      "tLimit\030\003 \001(\0132-.Config.BattleParamTemplat" +
      "e.Dodgeeffectlimit_\022F\n\017CritEffectLimit\030\004" +
      " \001(\0132-.Config.BattleParamTemplate.Dodgee" +
      "ffectlimit_\022I\n\022CritDamEffectLimit\030\005 \001(\0132" +
      "-.Config.BattleParamTemplate.Dodgeeffect" +
      "limit_\022M\n\026DefenseRateEffectLimit\030\006 \001(\0132-" +
      ".Config.BattleParamTemplate.Dodgeeffectl" +
      "imit_\022\031\n\021DamageReduceLimit\030\007 \001(\005\022D\n\rCool" +
      "DownLimit\030\010 \001(\0132-.Config.BattleParamTemp" +
      "late.Dodgeeffectlimit_\022K\n\022ElementEffectL" +
      "imit\030\t \001(\0132/.Config.BattleParamTemplate." +
      "Elementeffectlimit_\022\031\n\021ElementAttackBase" +
      "\030\n \001(\001\022\032\n\022ElementDefenseBase\030\013 \001(\001\022\031\n\021El" +
      "ementEffectBase\030\014 \001(\005\022L\n\025DamageCorrectio" +
      "nRange\030\r \001(\0132-.Config.BattleParamTemplat" +
      "e.Dodgeeffectlimit_\022\027\n\017DodgeCorrection\030\016" +
      " \001(\001\022\026\n\016CritCorrection\030\017 \001(\001\022\022\n\nBlckEffe" +
      "ct\030\020 \001(\005\022G\n\020BlockEffectLimit\030\021 \001(\0132-.Con" +
      "fig.BattleParamTemplate.Dodgeeffectlimit" +
      "_\022\032\n\022HeroMaxEnergyValue\030\022 \001(\005\022\030\n\020HeroMax" +
      "EnergyNum\030\023 \001(\005\022\025\n\rLordMaxEnergy\030\024 \001(\005\022\026" +
      "\n\016MaxAttackSpeed\030\025 \001(\001\022\026\n\016HeroSkillCount" +
      "\030\026 \001(\005\022\033\n\023MonsterWalkModeTime\030\027 \001(\005\022\033\n\023M" +
      "onsterDropModeTime\030\030 \001(\005\022$\n\rBattleMapGri" +
      "d\030\031 \001(\0132\r.Position2Int\022\020\n\010GridSize\030\032 \001(\005" +
      "\022\020\n\010LordGrid\030\033 \001(\005\022\025\n\rSkillMoveTime\030\034 \001(" +
      "\005\022\026\n\016SkillFlashTime\030\035 \001(\005\022\030\n\020MonsterDrop" +
      "Range\030\036 \001(\005\022\026\n\016OffsetDistance\030\037 \001(\005\022\030\n\020D" +
      "ropItemStayTime\030  \001(\005\022\031\n\021BannerStayMaxti" +
      "me\030! \001(\005\022\025\n\rLordMoveSpeed\030\" \001(\005\022\025\n\rDropI" +
      "temRange\030# \001(\005\022\017\n\007MaxRoom\030$ \001(\005\022\030\n\020LordH" +
      "ealthFactor\030% \001(\005\022\031\n\021RuneRefreshPrices\030&" +
      " \003(\005\022\030\n\020HeroMaxRuneCount\030\' \001(\005\022\032\n\022MaxSou" +
      "lStampDemand\030( \001(\005\022\035\n\025SoulStampDemandFac" +
      "tor\030) \001(\001\022\023\n\013BagCapacity\030* \001(\005\022\025\n\rResolv" +
      "eFactor\030+ \001(\005\022\030\n\020SkillFadeOutTime\030, \001(\005\022" +
      "\030\n\020PvpEnemyLordGrid\030- \001(\005\022\025\n\rPvpSceneBuf" +
      "fs\030. \003(\005\022\033\n\023PvpFirstHandWaiting\030/ \001(\005\022\034\n" +
      "\024PvpSecondHandWaiting\0300 \001(\005\022\031\n\021PvpStartC" +
      "ountDown\0301 \001(\005\022\030\n\020PvpOverCountDown\0302 \001(\005" +
      "\022?\n\014SoulInterest\0303 \001(\0132).Config.BattlePa" +
      "ramTemplate.Soulinterest_\022\032\n\022BattleHeroD" +
      "ieValue\0304 \001(\005\022\032\n\022BattleMaxTimeValue\0305 \001(" +
      "\005\022\026\n\016BattleJumpTime\0306 \001(\005\022\036\n\026ProfessionU" +
      "pgradeCount\0307 \001(\005\022\025\n\rHandCardLimit\0308 \001(\005" +
      "\022\023\n\013ForgetCosts\0309 \003(\005\022\021\n\tPrayCosts\030: \003(\005" +
      "\022\032\n\022CardLevelUpNeedNum\030; \001(\005\022\033\n\023CardUseT" +
      "oDrawUnique\030< \001(\005\022\035\n\025OriginalHandCardLim" +
      "it\030= \001(\005\022#\n\033UniqueSkillCardLimitCountOT\030" +
      "> \001(\005\022\"\n\032DropCoefficientInEliteRoom\030? \001(" +
      "\005\022!\n\031DropCoefficientInBossRoom\030@ \001(\005\022\026\n\016" +
      "HeroRebornTime\030A \001(\005\022\036\n\026HeroRebornHpCost" +
      "Factor\030B \001(\005\022\033\n\023OriginalHandCardNum\030C \001(" +
      "\005\022 \n\030ChallengeFirstHandChance\030D \001(\005\022\030\n\020P" +
      "vpChallengeTime\030E \001(\005\022 \n\030FirstHandEnergy" +
      "CardCount\030F \001(\005\022\"\n\032SecondtHandEnergyCard" +
      "Count\030G \001(\005\022\030\n\020PvpFirstHandTime\030H \001(\005\022\031\n" +
      "\021PvpSecondHandTime\030I \001(\005\022\027\n\017LordCardSpac" +
      "ing\030J \001(\005\022\031\n\021EnergyCardCheckUp\030K \001(\005\022\036\n\026" +
      "PvpOriginalHandCardNum\030L \001(\005\022\032\n\022BattleSp" +
      "eedUpRates\030M \003(\001\022\032\n\022HangUpIntervalTime\030N" +
      " \001(\005\022\036\n\026NextWaveAppearInterval\030O \001(\005\022/\n\004" +
      "Dice\030P \001(\0132!.Config.BattleParamTemplate." +
      "Dice_\022$\n\034RemainsCompoundOriginalCount\030Q " +
      "\001(\005\022E\n\017MazeValueFactor\030R \001(\0132,.Config.Ba" +
      "ttleParamTemplate.Mazevaluefactor_\022\026\n\016Ba" +
      "ttleDashTime\030S \001(\005\022\032\n\022BattleDashBackTime" +
      "\030T \001(\005\022\033\n\023BattleRoundSafeTime\030U \001(\005\022\032\n\022B" +
      "attleWaitNextTime\030V \001(\005\022\027\n\017BattleRoundTi" +
      "me\030W \001(\005\022\031\n\021BattleHitFlyForce\030X \001(\005\022\032\n\022B" +
      "attleHitDownForce\030Y \001(\005\022\035\n\025BattleHitFlyM" +
      "axHeight\030Z \001(\005\022\025\n\rBattleGravity\030[ \001(\005\022\032\n" +
      "\022BattleFlyUpGravity\030\\ \001(\005\022\034\n\024BattleNearT" +
      "opGravity\030] \001(\005\022\032\n\022BattleNearTopSpeed\030^ " +
      "\001(\005\032-\n\021Dodgeeffectlimit_\022\013\n\003Max\030\001 \001(\005\022\013\n" +
      "\003Min\030\002 \001(\005\032/\n\023Elementeffectlimit_\022\013\n\003Max" +
      "\030\001 \001(\001\022\013\n\003Min\030\002 \001(\001\0321\n\rSoulinterest_\022\016\n\006" +
      "Factor\030\001 \001(\005\022\020\n\010MaxCount\030\002 \001(\005\032-\n\005Dice_\022" +
      "\021\n\tDiceCount\030\001 \001(\005\022\021\n\tDiceValue\030\002 \001(\005\0323\n" +
      "\020Mazevaluefactor_\022\017\n\007AtkRate\030\001 \001(\001\022\016\n\006Fa" +
      "ctor\030\002 \001(\005b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          Position2IntOuterClass.getDescriptor(),
        });
    internal_static_Config_BattleParamTemplate_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Config_BattleParamTemplate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Config_BattleParamTemplate_descriptor,
        new java.lang.String[] { "BattleStartWaitTime", "BattleMapSizes", "DodgeEffectLimit", "CritEffectLimit", "CritDamEffectLimit", "DefenseRateEffectLimit", "DamageReduceLimit", "CoolDownLimit", "ElementEffectLimit", "ElementAttackBase", "ElementDefenseBase", "ElementEffectBase", "DamageCorrectionRange", "DodgeCorrection", "CritCorrection", "BlckEffect", "BlockEffectLimit", "HeroMaxEnergyValue", "HeroMaxEnergyNum", "LordMaxEnergy", "MaxAttackSpeed", "HeroSkillCount", "MonsterWalkModeTime", "MonsterDropModeTime", "BattleMapGrid", "GridSize", "LordGrid", "SkillMoveTime", "SkillFlashTime", "MonsterDropRange", "OffsetDistance", "DropItemStayTime", "BannerStayMaxtime", "LordMoveSpeed", "DropItemRange", "MaxRoom", "LordHealthFactor", "RuneRefreshPrices", "HeroMaxRuneCount", "MaxSoulStampDemand", "SoulStampDemandFactor", "BagCapacity", "ResolveFactor", "SkillFadeOutTime", "PvpEnemyLordGrid", "PvpSceneBuffs", "PvpFirstHandWaiting", "PvpSecondHandWaiting", "PvpStartCountDown", "PvpOverCountDown", "SoulInterest", "BattleHeroDieValue", "BattleMaxTimeValue", "BattleJumpTime", "ProfessionUpgradeCount", "HandCardLimit", "ForgetCosts", "PrayCosts", "CardLevelUpNeedNum", "CardUseToDrawUnique", "OriginalHandCardLimit", "UniqueSkillCardLimitCountOT", "DropCoefficientInEliteRoom", "DropCoefficientInBossRoom", "HeroRebornTime", "HeroRebornHpCostFactor", "OriginalHandCardNum", "ChallengeFirstHandChance", "PvpChallengeTime", "FirstHandEnergyCardCount", "SecondtHandEnergyCardCount", "PvpFirstHandTime", "PvpSecondHandTime", "LordCardSpacing", "EnergyCardCheckUp", "PvpOriginalHandCardNum", "BattleSpeedUpRates", "HangUpIntervalTime", "NextWaveAppearInterval", "Dice", "RemainsCompoundOriginalCount", "MazeValueFactor", "BattleDashTime", "BattleDashBackTime", "BattleRoundSafeTime", "BattleWaitNextTime", "BattleRoundTime", "BattleHitFlyForce", "BattleHitDownForce", "BattleHitFlyMaxHeight", "BattleGravity", "BattleFlyUpGravity", "BattleNearTopGravity", "BattleNearTopSpeed", });
    internal_static_Config_BattleParamTemplate_Dodgeeffectlimit__descriptor =
      internal_static_Config_BattleParamTemplate_descriptor.getNestedTypes().get(0);
    internal_static_Config_BattleParamTemplate_Dodgeeffectlimit__fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Config_BattleParamTemplate_Dodgeeffectlimit__descriptor,
        new java.lang.String[] { "Max", "Min", });
    internal_static_Config_BattleParamTemplate_Elementeffectlimit__descriptor =
      internal_static_Config_BattleParamTemplate_descriptor.getNestedTypes().get(1);
    internal_static_Config_BattleParamTemplate_Elementeffectlimit__fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Config_BattleParamTemplate_Elementeffectlimit__descriptor,
        new java.lang.String[] { "Max", "Min", });
    internal_static_Config_BattleParamTemplate_Soulinterest__descriptor =
      internal_static_Config_BattleParamTemplate_descriptor.getNestedTypes().get(2);
    internal_static_Config_BattleParamTemplate_Soulinterest__fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Config_BattleParamTemplate_Soulinterest__descriptor,
        new java.lang.String[] { "Factor", "MaxCount", });
    internal_static_Config_BattleParamTemplate_Dice__descriptor =
      internal_static_Config_BattleParamTemplate_descriptor.getNestedTypes().get(3);
    internal_static_Config_BattleParamTemplate_Dice__fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Config_BattleParamTemplate_Dice__descriptor,
        new java.lang.String[] { "DiceCount", "DiceValue", });
    internal_static_Config_BattleParamTemplate_Mazevaluefactor__descriptor =
      internal_static_Config_BattleParamTemplate_descriptor.getNestedTypes().get(4);
    internal_static_Config_BattleParamTemplate_Mazevaluefactor__fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Config_BattleParamTemplate_Mazevaluefactor__descriptor,
        new java.lang.String[] { "AtkRate", "Factor", });
    Position2IntOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
