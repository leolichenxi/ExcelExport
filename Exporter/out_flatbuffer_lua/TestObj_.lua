-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: Config

local flatbuffers = require('flatbuffers')

---@class TestObj_ : TestObj___mt 
 local TestObj_ = {} -- the module
 ---@class TestObj___mt 
 local TestObj__mt = {} -- the class metatable
 
function TestObj_.New()
    local o = {}
    setmetatable(o, {__index = TestObj__mt})
    return o
end
function TestObj_.GetRootAsTestObj_(buf, offset)
    if type(buf) == "string" then
        buf = flatbuffers.binaryArray.New(buf)
    end
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = TestObj_.New()
    o:Init(buf, n + offset)
    return o
end
function TestObj__mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function TestObj__mt:A()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function TestObj__mt:B()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Float32, o + self.view.pos)
    end
    return 0.0
end
function TestObj__mt:C()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return (self.view:Get(flatbuffers.N.Bool, o + self.view.pos) ~= 0)
    end
    return false
end
function TestObj_.Start(builder) builder:StartObject(3) end
function TestObj_.AddA(builder, a) builder:PrependInt32Slot(0, a, 0) end
function TestObj_.AddB(builder, b) builder:PrependFloat32Slot(1, b, 0.0) end
function TestObj_.AddC(builder, c) builder:PrependBoolSlot(2, c, 0) end
function TestObj_.End(builder) return builder:EndObject() end

return TestObj_ -- return the module