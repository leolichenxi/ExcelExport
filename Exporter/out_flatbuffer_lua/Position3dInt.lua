-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: 

local flatbuffers = require('flatbuffers')

---@class Position3dInt : Position3dInt__mt 
 local Position3dInt = {} -- the module
 ---@class Position3dInt__mt 
 local Position3dInt_mt = {} -- the class metatable
 
function Position3dInt.New()
    local o = {}
    setmetatable(o, {__index = Position3dInt_mt})
    return o
end
function Position3dInt.GetRootAsPosition3dInt(buf, offset)
    if type(buf) == "string" then
        buf = flatbuffers.binaryArray.New(buf)
    end
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = Position3dInt.New()
    o:Init(buf, n + offset)
    return o
end
function Position3dInt_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function Position3dInt_mt:X()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function Position3dInt_mt:Y()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function Position3dInt_mt:Z()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int32, o + self.view.pos)
    end
    return 0
end
function Position3dInt.Start(builder) builder:StartObject(3) end
function Position3dInt.AddX(builder, x) builder:PrependInt32Slot(0, x, 0) end
function Position3dInt.AddY(builder, y) builder:PrependInt32Slot(1, y, 0) end
function Position3dInt.AddZ(builder, z) builder:PrependInt32Slot(2, z, 0) end
function Position3dInt.End(builder) return builder:EndObject() end

return Position3dInt -- return the module