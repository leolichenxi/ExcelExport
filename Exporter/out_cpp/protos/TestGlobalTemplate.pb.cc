// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/TestGlobalTemplate.proto

#include "protos/TestGlobalTemplate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fTestGlobalTemplate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGlobalTemplate_TestObj1__protos_2fTestGlobalTemplate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fTestGlobalTemplate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGlobalTemplate_TestObjArray1__protos_2fTestGlobalTemplate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fTestGlobalTemplate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGlobalTemplate_TestObjArray__protos_2fTestGlobalTemplate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fTestGlobalTemplate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGlobalTemplate_TestObj__protos_2fTestGlobalTemplate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fPosition3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position3d_protos_2fPosition3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fPositionArray3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionArray3d_protos_2fPositionArray3d_2eproto;
namespace Config {
class TestGlobalTemplate_TestObj_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestGlobalTemplate_TestObj_> _instance;
} _TestGlobalTemplate_TestObj__default_instance_;
class TestGlobalTemplate_TestObj1_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestGlobalTemplate_TestObj1_> _instance;
} _TestGlobalTemplate_TestObj1__default_instance_;
class TestGlobalTemplate_TestObjArray_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestGlobalTemplate_TestObjArray_> _instance;
} _TestGlobalTemplate_TestObjArray__default_instance_;
class TestGlobalTemplate_TestObjArray1_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestGlobalTemplate_TestObjArray1_> _instance;
} _TestGlobalTemplate_TestObjArray1__default_instance_;
class TestGlobalTemplateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestGlobalTemplate> _instance;
} _TestGlobalTemplate_default_instance_;
}  // namespace Config
static void InitDefaultsscc_info_TestGlobalTemplate_protos_2fTestGlobalTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_TestGlobalTemplate_default_instance_;
    new (ptr) ::Config::TestGlobalTemplate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TestGlobalTemplate_protos_2fTestGlobalTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_TestGlobalTemplate_protos_2fTestGlobalTemplate_2eproto}, {
      &scc_info_TestGlobalTemplate_TestObj__protos_2fTestGlobalTemplate_2eproto.base,
      &scc_info_TestGlobalTemplate_TestObj1__protos_2fTestGlobalTemplate_2eproto.base,
      &scc_info_TestGlobalTemplate_TestObjArray__protos_2fTestGlobalTemplate_2eproto.base,
      &scc_info_TestGlobalTemplate_TestObjArray1__protos_2fTestGlobalTemplate_2eproto.base,
      &scc_info_Position3d_protos_2fPosition3d_2eproto.base,
      &scc_info_PositionArray3d_protos_2fPositionArray3d_2eproto.base,}};

static void InitDefaultsscc_info_TestGlobalTemplate_TestObj1__protos_2fTestGlobalTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_TestGlobalTemplate_TestObj1__default_instance_;
    new (ptr) ::Config::TestGlobalTemplate_TestObj1_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGlobalTemplate_TestObj1__protos_2fTestGlobalTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestGlobalTemplate_TestObj1__protos_2fTestGlobalTemplate_2eproto}, {}};

static void InitDefaultsscc_info_TestGlobalTemplate_TestObjArray1__protos_2fTestGlobalTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_TestGlobalTemplate_TestObjArray1__default_instance_;
    new (ptr) ::Config::TestGlobalTemplate_TestObjArray1_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGlobalTemplate_TestObjArray1__protos_2fTestGlobalTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestGlobalTemplate_TestObjArray1__protos_2fTestGlobalTemplate_2eproto}, {}};

static void InitDefaultsscc_info_TestGlobalTemplate_TestObjArray__protos_2fTestGlobalTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_TestGlobalTemplate_TestObjArray__default_instance_;
    new (ptr) ::Config::TestGlobalTemplate_TestObjArray_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGlobalTemplate_TestObjArray__protos_2fTestGlobalTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestGlobalTemplate_TestObjArray__protos_2fTestGlobalTemplate_2eproto}, {}};

static void InitDefaultsscc_info_TestGlobalTemplate_TestObj__protos_2fTestGlobalTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_TestGlobalTemplate_TestObj__default_instance_;
    new (ptr) ::Config::TestGlobalTemplate_TestObj_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestGlobalTemplate_TestObj__protos_2fTestGlobalTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestGlobalTemplate_TestObj__protos_2fTestGlobalTemplate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fTestGlobalTemplate_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protos_2fTestGlobalTemplate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fTestGlobalTemplate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fTestGlobalTemplate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObj_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObj_, a_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObj_, b_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObj_, c_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObj1_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObj1_, a_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObj1_, bs_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObj1_, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObjArray_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObjArray_, a_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObjArray_, b_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObjArray_, c_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObjArray1_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObjArray1_, a_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate_TestObjArray1_, bs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testint_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, teststringarrays_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, teststring1_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, teststring_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testfloat_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testdouble_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testbool_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testintarrays_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testfloatarrays_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testdoublearrays_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testboolarrays_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testobj_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testobj1_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testobjarrays_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testobjarray1s_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testdefinefromglobal_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testdefinefromglobal2s_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testcustomobj_),
  PROTOBUF_FIELD_OFFSET(::Config::TestGlobalTemplate, testcustomobjarrays_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Config::TestGlobalTemplate_TestObj_)},
  { 8, -1, sizeof(::Config::TestGlobalTemplate_TestObj1_)},
  { 16, -1, sizeof(::Config::TestGlobalTemplate_TestObjArray_)},
  { 24, -1, sizeof(::Config::TestGlobalTemplate_TestObjArray1_)},
  { 31, -1, sizeof(::Config::TestGlobalTemplate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_TestGlobalTemplate_TestObj__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_TestGlobalTemplate_TestObj1__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_TestGlobalTemplate_TestObjArray__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_TestGlobalTemplate_TestObjArray1__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_TestGlobalTemplate_default_instance_),
};

const char descriptor_table_protodef_protos_2fTestGlobalTemplate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037protos/TestGlobalTemplate.proto\022\006Confi"
  "g\032\027protos/Position3d.proto\032\034protos/Posit"
  "ionArray3d.proto\"\334\006\n\022TestGlobalTemplate\022"
  "\017\n\007TestInt\030\001 \001(\005\022\030\n\020TestStringArrays\030\002 \003"
  "(\t\022\023\n\013TestString1\030\003 \001(\001\022\022\n\nTestString\030\004 "
  "\001(\t\022\021\n\tTestFloat\030\005 \001(\002\022\022\n\nTestDouble\030\006 \001"
  "(\001\022\020\n\010TestBool\030\007 \001(\010\022\025\n\rTestIntArrays\030\010 "
  "\003(\005\022\027\n\017TestFloatArrays\030\t \003(\002\022\030\n\020TestDoub"
  "leArrays\030\n \003(\001\022\026\n\016TestBoolArrays\030\013 \003(\010\0224"
  "\n\007TestObj\030\014 \001(\0132#.Config.TestGlobalTempl"
  "ate.TestObj_\0226\n\010TestObj1\030\r \001(\0132$.Config."
  "TestGlobalTemplate.TestObj1_\022\?\n\rTestObjA"
  "rrays\030\016 \003(\0132(.Config.TestGlobalTemplate."
  "TestObjArray_\022A\n\016TestObjArray1s\030\017 \003(\0132)."
  "Config.TestGlobalTemplate.TestObjArray1_"
  "\022)\n\024TestDefineFromGlobal\030\020 \001(\0132\013.Positio"
  "n3d\022+\n\026TestDefineFromGlobal2s\030\021 \003(\0132\013.Po"
  "sition3d\022\'\n\rTestCustomObj\030\022 \001(\0132\020.Positi"
  "onArray3d\022-\n\023TestCustomObjArrays\030\023 \003(\0132\020"
  ".PositionArray3d\032+\n\010TestObj_\022\t\n\001a\030\001 \001(\005\022"
  "\t\n\001b\030\002 \001(\002\022\t\n\001c\030\003 \001(\010\032-\n\tTestObj1_\022\t\n\001a\030"
  "\001 \001(\005\022\n\n\002bs\030\002 \003(\002\022\t\n\001v\030\003 \001(\010\0320\n\rTestObjA"
  "rray_\022\t\n\001a\030\001 \001(\005\022\t\n\001b\030\002 \001(\005\022\t\n\001c\030\003 \001(\005\032\'"
  "\n\016TestObjArray1_\022\t\n\001a\030\001 \001(\005\022\n\n\002bs\030\002 \003(\002b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fTestGlobalTemplate_2eproto_deps[2] = {
  &::descriptor_table_protos_2fPosition3d_2eproto,
  &::descriptor_table_protos_2fPositionArray3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protos_2fTestGlobalTemplate_2eproto_sccs[5] = {
  &scc_info_TestGlobalTemplate_protos_2fTestGlobalTemplate_2eproto.base,
  &scc_info_TestGlobalTemplate_TestObj1__protos_2fTestGlobalTemplate_2eproto.base,
  &scc_info_TestGlobalTemplate_TestObjArray1__protos_2fTestGlobalTemplate_2eproto.base,
  &scc_info_TestGlobalTemplate_TestObjArray__protos_2fTestGlobalTemplate_2eproto.base,
  &scc_info_TestGlobalTemplate_TestObj__protos_2fTestGlobalTemplate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fTestGlobalTemplate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fTestGlobalTemplate_2eproto = {
  false, false, descriptor_table_protodef_protos_2fTestGlobalTemplate_2eproto, "protos/TestGlobalTemplate.proto", 967,
  &descriptor_table_protos_2fTestGlobalTemplate_2eproto_once, descriptor_table_protos_2fTestGlobalTemplate_2eproto_sccs, descriptor_table_protos_2fTestGlobalTemplate_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_protos_2fTestGlobalTemplate_2eproto::offsets,
  file_level_metadata_protos_2fTestGlobalTemplate_2eproto, 5, file_level_enum_descriptors_protos_2fTestGlobalTemplate_2eproto, file_level_service_descriptors_protos_2fTestGlobalTemplate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protos_2fTestGlobalTemplate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protos_2fTestGlobalTemplate_2eproto)), true);
namespace Config {

// ===================================================================

class TestGlobalTemplate_TestObj_::_Internal {
 public:
};

TestGlobalTemplate_TestObj_::TestGlobalTemplate_TestObj_(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.TestGlobalTemplate.TestObj_)
}
TestGlobalTemplate_TestObj_::TestGlobalTemplate_TestObj_(const TestGlobalTemplate_TestObj_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:Config.TestGlobalTemplate.TestObj_)
}

void TestGlobalTemplate_TestObj_::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&a_)) + sizeof(c_));
}

TestGlobalTemplate_TestObj_::~TestGlobalTemplate_TestObj_() {
  // @@protoc_insertion_point(destructor:Config.TestGlobalTemplate.TestObj_)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestGlobalTemplate_TestObj_::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestGlobalTemplate_TestObj_::ArenaDtor(void* object) {
  TestGlobalTemplate_TestObj_* _this = reinterpret_cast< TestGlobalTemplate_TestObj_* >(object);
  (void)_this;
}
void TestGlobalTemplate_TestObj_::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestGlobalTemplate_TestObj_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestGlobalTemplate_TestObj_& TestGlobalTemplate_TestObj_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestGlobalTemplate_TestObj__protos_2fTestGlobalTemplate_2eproto.base);
  return *internal_default_instance();
}


void TestGlobalTemplate_TestObj_::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.TestGlobalTemplate.TestObj_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&a_)) + sizeof(c_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestGlobalTemplate_TestObj_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestGlobalTemplate_TestObj_::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.TestGlobalTemplate.TestObj_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a = 1;
  if (this->a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // float b = 2;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_b(), target);
  }

  // bool c = 3;
  if (this->c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.TestGlobalTemplate.TestObj_)
  return target;
}

size_t TestGlobalTemplate_TestObj_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.TestGlobalTemplate.TestObj_)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  // float b = 2;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 4;
  }

  // bool c = 3;
  if (this->c() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestGlobalTemplate_TestObj_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.TestGlobalTemplate.TestObj_)
  GOOGLE_DCHECK_NE(&from, this);
  const TestGlobalTemplate_TestObj_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestGlobalTemplate_TestObj_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.TestGlobalTemplate.TestObj_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.TestGlobalTemplate.TestObj_)
    MergeFrom(*source);
  }
}

void TestGlobalTemplate_TestObj_::MergeFrom(const TestGlobalTemplate_TestObj_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.TestGlobalTemplate.TestObj_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.a() != 0) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
  if (from.c() != 0) {
    _internal_set_c(from._internal_c());
  }
}

void TestGlobalTemplate_TestObj_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.TestGlobalTemplate.TestObj_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGlobalTemplate_TestObj_::CopyFrom(const TestGlobalTemplate_TestObj_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.TestGlobalTemplate.TestObj_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGlobalTemplate_TestObj_::IsInitialized() const {
  return true;
}

void TestGlobalTemplate_TestObj_::InternalSwap(TestGlobalTemplate_TestObj_* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestGlobalTemplate_TestObj_, c_)
      + sizeof(TestGlobalTemplate_TestObj_::c_)
      - PROTOBUF_FIELD_OFFSET(TestGlobalTemplate_TestObj_, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGlobalTemplate_TestObj_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestGlobalTemplate_TestObj1_::_Internal {
 public:
};

TestGlobalTemplate_TestObj1_::TestGlobalTemplate_TestObj1_(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.TestGlobalTemplate.TestObj1_)
}
TestGlobalTemplate_TestObj1_::TestGlobalTemplate_TestObj1_(const TestGlobalTemplate_TestObj1_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bs_(from.bs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&a_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:Config.TestGlobalTemplate.TestObj1_)
}

void TestGlobalTemplate_TestObj1_::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&a_)) + sizeof(v_));
}

TestGlobalTemplate_TestObj1_::~TestGlobalTemplate_TestObj1_() {
  // @@protoc_insertion_point(destructor:Config.TestGlobalTemplate.TestObj1_)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestGlobalTemplate_TestObj1_::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestGlobalTemplate_TestObj1_::ArenaDtor(void* object) {
  TestGlobalTemplate_TestObj1_* _this = reinterpret_cast< TestGlobalTemplate_TestObj1_* >(object);
  (void)_this;
}
void TestGlobalTemplate_TestObj1_::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestGlobalTemplate_TestObj1_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestGlobalTemplate_TestObj1_& TestGlobalTemplate_TestObj1_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestGlobalTemplate_TestObj1__protos_2fTestGlobalTemplate_2eproto.base);
  return *internal_default_instance();
}


void TestGlobalTemplate_TestObj1_::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.TestGlobalTemplate.TestObj1_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bs_.Clear();
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&a_)) + sizeof(v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestGlobalTemplate_TestObj1_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float bs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_bs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestGlobalTemplate_TestObj1_::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.TestGlobalTemplate.TestObj1_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a = 1;
  if (this->a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // repeated float bs = 2;
  if (this->_internal_bs_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_bs(), target);
  }

  // bool v = 3;
  if (this->v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.TestGlobalTemplate.TestObj1_)
  return target;
}

size_t TestGlobalTemplate_TestObj1_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.TestGlobalTemplate.TestObj1_)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float bs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bs_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  // bool v = 3;
  if (this->v() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestGlobalTemplate_TestObj1_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.TestGlobalTemplate.TestObj1_)
  GOOGLE_DCHECK_NE(&from, this);
  const TestGlobalTemplate_TestObj1_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestGlobalTemplate_TestObj1_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.TestGlobalTemplate.TestObj1_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.TestGlobalTemplate.TestObj1_)
    MergeFrom(*source);
  }
}

void TestGlobalTemplate_TestObj1_::MergeFrom(const TestGlobalTemplate_TestObj1_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.TestGlobalTemplate.TestObj1_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bs_.MergeFrom(from.bs_);
  if (from.a() != 0) {
    _internal_set_a(from._internal_a());
  }
  if (from.v() != 0) {
    _internal_set_v(from._internal_v());
  }
}

void TestGlobalTemplate_TestObj1_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.TestGlobalTemplate.TestObj1_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGlobalTemplate_TestObj1_::CopyFrom(const TestGlobalTemplate_TestObj1_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.TestGlobalTemplate.TestObj1_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGlobalTemplate_TestObj1_::IsInitialized() const {
  return true;
}

void TestGlobalTemplate_TestObj1_::InternalSwap(TestGlobalTemplate_TestObj1_* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bs_.InternalSwap(&other->bs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestGlobalTemplate_TestObj1_, v_)
      + sizeof(TestGlobalTemplate_TestObj1_::v_)
      - PROTOBUF_FIELD_OFFSET(TestGlobalTemplate_TestObj1_, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGlobalTemplate_TestObj1_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestGlobalTemplate_TestObjArray_::_Internal {
 public:
};

TestGlobalTemplate_TestObjArray_::TestGlobalTemplate_TestObjArray_(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.TestGlobalTemplate.TestObjArray_)
}
TestGlobalTemplate_TestObjArray_::TestGlobalTemplate_TestObjArray_(const TestGlobalTemplate_TestObjArray_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&c_) -
    reinterpret_cast<char*>(&a_)) + sizeof(c_));
  // @@protoc_insertion_point(copy_constructor:Config.TestGlobalTemplate.TestObjArray_)
}

void TestGlobalTemplate_TestObjArray_::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&a_)) + sizeof(c_));
}

TestGlobalTemplate_TestObjArray_::~TestGlobalTemplate_TestObjArray_() {
  // @@protoc_insertion_point(destructor:Config.TestGlobalTemplate.TestObjArray_)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestGlobalTemplate_TestObjArray_::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestGlobalTemplate_TestObjArray_::ArenaDtor(void* object) {
  TestGlobalTemplate_TestObjArray_* _this = reinterpret_cast< TestGlobalTemplate_TestObjArray_* >(object);
  (void)_this;
}
void TestGlobalTemplate_TestObjArray_::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestGlobalTemplate_TestObjArray_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestGlobalTemplate_TestObjArray_& TestGlobalTemplate_TestObjArray_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestGlobalTemplate_TestObjArray__protos_2fTestGlobalTemplate_2eproto.base);
  return *internal_default_instance();
}


void TestGlobalTemplate_TestObjArray_::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.TestGlobalTemplate.TestObjArray_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&c_) -
      reinterpret_cast<char*>(&a_)) + sizeof(c_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestGlobalTemplate_TestObjArray_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestGlobalTemplate_TestObjArray_::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.TestGlobalTemplate.TestObjArray_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a = 1;
  if (this->a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // int32 b = 2;
  if (this->b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_b(), target);
  }

  // int32 c = 3;
  if (this->c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.TestGlobalTemplate.TestObjArray_)
  return target;
}

size_t TestGlobalTemplate_TestObjArray_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.TestGlobalTemplate.TestObjArray_)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  // int32 b = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  // int32 c = 3;
  if (this->c() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_c());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestGlobalTemplate_TestObjArray_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.TestGlobalTemplate.TestObjArray_)
  GOOGLE_DCHECK_NE(&from, this);
  const TestGlobalTemplate_TestObjArray_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestGlobalTemplate_TestObjArray_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.TestGlobalTemplate.TestObjArray_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.TestGlobalTemplate.TestObjArray_)
    MergeFrom(*source);
  }
}

void TestGlobalTemplate_TestObjArray_::MergeFrom(const TestGlobalTemplate_TestObjArray_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.TestGlobalTemplate.TestObjArray_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.a() != 0) {
    _internal_set_a(from._internal_a());
  }
  if (from.b() != 0) {
    _internal_set_b(from._internal_b());
  }
  if (from.c() != 0) {
    _internal_set_c(from._internal_c());
  }
}

void TestGlobalTemplate_TestObjArray_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.TestGlobalTemplate.TestObjArray_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGlobalTemplate_TestObjArray_::CopyFrom(const TestGlobalTemplate_TestObjArray_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.TestGlobalTemplate.TestObjArray_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGlobalTemplate_TestObjArray_::IsInitialized() const {
  return true;
}

void TestGlobalTemplate_TestObjArray_::InternalSwap(TestGlobalTemplate_TestObjArray_* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestGlobalTemplate_TestObjArray_, c_)
      + sizeof(TestGlobalTemplate_TestObjArray_::c_)
      - PROTOBUF_FIELD_OFFSET(TestGlobalTemplate_TestObjArray_, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGlobalTemplate_TestObjArray_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestGlobalTemplate_TestObjArray1_::_Internal {
 public:
};

TestGlobalTemplate_TestObjArray1_::TestGlobalTemplate_TestObjArray1_(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.TestGlobalTemplate.TestObjArray1_)
}
TestGlobalTemplate_TestObjArray1_::TestGlobalTemplate_TestObjArray1_(const TestGlobalTemplate_TestObjArray1_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bs_(from.bs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:Config.TestGlobalTemplate.TestObjArray1_)
}

void TestGlobalTemplate_TestObjArray1_::SharedCtor() {
  a_ = 0;
}

TestGlobalTemplate_TestObjArray1_::~TestGlobalTemplate_TestObjArray1_() {
  // @@protoc_insertion_point(destructor:Config.TestGlobalTemplate.TestObjArray1_)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestGlobalTemplate_TestObjArray1_::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestGlobalTemplate_TestObjArray1_::ArenaDtor(void* object) {
  TestGlobalTemplate_TestObjArray1_* _this = reinterpret_cast< TestGlobalTemplate_TestObjArray1_* >(object);
  (void)_this;
}
void TestGlobalTemplate_TestObjArray1_::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestGlobalTemplate_TestObjArray1_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestGlobalTemplate_TestObjArray1_& TestGlobalTemplate_TestObjArray1_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestGlobalTemplate_TestObjArray1__protos_2fTestGlobalTemplate_2eproto.base);
  return *internal_default_instance();
}


void TestGlobalTemplate_TestObjArray1_::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.TestGlobalTemplate.TestObjArray1_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bs_.Clear();
  a_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestGlobalTemplate_TestObjArray1_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float bs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_bs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestGlobalTemplate_TestObjArray1_::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.TestGlobalTemplate.TestObjArray1_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a = 1;
  if (this->a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // repeated float bs = 2;
  if (this->_internal_bs_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_bs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.TestGlobalTemplate.TestObjArray1_)
  return target;
}

size_t TestGlobalTemplate_TestObjArray1_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.TestGlobalTemplate.TestObjArray1_)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float bs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bs_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 a = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestGlobalTemplate_TestObjArray1_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.TestGlobalTemplate.TestObjArray1_)
  GOOGLE_DCHECK_NE(&from, this);
  const TestGlobalTemplate_TestObjArray1_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestGlobalTemplate_TestObjArray1_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.TestGlobalTemplate.TestObjArray1_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.TestGlobalTemplate.TestObjArray1_)
    MergeFrom(*source);
  }
}

void TestGlobalTemplate_TestObjArray1_::MergeFrom(const TestGlobalTemplate_TestObjArray1_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.TestGlobalTemplate.TestObjArray1_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bs_.MergeFrom(from.bs_);
  if (from.a() != 0) {
    _internal_set_a(from._internal_a());
  }
}

void TestGlobalTemplate_TestObjArray1_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.TestGlobalTemplate.TestObjArray1_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGlobalTemplate_TestObjArray1_::CopyFrom(const TestGlobalTemplate_TestObjArray1_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.TestGlobalTemplate.TestObjArray1_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGlobalTemplate_TestObjArray1_::IsInitialized() const {
  return true;
}

void TestGlobalTemplate_TestObjArray1_::InternalSwap(TestGlobalTemplate_TestObjArray1_* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bs_.InternalSwap(&other->bs_);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGlobalTemplate_TestObjArray1_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestGlobalTemplate::_Internal {
 public:
  static const ::Config::TestGlobalTemplate_TestObj_& testobj(const TestGlobalTemplate* msg);
  static const ::Config::TestGlobalTemplate_TestObj1_& testobj1(const TestGlobalTemplate* msg);
  static const ::Position3d& testdefinefromglobal(const TestGlobalTemplate* msg);
  static const ::PositionArray3d& testcustomobj(const TestGlobalTemplate* msg);
};

const ::Config::TestGlobalTemplate_TestObj_&
TestGlobalTemplate::_Internal::testobj(const TestGlobalTemplate* msg) {
  return *msg->testobj_;
}
const ::Config::TestGlobalTemplate_TestObj1_&
TestGlobalTemplate::_Internal::testobj1(const TestGlobalTemplate* msg) {
  return *msg->testobj1_;
}
const ::Position3d&
TestGlobalTemplate::_Internal::testdefinefromglobal(const TestGlobalTemplate* msg) {
  return *msg->testdefinefromglobal_;
}
const ::PositionArray3d&
TestGlobalTemplate::_Internal::testcustomobj(const TestGlobalTemplate* msg) {
  return *msg->testcustomobj_;
}
void TestGlobalTemplate::clear_testdefinefromglobal() {
  if (GetArena() == nullptr && testdefinefromglobal_ != nullptr) {
    delete testdefinefromglobal_;
  }
  testdefinefromglobal_ = nullptr;
}
void TestGlobalTemplate::clear_testdefinefromglobal2s() {
  testdefinefromglobal2s_.Clear();
}
void TestGlobalTemplate::clear_testcustomobj() {
  if (GetArena() == nullptr && testcustomobj_ != nullptr) {
    delete testcustomobj_;
  }
  testcustomobj_ = nullptr;
}
void TestGlobalTemplate::clear_testcustomobjarrays() {
  testcustomobjarrays_.Clear();
}
TestGlobalTemplate::TestGlobalTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teststringarrays_(arena),
  testintarrays_(arena),
  testfloatarrays_(arena),
  testdoublearrays_(arena),
  testboolarrays_(arena),
  testobjarrays_(arena),
  testobjarray1s_(arena),
  testdefinefromglobal2s_(arena),
  testcustomobjarrays_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.TestGlobalTemplate)
}
TestGlobalTemplate::TestGlobalTemplate(const TestGlobalTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      teststringarrays_(from.teststringarrays_),
      testintarrays_(from.testintarrays_),
      testfloatarrays_(from.testfloatarrays_),
      testdoublearrays_(from.testdoublearrays_),
      testboolarrays_(from.testboolarrays_),
      testobjarrays_(from.testobjarrays_),
      testobjarray1s_(from.testobjarray1s_),
      testdefinefromglobal2s_(from.testdefinefromglobal2s_),
      testcustomobjarrays_(from.testcustomobjarrays_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  teststring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_teststring().empty()) {
    teststring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_teststring(), 
      GetArena());
  }
  if (from._internal_has_testobj()) {
    testobj_ = new ::Config::TestGlobalTemplate_TestObj_(*from.testobj_);
  } else {
    testobj_ = nullptr;
  }
  if (from._internal_has_testobj1()) {
    testobj1_ = new ::Config::TestGlobalTemplate_TestObj1_(*from.testobj1_);
  } else {
    testobj1_ = nullptr;
  }
  if (from._internal_has_testdefinefromglobal()) {
    testdefinefromglobal_ = new ::Position3d(*from.testdefinefromglobal_);
  } else {
    testdefinefromglobal_ = nullptr;
  }
  if (from._internal_has_testcustomobj()) {
    testcustomobj_ = new ::PositionArray3d(*from.testcustomobj_);
  } else {
    testcustomobj_ = nullptr;
  }
  ::memcpy(&teststring1_, &from.teststring1_,
    static_cast<size_t>(reinterpret_cast<char*>(&testbool_) -
    reinterpret_cast<char*>(&teststring1_)) + sizeof(testbool_));
  // @@protoc_insertion_point(copy_constructor:Config.TestGlobalTemplate)
}

void TestGlobalTemplate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestGlobalTemplate_protos_2fTestGlobalTemplate_2eproto.base);
  teststring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&testobj_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&testbool_) -
      reinterpret_cast<char*>(&testobj_)) + sizeof(testbool_));
}

TestGlobalTemplate::~TestGlobalTemplate() {
  // @@protoc_insertion_point(destructor:Config.TestGlobalTemplate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestGlobalTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  teststring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete testobj_;
  if (this != internal_default_instance()) delete testobj1_;
  if (this != internal_default_instance()) delete testdefinefromglobal_;
  if (this != internal_default_instance()) delete testcustomobj_;
}

void TestGlobalTemplate::ArenaDtor(void* object) {
  TestGlobalTemplate* _this = reinterpret_cast< TestGlobalTemplate* >(object);
  (void)_this;
}
void TestGlobalTemplate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestGlobalTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestGlobalTemplate& TestGlobalTemplate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestGlobalTemplate_protos_2fTestGlobalTemplate_2eproto.base);
  return *internal_default_instance();
}


void TestGlobalTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.TestGlobalTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teststringarrays_.Clear();
  testintarrays_.Clear();
  testfloatarrays_.Clear();
  testdoublearrays_.Clear();
  testboolarrays_.Clear();
  testobjarrays_.Clear();
  testobjarray1s_.Clear();
  testdefinefromglobal2s_.Clear();
  testcustomobjarrays_.Clear();
  teststring_.ClearToEmpty();
  if (GetArena() == nullptr && testobj_ != nullptr) {
    delete testobj_;
  }
  testobj_ = nullptr;
  if (GetArena() == nullptr && testobj1_ != nullptr) {
    delete testobj1_;
  }
  testobj1_ = nullptr;
  if (GetArena() == nullptr && testdefinefromglobal_ != nullptr) {
    delete testdefinefromglobal_;
  }
  testdefinefromglobal_ = nullptr;
  if (GetArena() == nullptr && testcustomobj_ != nullptr) {
    delete testcustomobj_;
  }
  testcustomobj_ = nullptr;
  ::memset(&teststring1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&testbool_) -
      reinterpret_cast<char*>(&teststring1_)) + sizeof(testbool_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestGlobalTemplate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 TestInt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          testint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string TestStringArrays = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_teststringarrays();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Config.TestGlobalTemplate.TestStringArrays"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // double TestString1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          teststring1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string TestString = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_teststring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Config.TestGlobalTemplate.TestString"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float TestFloat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          testfloat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double TestDouble = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          testdouble_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool TestBool = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          testbool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 TestIntArrays = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_testintarrays(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_testintarrays(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float TestFloatArrays = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_testfloatarrays(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_testfloatarrays(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double TestDoubleArrays = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_testdoublearrays(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81) {
          _internal_add_testdoublearrays(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bool TestBoolArrays = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_testboolarrays(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_testboolarrays(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.TestGlobalTemplate.TestObj_ TestObj = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_testobj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.TestGlobalTemplate.TestObj1_ TestObj1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_testobj1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Config.TestGlobalTemplate.TestObjArray_ TestObjArrays = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_testobjarrays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Config.TestGlobalTemplate.TestObjArray1_ TestObjArray1s = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_testobjarray1s(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // .Position3d TestDefineFromGlobal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_testdefinefromglobal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Position3d TestDefineFromGlobal2s = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_testdefinefromglobal2s(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // .PositionArray3d TestCustomObj = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_testcustomobj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PositionArray3d TestCustomObjArrays = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_testcustomobjarrays(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestGlobalTemplate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.TestGlobalTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TestInt = 1;
  if (this->testint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_testint(), target);
  }

  // repeated string TestStringArrays = 2;
  for (int i = 0, n = this->_internal_teststringarrays_size(); i < n; i++) {
    const auto& s = this->_internal_teststringarrays(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Config.TestGlobalTemplate.TestStringArrays");
    target = stream->WriteString(2, s, target);
  }

  // double TestString1 = 3;
  if (!(this->teststring1() <= 0 && this->teststring1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_teststring1(), target);
  }

  // string TestString = 4;
  if (this->teststring().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teststring().data(), static_cast<int>(this->_internal_teststring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Config.TestGlobalTemplate.TestString");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_teststring(), target);
  }

  // float TestFloat = 5;
  if (!(this->testfloat() <= 0 && this->testfloat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_testfloat(), target);
  }

  // double TestDouble = 6;
  if (!(this->testdouble() <= 0 && this->testdouble() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_testdouble(), target);
  }

  // bool TestBool = 7;
  if (this->testbool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_testbool(), target);
  }

  // repeated int32 TestIntArrays = 8;
  {
    int byte_size = _testintarrays_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_testintarrays(), byte_size, target);
    }
  }

  // repeated float TestFloatArrays = 9;
  if (this->_internal_testfloatarrays_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_testfloatarrays(), target);
  }

  // repeated double TestDoubleArrays = 10;
  if (this->_internal_testdoublearrays_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_testdoublearrays(), target);
  }

  // repeated bool TestBoolArrays = 11;
  if (this->_internal_testboolarrays_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_testboolarrays(), target);
  }

  // .Config.TestGlobalTemplate.TestObj_ TestObj = 12;
  if (this->has_testobj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::testobj(this), target, stream);
  }

  // .Config.TestGlobalTemplate.TestObj1_ TestObj1 = 13;
  if (this->has_testobj1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::testobj1(this), target, stream);
  }

  // repeated .Config.TestGlobalTemplate.TestObjArray_ TestObjArrays = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_testobjarrays_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_testobjarrays(i), target, stream);
  }

  // repeated .Config.TestGlobalTemplate.TestObjArray1_ TestObjArray1s = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_testobjarray1s_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_testobjarray1s(i), target, stream);
  }

  // .Position3d TestDefineFromGlobal = 16;
  if (this->has_testdefinefromglobal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::testdefinefromglobal(this), target, stream);
  }

  // repeated .Position3d TestDefineFromGlobal2s = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_testdefinefromglobal2s_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_testdefinefromglobal2s(i), target, stream);
  }

  // .PositionArray3d TestCustomObj = 18;
  if (this->has_testcustomobj()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::testcustomobj(this), target, stream);
  }

  // repeated .PositionArray3d TestCustomObjArrays = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_testcustomobjarrays_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_testcustomobjarrays(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.TestGlobalTemplate)
  return target;
}

size_t TestGlobalTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.TestGlobalTemplate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string TestStringArrays = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(teststringarrays_.size());
  for (int i = 0, n = teststringarrays_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      teststringarrays_.Get(i));
  }

  // repeated int32 TestIntArrays = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->testintarrays_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _testintarrays_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float TestFloatArrays = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_testfloatarrays_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _testfloatarrays_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double TestDoubleArrays = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_testdoublearrays_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _testdoublearrays_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool TestBoolArrays = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_testboolarrays_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _testboolarrays_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .Config.TestGlobalTemplate.TestObjArray_ TestObjArrays = 14;
  total_size += 1UL * this->_internal_testobjarrays_size();
  for (const auto& msg : this->testobjarrays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Config.TestGlobalTemplate.TestObjArray1_ TestObjArray1s = 15;
  total_size += 1UL * this->_internal_testobjarray1s_size();
  for (const auto& msg : this->testobjarray1s_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Position3d TestDefineFromGlobal2s = 17;
  total_size += 2UL * this->_internal_testdefinefromglobal2s_size();
  for (const auto& msg : this->testdefinefromglobal2s_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PositionArray3d TestCustomObjArrays = 19;
  total_size += 2UL * this->_internal_testcustomobjarrays_size();
  for (const auto& msg : this->testcustomobjarrays_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string TestString = 4;
  if (this->teststring().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teststring());
  }

  // .Config.TestGlobalTemplate.TestObj_ TestObj = 12;
  if (this->has_testobj()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *testobj_);
  }

  // .Config.TestGlobalTemplate.TestObj1_ TestObj1 = 13;
  if (this->has_testobj1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *testobj1_);
  }

  // .Position3d TestDefineFromGlobal = 16;
  if (this->has_testdefinefromglobal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *testdefinefromglobal_);
  }

  // .PositionArray3d TestCustomObj = 18;
  if (this->has_testcustomobj()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *testcustomobj_);
  }

  // double TestString1 = 3;
  if (!(this->teststring1() <= 0 && this->teststring1() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 TestInt = 1;
  if (this->testint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_testint());
  }

  // float TestFloat = 5;
  if (!(this->testfloat() <= 0 && this->testfloat() >= 0)) {
    total_size += 1 + 4;
  }

  // double TestDouble = 6;
  if (!(this->testdouble() <= 0 && this->testdouble() >= 0)) {
    total_size += 1 + 8;
  }

  // bool TestBool = 7;
  if (this->testbool() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestGlobalTemplate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.TestGlobalTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const TestGlobalTemplate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestGlobalTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.TestGlobalTemplate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.TestGlobalTemplate)
    MergeFrom(*source);
  }
}

void TestGlobalTemplate::MergeFrom(const TestGlobalTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.TestGlobalTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teststringarrays_.MergeFrom(from.teststringarrays_);
  testintarrays_.MergeFrom(from.testintarrays_);
  testfloatarrays_.MergeFrom(from.testfloatarrays_);
  testdoublearrays_.MergeFrom(from.testdoublearrays_);
  testboolarrays_.MergeFrom(from.testboolarrays_);
  testobjarrays_.MergeFrom(from.testobjarrays_);
  testobjarray1s_.MergeFrom(from.testobjarray1s_);
  testdefinefromglobal2s_.MergeFrom(from.testdefinefromglobal2s_);
  testcustomobjarrays_.MergeFrom(from.testcustomobjarrays_);
  if (from.teststring().size() > 0) {
    _internal_set_teststring(from._internal_teststring());
  }
  if (from.has_testobj()) {
    _internal_mutable_testobj()->::Config::TestGlobalTemplate_TestObj_::MergeFrom(from._internal_testobj());
  }
  if (from.has_testobj1()) {
    _internal_mutable_testobj1()->::Config::TestGlobalTemplate_TestObj1_::MergeFrom(from._internal_testobj1());
  }
  if (from.has_testdefinefromglobal()) {
    _internal_mutable_testdefinefromglobal()->::Position3d::MergeFrom(from._internal_testdefinefromglobal());
  }
  if (from.has_testcustomobj()) {
    _internal_mutable_testcustomobj()->::PositionArray3d::MergeFrom(from._internal_testcustomobj());
  }
  if (!(from.teststring1() <= 0 && from.teststring1() >= 0)) {
    _internal_set_teststring1(from._internal_teststring1());
  }
  if (from.testint() != 0) {
    _internal_set_testint(from._internal_testint());
  }
  if (!(from.testfloat() <= 0 && from.testfloat() >= 0)) {
    _internal_set_testfloat(from._internal_testfloat());
  }
  if (!(from.testdouble() <= 0 && from.testdouble() >= 0)) {
    _internal_set_testdouble(from._internal_testdouble());
  }
  if (from.testbool() != 0) {
    _internal_set_testbool(from._internal_testbool());
  }
}

void TestGlobalTemplate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.TestGlobalTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestGlobalTemplate::CopyFrom(const TestGlobalTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.TestGlobalTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestGlobalTemplate::IsInitialized() const {
  return true;
}

void TestGlobalTemplate::InternalSwap(TestGlobalTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  teststringarrays_.InternalSwap(&other->teststringarrays_);
  testintarrays_.InternalSwap(&other->testintarrays_);
  testfloatarrays_.InternalSwap(&other->testfloatarrays_);
  testdoublearrays_.InternalSwap(&other->testdoublearrays_);
  testboolarrays_.InternalSwap(&other->testboolarrays_);
  testobjarrays_.InternalSwap(&other->testobjarrays_);
  testobjarray1s_.InternalSwap(&other->testobjarray1s_);
  testdefinefromglobal2s_.InternalSwap(&other->testdefinefromglobal2s_);
  testcustomobjarrays_.InternalSwap(&other->testcustomobjarrays_);
  teststring_.Swap(&other->teststring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestGlobalTemplate, testbool_)
      + sizeof(TestGlobalTemplate::testbool_)
      - PROTOBUF_FIELD_OFFSET(TestGlobalTemplate, testobj_)>(
          reinterpret_cast<char*>(&testobj_),
          reinterpret_cast<char*>(&other->testobj_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestGlobalTemplate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Config::TestGlobalTemplate_TestObj_* Arena::CreateMaybeMessage< ::Config::TestGlobalTemplate_TestObj_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::TestGlobalTemplate_TestObj_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Config::TestGlobalTemplate_TestObj1_* Arena::CreateMaybeMessage< ::Config::TestGlobalTemplate_TestObj1_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::TestGlobalTemplate_TestObj1_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Config::TestGlobalTemplate_TestObjArray_* Arena::CreateMaybeMessage< ::Config::TestGlobalTemplate_TestObjArray_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::TestGlobalTemplate_TestObjArray_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Config::TestGlobalTemplate_TestObjArray1_* Arena::CreateMaybeMessage< ::Config::TestGlobalTemplate_TestObjArray1_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::TestGlobalTemplate_TestObjArray1_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Config::TestGlobalTemplate* Arena::CreateMaybeMessage< ::Config::TestGlobalTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::TestGlobalTemplate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
