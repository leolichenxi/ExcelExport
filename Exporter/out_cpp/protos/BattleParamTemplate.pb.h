// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/BattleParamTemplate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fBattleParamTemplate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fBattleParamTemplate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/Position2Int.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fBattleParamTemplate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fBattleParamTemplate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fBattleParamTemplate_2eproto;
namespace Config {
class BattleParamTemplate;
class BattleParamTemplateDefaultTypeInternal;
extern BattleParamTemplateDefaultTypeInternal _BattleParamTemplate_default_instance_;
class BattleParamTemplate_Dice_;
class BattleParamTemplate_Dice_DefaultTypeInternal;
extern BattleParamTemplate_Dice_DefaultTypeInternal _BattleParamTemplate_Dice__default_instance_;
class BattleParamTemplate_Dodgeeffectlimit_;
class BattleParamTemplate_Dodgeeffectlimit_DefaultTypeInternal;
extern BattleParamTemplate_Dodgeeffectlimit_DefaultTypeInternal _BattleParamTemplate_Dodgeeffectlimit__default_instance_;
class BattleParamTemplate_Elementeffectlimit_;
class BattleParamTemplate_Elementeffectlimit_DefaultTypeInternal;
extern BattleParamTemplate_Elementeffectlimit_DefaultTypeInternal _BattleParamTemplate_Elementeffectlimit__default_instance_;
class BattleParamTemplate_Mazevaluefactor_;
class BattleParamTemplate_Mazevaluefactor_DefaultTypeInternal;
extern BattleParamTemplate_Mazevaluefactor_DefaultTypeInternal _BattleParamTemplate_Mazevaluefactor__default_instance_;
class BattleParamTemplate_Soulinterest_;
class BattleParamTemplate_Soulinterest_DefaultTypeInternal;
extern BattleParamTemplate_Soulinterest_DefaultTypeInternal _BattleParamTemplate_Soulinterest__default_instance_;
}  // namespace Config
PROTOBUF_NAMESPACE_OPEN
template<> ::Config::BattleParamTemplate* Arena::CreateMaybeMessage<::Config::BattleParamTemplate>(Arena*);
template<> ::Config::BattleParamTemplate_Dice_* Arena::CreateMaybeMessage<::Config::BattleParamTemplate_Dice_>(Arena*);
template<> ::Config::BattleParamTemplate_Dodgeeffectlimit_* Arena::CreateMaybeMessage<::Config::BattleParamTemplate_Dodgeeffectlimit_>(Arena*);
template<> ::Config::BattleParamTemplate_Elementeffectlimit_* Arena::CreateMaybeMessage<::Config::BattleParamTemplate_Elementeffectlimit_>(Arena*);
template<> ::Config::BattleParamTemplate_Mazevaluefactor_* Arena::CreateMaybeMessage<::Config::BattleParamTemplate_Mazevaluefactor_>(Arena*);
template<> ::Config::BattleParamTemplate_Soulinterest_* Arena::CreateMaybeMessage<::Config::BattleParamTemplate_Soulinterest_>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Config {

// ===================================================================

class BattleParamTemplate_Dodgeeffectlimit_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.BattleParamTemplate.Dodgeeffectlimit_) */ {
 public:
  inline BattleParamTemplate_Dodgeeffectlimit_() : BattleParamTemplate_Dodgeeffectlimit_(nullptr) {}
  virtual ~BattleParamTemplate_Dodgeeffectlimit_();

  BattleParamTemplate_Dodgeeffectlimit_(const BattleParamTemplate_Dodgeeffectlimit_& from);
  BattleParamTemplate_Dodgeeffectlimit_(BattleParamTemplate_Dodgeeffectlimit_&& from) noexcept
    : BattleParamTemplate_Dodgeeffectlimit_() {
    *this = ::std::move(from);
  }

  inline BattleParamTemplate_Dodgeeffectlimit_& operator=(const BattleParamTemplate_Dodgeeffectlimit_& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleParamTemplate_Dodgeeffectlimit_& operator=(BattleParamTemplate_Dodgeeffectlimit_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleParamTemplate_Dodgeeffectlimit_& default_instance();

  static inline const BattleParamTemplate_Dodgeeffectlimit_* internal_default_instance() {
    return reinterpret_cast<const BattleParamTemplate_Dodgeeffectlimit_*>(
               &_BattleParamTemplate_Dodgeeffectlimit__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BattleParamTemplate_Dodgeeffectlimit_& a, BattleParamTemplate_Dodgeeffectlimit_& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleParamTemplate_Dodgeeffectlimit_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleParamTemplate_Dodgeeffectlimit_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleParamTemplate_Dodgeeffectlimit_* New() const final {
    return CreateMaybeMessage<BattleParamTemplate_Dodgeeffectlimit_>(nullptr);
  }

  BattleParamTemplate_Dodgeeffectlimit_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleParamTemplate_Dodgeeffectlimit_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleParamTemplate_Dodgeeffectlimit_& from);
  void MergeFrom(const BattleParamTemplate_Dodgeeffectlimit_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleParamTemplate_Dodgeeffectlimit_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.BattleParamTemplate.Dodgeeffectlimit_";
  }
  protected:
  explicit BattleParamTemplate_Dodgeeffectlimit_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fBattleParamTemplate_2eproto);
    return ::descriptor_table_protos_2fBattleParamTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxFieldNumber = 1,
    kMinFieldNumber = 2,
  };
  // int32 Max = 1;
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Min = 2;
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::int32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate.Dodgeeffectlimit_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fBattleParamTemplate_2eproto;
};
// -------------------------------------------------------------------

class BattleParamTemplate_Elementeffectlimit_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.BattleParamTemplate.Elementeffectlimit_) */ {
 public:
  inline BattleParamTemplate_Elementeffectlimit_() : BattleParamTemplate_Elementeffectlimit_(nullptr) {}
  virtual ~BattleParamTemplate_Elementeffectlimit_();

  BattleParamTemplate_Elementeffectlimit_(const BattleParamTemplate_Elementeffectlimit_& from);
  BattleParamTemplate_Elementeffectlimit_(BattleParamTemplate_Elementeffectlimit_&& from) noexcept
    : BattleParamTemplate_Elementeffectlimit_() {
    *this = ::std::move(from);
  }

  inline BattleParamTemplate_Elementeffectlimit_& operator=(const BattleParamTemplate_Elementeffectlimit_& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleParamTemplate_Elementeffectlimit_& operator=(BattleParamTemplate_Elementeffectlimit_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleParamTemplate_Elementeffectlimit_& default_instance();

  static inline const BattleParamTemplate_Elementeffectlimit_* internal_default_instance() {
    return reinterpret_cast<const BattleParamTemplate_Elementeffectlimit_*>(
               &_BattleParamTemplate_Elementeffectlimit__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BattleParamTemplate_Elementeffectlimit_& a, BattleParamTemplate_Elementeffectlimit_& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleParamTemplate_Elementeffectlimit_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleParamTemplate_Elementeffectlimit_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleParamTemplate_Elementeffectlimit_* New() const final {
    return CreateMaybeMessage<BattleParamTemplate_Elementeffectlimit_>(nullptr);
  }

  BattleParamTemplate_Elementeffectlimit_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleParamTemplate_Elementeffectlimit_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleParamTemplate_Elementeffectlimit_& from);
  void MergeFrom(const BattleParamTemplate_Elementeffectlimit_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleParamTemplate_Elementeffectlimit_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.BattleParamTemplate.Elementeffectlimit_";
  }
  protected:
  explicit BattleParamTemplate_Elementeffectlimit_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fBattleParamTemplate_2eproto);
    return ::descriptor_table_protos_2fBattleParamTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxFieldNumber = 1,
    kMinFieldNumber = 2,
  };
  // double Max = 1;
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // double Min = 2;
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate.Elementeffectlimit_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double max_;
  double min_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fBattleParamTemplate_2eproto;
};
// -------------------------------------------------------------------

class BattleParamTemplate_Soulinterest_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.BattleParamTemplate.Soulinterest_) */ {
 public:
  inline BattleParamTemplate_Soulinterest_() : BattleParamTemplate_Soulinterest_(nullptr) {}
  virtual ~BattleParamTemplate_Soulinterest_();

  BattleParamTemplate_Soulinterest_(const BattleParamTemplate_Soulinterest_& from);
  BattleParamTemplate_Soulinterest_(BattleParamTemplate_Soulinterest_&& from) noexcept
    : BattleParamTemplate_Soulinterest_() {
    *this = ::std::move(from);
  }

  inline BattleParamTemplate_Soulinterest_& operator=(const BattleParamTemplate_Soulinterest_& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleParamTemplate_Soulinterest_& operator=(BattleParamTemplate_Soulinterest_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleParamTemplate_Soulinterest_& default_instance();

  static inline const BattleParamTemplate_Soulinterest_* internal_default_instance() {
    return reinterpret_cast<const BattleParamTemplate_Soulinterest_*>(
               &_BattleParamTemplate_Soulinterest__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BattleParamTemplate_Soulinterest_& a, BattleParamTemplate_Soulinterest_& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleParamTemplate_Soulinterest_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleParamTemplate_Soulinterest_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleParamTemplate_Soulinterest_* New() const final {
    return CreateMaybeMessage<BattleParamTemplate_Soulinterest_>(nullptr);
  }

  BattleParamTemplate_Soulinterest_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleParamTemplate_Soulinterest_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleParamTemplate_Soulinterest_& from);
  void MergeFrom(const BattleParamTemplate_Soulinterest_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleParamTemplate_Soulinterest_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.BattleParamTemplate.Soulinterest_";
  }
  protected:
  explicit BattleParamTemplate_Soulinterest_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fBattleParamTemplate_2eproto);
    return ::descriptor_table_protos_2fBattleParamTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFactorFieldNumber = 1,
    kMaxCountFieldNumber = 2,
  };
  // int32 Factor = 1;
  void clear_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 factor() const;
  void set_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_factor() const;
  void _internal_set_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MaxCount = 2;
  void clear_maxcount();
  ::PROTOBUF_NAMESPACE_ID::int32 maxcount() const;
  void set_maxcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxcount() const;
  void _internal_set_maxcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate.Soulinterest_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fBattleParamTemplate_2eproto;
};
// -------------------------------------------------------------------

class BattleParamTemplate_Dice_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.BattleParamTemplate.Dice_) */ {
 public:
  inline BattleParamTemplate_Dice_() : BattleParamTemplate_Dice_(nullptr) {}
  virtual ~BattleParamTemplate_Dice_();

  BattleParamTemplate_Dice_(const BattleParamTemplate_Dice_& from);
  BattleParamTemplate_Dice_(BattleParamTemplate_Dice_&& from) noexcept
    : BattleParamTemplate_Dice_() {
    *this = ::std::move(from);
  }

  inline BattleParamTemplate_Dice_& operator=(const BattleParamTemplate_Dice_& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleParamTemplate_Dice_& operator=(BattleParamTemplate_Dice_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleParamTemplate_Dice_& default_instance();

  static inline const BattleParamTemplate_Dice_* internal_default_instance() {
    return reinterpret_cast<const BattleParamTemplate_Dice_*>(
               &_BattleParamTemplate_Dice__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BattleParamTemplate_Dice_& a, BattleParamTemplate_Dice_& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleParamTemplate_Dice_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleParamTemplate_Dice_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleParamTemplate_Dice_* New() const final {
    return CreateMaybeMessage<BattleParamTemplate_Dice_>(nullptr);
  }

  BattleParamTemplate_Dice_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleParamTemplate_Dice_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleParamTemplate_Dice_& from);
  void MergeFrom(const BattleParamTemplate_Dice_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleParamTemplate_Dice_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.BattleParamTemplate.Dice_";
  }
  protected:
  explicit BattleParamTemplate_Dice_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fBattleParamTemplate_2eproto);
    return ::descriptor_table_protos_2fBattleParamTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiceCountFieldNumber = 1,
    kDiceValueFieldNumber = 2,
  };
  // int32 DiceCount = 1;
  void clear_dicecount();
  ::PROTOBUF_NAMESPACE_ID::int32 dicecount() const;
  void set_dicecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dicecount() const;
  void _internal_set_dicecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 DiceValue = 2;
  void clear_dicevalue();
  ::PROTOBUF_NAMESPACE_ID::int32 dicevalue() const;
  void set_dicevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dicevalue() const;
  void _internal_set_dicevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate.Dice_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 dicecount_;
  ::PROTOBUF_NAMESPACE_ID::int32 dicevalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fBattleParamTemplate_2eproto;
};
// -------------------------------------------------------------------

class BattleParamTemplate_Mazevaluefactor_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.BattleParamTemplate.Mazevaluefactor_) */ {
 public:
  inline BattleParamTemplate_Mazevaluefactor_() : BattleParamTemplate_Mazevaluefactor_(nullptr) {}
  virtual ~BattleParamTemplate_Mazevaluefactor_();

  BattleParamTemplate_Mazevaluefactor_(const BattleParamTemplate_Mazevaluefactor_& from);
  BattleParamTemplate_Mazevaluefactor_(BattleParamTemplate_Mazevaluefactor_&& from) noexcept
    : BattleParamTemplate_Mazevaluefactor_() {
    *this = ::std::move(from);
  }

  inline BattleParamTemplate_Mazevaluefactor_& operator=(const BattleParamTemplate_Mazevaluefactor_& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleParamTemplate_Mazevaluefactor_& operator=(BattleParamTemplate_Mazevaluefactor_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleParamTemplate_Mazevaluefactor_& default_instance();

  static inline const BattleParamTemplate_Mazevaluefactor_* internal_default_instance() {
    return reinterpret_cast<const BattleParamTemplate_Mazevaluefactor_*>(
               &_BattleParamTemplate_Mazevaluefactor__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BattleParamTemplate_Mazevaluefactor_& a, BattleParamTemplate_Mazevaluefactor_& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleParamTemplate_Mazevaluefactor_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleParamTemplate_Mazevaluefactor_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleParamTemplate_Mazevaluefactor_* New() const final {
    return CreateMaybeMessage<BattleParamTemplate_Mazevaluefactor_>(nullptr);
  }

  BattleParamTemplate_Mazevaluefactor_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleParamTemplate_Mazevaluefactor_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleParamTemplate_Mazevaluefactor_& from);
  void MergeFrom(const BattleParamTemplate_Mazevaluefactor_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleParamTemplate_Mazevaluefactor_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.BattleParamTemplate.Mazevaluefactor_";
  }
  protected:
  explicit BattleParamTemplate_Mazevaluefactor_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fBattleParamTemplate_2eproto);
    return ::descriptor_table_protos_2fBattleParamTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtkRateFieldNumber = 1,
    kFactorFieldNumber = 2,
  };
  // double AtkRate = 1;
  void clear_atkrate();
  double atkrate() const;
  void set_atkrate(double value);
  private:
  double _internal_atkrate() const;
  void _internal_set_atkrate(double value);
  public:

  // int32 Factor = 2;
  void clear_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 factor() const;
  void set_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_factor() const;
  void _internal_set_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate.Mazevaluefactor_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double atkrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fBattleParamTemplate_2eproto;
};
// -------------------------------------------------------------------

class BattleParamTemplate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.BattleParamTemplate) */ {
 public:
  inline BattleParamTemplate() : BattleParamTemplate(nullptr) {}
  virtual ~BattleParamTemplate();

  BattleParamTemplate(const BattleParamTemplate& from);
  BattleParamTemplate(BattleParamTemplate&& from) noexcept
    : BattleParamTemplate() {
    *this = ::std::move(from);
  }

  inline BattleParamTemplate& operator=(const BattleParamTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleParamTemplate& operator=(BattleParamTemplate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleParamTemplate& default_instance();

  static inline const BattleParamTemplate* internal_default_instance() {
    return reinterpret_cast<const BattleParamTemplate*>(
               &_BattleParamTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BattleParamTemplate& a, BattleParamTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleParamTemplate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleParamTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleParamTemplate* New() const final {
    return CreateMaybeMessage<BattleParamTemplate>(nullptr);
  }

  BattleParamTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleParamTemplate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleParamTemplate& from);
  void MergeFrom(const BattleParamTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleParamTemplate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.BattleParamTemplate";
  }
  protected:
  explicit BattleParamTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fBattleParamTemplate_2eproto);
    return ::descriptor_table_protos_2fBattleParamTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BattleParamTemplate_Dodgeeffectlimit_ Dodgeeffectlimit_;
  typedef BattleParamTemplate_Elementeffectlimit_ Elementeffectlimit_;
  typedef BattleParamTemplate_Soulinterest_ Soulinterest_;
  typedef BattleParamTemplate_Dice_ Dice_;
  typedef BattleParamTemplate_Mazevaluefactor_ Mazevaluefactor_;

  // accessors -------------------------------------------------------

  enum : int {
    kBattleMapSizesFieldNumber = 2,
    kRuneRefreshPricesFieldNumber = 38,
    kPvpSceneBuffsFieldNumber = 46,
    kForgetCostsFieldNumber = 57,
    kPrayCostsFieldNumber = 58,
    kBattleSpeedUpRatesFieldNumber = 77,
    kDodgeEffectLimitFieldNumber = 3,
    kCritEffectLimitFieldNumber = 4,
    kCritDamEffectLimitFieldNumber = 5,
    kDefenseRateEffectLimitFieldNumber = 6,
    kCoolDownLimitFieldNumber = 8,
    kElementEffectLimitFieldNumber = 9,
    kDamageCorrectionRangeFieldNumber = 13,
    kBlockEffectLimitFieldNumber = 17,
    kBattleMapGridFieldNumber = 25,
    kSoulInterestFieldNumber = 51,
    kDiceFieldNumber = 80,
    kMazeValueFactorFieldNumber = 82,
    kBattleStartWaitTimeFieldNumber = 1,
    kDamageReduceLimitFieldNumber = 7,
    kElementAttackBaseFieldNumber = 10,
    kElementDefenseBaseFieldNumber = 11,
    kDodgeCorrectionFieldNumber = 14,
    kElementEffectBaseFieldNumber = 12,
    kBlckEffectFieldNumber = 16,
    kCritCorrectionFieldNumber = 15,
    kHeroMaxEnergyValueFieldNumber = 18,
    kHeroMaxEnergyNumFieldNumber = 19,
    kMaxAttackSpeedFieldNumber = 21,
    kLordMaxEnergyFieldNumber = 20,
    kHeroSkillCountFieldNumber = 22,
    kMonsterWalkModeTimeFieldNumber = 23,
    kMonsterDropModeTimeFieldNumber = 24,
    kGridSizeFieldNumber = 26,
    kLordGridFieldNumber = 27,
    kSkillMoveTimeFieldNumber = 28,
    kSkillFlashTimeFieldNumber = 29,
    kMonsterDropRangeFieldNumber = 30,
    kOffsetDistanceFieldNumber = 31,
    kDropItemStayTimeFieldNumber = 32,
    kBannerStayMaxtimeFieldNumber = 33,
    kLordMoveSpeedFieldNumber = 34,
    kDropItemRangeFieldNumber = 35,
    kMaxRoomFieldNumber = 36,
    kLordHealthFactorFieldNumber = 37,
    kHeroMaxRuneCountFieldNumber = 39,
    kMaxSoulStampDemandFieldNumber = 40,
    kSoulStampDemandFactorFieldNumber = 41,
    kBagCapacityFieldNumber = 42,
    kResolveFactorFieldNumber = 43,
    kSkillFadeOutTimeFieldNumber = 44,
    kPvpEnemyLordGridFieldNumber = 45,
    kPvpFirstHandWaitingFieldNumber = 47,
    kPvpSecondHandWaitingFieldNumber = 48,
    kPvpStartCountDownFieldNumber = 49,
    kPvpOverCountDownFieldNumber = 50,
    kBattleHeroDieValueFieldNumber = 52,
    kBattleMaxTimeValueFieldNumber = 53,
    kBattleJumpTimeFieldNumber = 54,
    kProfessionUpgradeCountFieldNumber = 55,
    kHandCardLimitFieldNumber = 56,
    kCardLevelUpNeedNumFieldNumber = 59,
    kCardUseToDrawUniqueFieldNumber = 60,
    kOriginalHandCardLimitFieldNumber = 61,
    kUniqueSkillCardLimitCountOTFieldNumber = 62,
    kDropCoefficientInEliteRoomFieldNumber = 63,
    kDropCoefficientInBossRoomFieldNumber = 64,
    kHeroRebornTimeFieldNumber = 65,
    kHeroRebornHpCostFactorFieldNumber = 66,
    kOriginalHandCardNumFieldNumber = 67,
    kChallengeFirstHandChanceFieldNumber = 68,
    kPvpChallengeTimeFieldNumber = 69,
    kFirstHandEnergyCardCountFieldNumber = 70,
    kSecondtHandEnergyCardCountFieldNumber = 71,
    kPvpFirstHandTimeFieldNumber = 72,
    kPvpSecondHandTimeFieldNumber = 73,
    kLordCardSpacingFieldNumber = 74,
    kEnergyCardCheckUpFieldNumber = 75,
    kPvpOriginalHandCardNumFieldNumber = 76,
    kHangUpIntervalTimeFieldNumber = 78,
    kNextWaveAppearIntervalFieldNumber = 79,
    kRemainsCompoundOriginalCountFieldNumber = 81,
    kBattleDashTimeFieldNumber = 83,
    kBattleDashBackTimeFieldNumber = 84,
    kBattleRoundSafeTimeFieldNumber = 85,
    kBattleWaitNextTimeFieldNumber = 86,
    kBattleRoundTimeFieldNumber = 87,
    kBattleHitFlyForceFieldNumber = 88,
    kBattleHitDownForceFieldNumber = 89,
    kBattleHitFlyMaxHeightFieldNumber = 90,
    kBattleGravityFieldNumber = 91,
    kBattleFlyUpGravityFieldNumber = 92,
    kBattleNearTopGravityFieldNumber = 93,
    kBattleNearTopSpeedFieldNumber = 94,
  };
  // repeated int32 BattleMapSizes = 2;
  int battlemapsizes_size() const;
  private:
  int _internal_battlemapsizes_size() const;
  public:
  void clear_battlemapsizes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battlemapsizes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_battlemapsizes() const;
  void _internal_add_battlemapsizes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_battlemapsizes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 battlemapsizes(int index) const;
  void set_battlemapsizes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_battlemapsizes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      battlemapsizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_battlemapsizes();

  // repeated int32 RuneRefreshPrices = 38;
  int runerefreshprices_size() const;
  private:
  int _internal_runerefreshprices_size() const;
  public:
  void clear_runerefreshprices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_runerefreshprices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_runerefreshprices() const;
  void _internal_add_runerefreshprices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_runerefreshprices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 runerefreshprices(int index) const;
  void set_runerefreshprices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_runerefreshprices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      runerefreshprices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_runerefreshprices();

  // repeated int32 PvpSceneBuffs = 46;
  int pvpscenebuffs_size() const;
  private:
  int _internal_pvpscenebuffs_size() const;
  public:
  void clear_pvpscenebuffs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pvpscenebuffs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_pvpscenebuffs() const;
  void _internal_add_pvpscenebuffs(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_pvpscenebuffs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 pvpscenebuffs(int index) const;
  void set_pvpscenebuffs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_pvpscenebuffs(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      pvpscenebuffs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_pvpscenebuffs();

  // repeated int32 ForgetCosts = 57;
  int forgetcosts_size() const;
  private:
  int _internal_forgetcosts_size() const;
  public:
  void clear_forgetcosts();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_forgetcosts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_forgetcosts() const;
  void _internal_add_forgetcosts(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_forgetcosts();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 forgetcosts(int index) const;
  void set_forgetcosts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_forgetcosts(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      forgetcosts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_forgetcosts();

  // repeated int32 PrayCosts = 58;
  int praycosts_size() const;
  private:
  int _internal_praycosts_size() const;
  public:
  void clear_praycosts();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_praycosts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_praycosts() const;
  void _internal_add_praycosts(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_praycosts();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 praycosts(int index) const;
  void set_praycosts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_praycosts(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      praycosts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_praycosts();

  // repeated double BattleSpeedUpRates = 77;
  int battlespeeduprates_size() const;
  private:
  int _internal_battlespeeduprates_size() const;
  public:
  void clear_battlespeeduprates();
  private:
  double _internal_battlespeeduprates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_battlespeeduprates() const;
  void _internal_add_battlespeeduprates(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_battlespeeduprates();
  public:
  double battlespeeduprates(int index) const;
  void set_battlespeeduprates(int index, double value);
  void add_battlespeeduprates(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      battlespeeduprates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_battlespeeduprates();

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;
  bool has_dodgeeffectlimit() const;
  private:
  bool _internal_has_dodgeeffectlimit() const;
  public:
  void clear_dodgeeffectlimit();
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& dodgeeffectlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* release_dodgeeffectlimit();
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* mutable_dodgeeffectlimit();
  void set_allocated_dodgeeffectlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* dodgeeffectlimit);
  private:
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& _internal_dodgeeffectlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* _internal_mutable_dodgeeffectlimit();
  public:
  void unsafe_arena_set_allocated_dodgeeffectlimit(
      ::Config::BattleParamTemplate_Dodgeeffectlimit_* dodgeeffectlimit);
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* unsafe_arena_release_dodgeeffectlimit();

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;
  bool has_criteffectlimit() const;
  private:
  bool _internal_has_criteffectlimit() const;
  public:
  void clear_criteffectlimit();
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& criteffectlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* release_criteffectlimit();
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* mutable_criteffectlimit();
  void set_allocated_criteffectlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* criteffectlimit);
  private:
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& _internal_criteffectlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* _internal_mutable_criteffectlimit();
  public:
  void unsafe_arena_set_allocated_criteffectlimit(
      ::Config::BattleParamTemplate_Dodgeeffectlimit_* criteffectlimit);
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* unsafe_arena_release_criteffectlimit();

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;
  bool has_critdameffectlimit() const;
  private:
  bool _internal_has_critdameffectlimit() const;
  public:
  void clear_critdameffectlimit();
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& critdameffectlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* release_critdameffectlimit();
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* mutable_critdameffectlimit();
  void set_allocated_critdameffectlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* critdameffectlimit);
  private:
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& _internal_critdameffectlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* _internal_mutable_critdameffectlimit();
  public:
  void unsafe_arena_set_allocated_critdameffectlimit(
      ::Config::BattleParamTemplate_Dodgeeffectlimit_* critdameffectlimit);
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* unsafe_arena_release_critdameffectlimit();

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;
  bool has_defenserateeffectlimit() const;
  private:
  bool _internal_has_defenserateeffectlimit() const;
  public:
  void clear_defenserateeffectlimit();
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& defenserateeffectlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* release_defenserateeffectlimit();
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* mutable_defenserateeffectlimit();
  void set_allocated_defenserateeffectlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* defenserateeffectlimit);
  private:
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& _internal_defenserateeffectlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* _internal_mutable_defenserateeffectlimit();
  public:
  void unsafe_arena_set_allocated_defenserateeffectlimit(
      ::Config::BattleParamTemplate_Dodgeeffectlimit_* defenserateeffectlimit);
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* unsafe_arena_release_defenserateeffectlimit();

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;
  bool has_cooldownlimit() const;
  private:
  bool _internal_has_cooldownlimit() const;
  public:
  void clear_cooldownlimit();
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& cooldownlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* release_cooldownlimit();
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* mutable_cooldownlimit();
  void set_allocated_cooldownlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* cooldownlimit);
  private:
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& _internal_cooldownlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* _internal_mutable_cooldownlimit();
  public:
  void unsafe_arena_set_allocated_cooldownlimit(
      ::Config::BattleParamTemplate_Dodgeeffectlimit_* cooldownlimit);
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* unsafe_arena_release_cooldownlimit();

  // .Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;
  bool has_elementeffectlimit() const;
  private:
  bool _internal_has_elementeffectlimit() const;
  public:
  void clear_elementeffectlimit();
  const ::Config::BattleParamTemplate_Elementeffectlimit_& elementeffectlimit() const;
  ::Config::BattleParamTemplate_Elementeffectlimit_* release_elementeffectlimit();
  ::Config::BattleParamTemplate_Elementeffectlimit_* mutable_elementeffectlimit();
  void set_allocated_elementeffectlimit(::Config::BattleParamTemplate_Elementeffectlimit_* elementeffectlimit);
  private:
  const ::Config::BattleParamTemplate_Elementeffectlimit_& _internal_elementeffectlimit() const;
  ::Config::BattleParamTemplate_Elementeffectlimit_* _internal_mutable_elementeffectlimit();
  public:
  void unsafe_arena_set_allocated_elementeffectlimit(
      ::Config::BattleParamTemplate_Elementeffectlimit_* elementeffectlimit);
  ::Config::BattleParamTemplate_Elementeffectlimit_* unsafe_arena_release_elementeffectlimit();

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;
  bool has_damagecorrectionrange() const;
  private:
  bool _internal_has_damagecorrectionrange() const;
  public:
  void clear_damagecorrectionrange();
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& damagecorrectionrange() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* release_damagecorrectionrange();
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* mutable_damagecorrectionrange();
  void set_allocated_damagecorrectionrange(::Config::BattleParamTemplate_Dodgeeffectlimit_* damagecorrectionrange);
  private:
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& _internal_damagecorrectionrange() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* _internal_mutable_damagecorrectionrange();
  public:
  void unsafe_arena_set_allocated_damagecorrectionrange(
      ::Config::BattleParamTemplate_Dodgeeffectlimit_* damagecorrectionrange);
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* unsafe_arena_release_damagecorrectionrange();

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;
  bool has_blockeffectlimit() const;
  private:
  bool _internal_has_blockeffectlimit() const;
  public:
  void clear_blockeffectlimit();
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& blockeffectlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* release_blockeffectlimit();
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* mutable_blockeffectlimit();
  void set_allocated_blockeffectlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* blockeffectlimit);
  private:
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_& _internal_blockeffectlimit() const;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* _internal_mutable_blockeffectlimit();
  public:
  void unsafe_arena_set_allocated_blockeffectlimit(
      ::Config::BattleParamTemplate_Dodgeeffectlimit_* blockeffectlimit);
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* unsafe_arena_release_blockeffectlimit();

  // .Position2Int BattleMapGrid = 25;
  bool has_battlemapgrid() const;
  private:
  bool _internal_has_battlemapgrid() const;
  public:
  void clear_battlemapgrid();
  const ::Position2Int& battlemapgrid() const;
  ::Position2Int* release_battlemapgrid();
  ::Position2Int* mutable_battlemapgrid();
  void set_allocated_battlemapgrid(::Position2Int* battlemapgrid);
  private:
  const ::Position2Int& _internal_battlemapgrid() const;
  ::Position2Int* _internal_mutable_battlemapgrid();
  public:
  void unsafe_arena_set_allocated_battlemapgrid(
      ::Position2Int* battlemapgrid);
  ::Position2Int* unsafe_arena_release_battlemapgrid();

  // .Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;
  bool has_soulinterest() const;
  private:
  bool _internal_has_soulinterest() const;
  public:
  void clear_soulinterest();
  const ::Config::BattleParamTemplate_Soulinterest_& soulinterest() const;
  ::Config::BattleParamTemplate_Soulinterest_* release_soulinterest();
  ::Config::BattleParamTemplate_Soulinterest_* mutable_soulinterest();
  void set_allocated_soulinterest(::Config::BattleParamTemplate_Soulinterest_* soulinterest);
  private:
  const ::Config::BattleParamTemplate_Soulinterest_& _internal_soulinterest() const;
  ::Config::BattleParamTemplate_Soulinterest_* _internal_mutable_soulinterest();
  public:
  void unsafe_arena_set_allocated_soulinterest(
      ::Config::BattleParamTemplate_Soulinterest_* soulinterest);
  ::Config::BattleParamTemplate_Soulinterest_* unsafe_arena_release_soulinterest();

  // .Config.BattleParamTemplate.Dice_ Dice = 80;
  bool has_dice() const;
  private:
  bool _internal_has_dice() const;
  public:
  void clear_dice();
  const ::Config::BattleParamTemplate_Dice_& dice() const;
  ::Config::BattleParamTemplate_Dice_* release_dice();
  ::Config::BattleParamTemplate_Dice_* mutable_dice();
  void set_allocated_dice(::Config::BattleParamTemplate_Dice_* dice);
  private:
  const ::Config::BattleParamTemplate_Dice_& _internal_dice() const;
  ::Config::BattleParamTemplate_Dice_* _internal_mutable_dice();
  public:
  void unsafe_arena_set_allocated_dice(
      ::Config::BattleParamTemplate_Dice_* dice);
  ::Config::BattleParamTemplate_Dice_* unsafe_arena_release_dice();

  // .Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;
  bool has_mazevaluefactor() const;
  private:
  bool _internal_has_mazevaluefactor() const;
  public:
  void clear_mazevaluefactor();
  const ::Config::BattleParamTemplate_Mazevaluefactor_& mazevaluefactor() const;
  ::Config::BattleParamTemplate_Mazevaluefactor_* release_mazevaluefactor();
  ::Config::BattleParamTemplate_Mazevaluefactor_* mutable_mazevaluefactor();
  void set_allocated_mazevaluefactor(::Config::BattleParamTemplate_Mazevaluefactor_* mazevaluefactor);
  private:
  const ::Config::BattleParamTemplate_Mazevaluefactor_& _internal_mazevaluefactor() const;
  ::Config::BattleParamTemplate_Mazevaluefactor_* _internal_mutable_mazevaluefactor();
  public:
  void unsafe_arena_set_allocated_mazevaluefactor(
      ::Config::BattleParamTemplate_Mazevaluefactor_* mazevaluefactor);
  ::Config::BattleParamTemplate_Mazevaluefactor_* unsafe_arena_release_mazevaluefactor();

  // int32 BattleStartWaitTime = 1;
  void clear_battlestartwaittime();
  ::PROTOBUF_NAMESPACE_ID::int32 battlestartwaittime() const;
  void set_battlestartwaittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battlestartwaittime() const;
  void _internal_set_battlestartwaittime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 DamageReduceLimit = 7;
  void clear_damagereducelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 damagereducelimit() const;
  void set_damagereducelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_damagereducelimit() const;
  void _internal_set_damagereducelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double ElementAttackBase = 10;
  void clear_elementattackbase();
  double elementattackbase() const;
  void set_elementattackbase(double value);
  private:
  double _internal_elementattackbase() const;
  void _internal_set_elementattackbase(double value);
  public:

  // double ElementDefenseBase = 11;
  void clear_elementdefensebase();
  double elementdefensebase() const;
  void set_elementdefensebase(double value);
  private:
  double _internal_elementdefensebase() const;
  void _internal_set_elementdefensebase(double value);
  public:

  // double DodgeCorrection = 14;
  void clear_dodgecorrection();
  double dodgecorrection() const;
  void set_dodgecorrection(double value);
  private:
  double _internal_dodgecorrection() const;
  void _internal_set_dodgecorrection(double value);
  public:

  // int32 ElementEffectBase = 12;
  void clear_elementeffectbase();
  ::PROTOBUF_NAMESPACE_ID::int32 elementeffectbase() const;
  void set_elementeffectbase(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_elementeffectbase() const;
  void _internal_set_elementeffectbase(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BlckEffect = 16;
  void clear_blckeffect();
  ::PROTOBUF_NAMESPACE_ID::int32 blckeffect() const;
  void set_blckeffect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blckeffect() const;
  void _internal_set_blckeffect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double CritCorrection = 15;
  void clear_critcorrection();
  double critcorrection() const;
  void set_critcorrection(double value);
  private:
  double _internal_critcorrection() const;
  void _internal_set_critcorrection(double value);
  public:

  // int32 HeroMaxEnergyValue = 18;
  void clear_heromaxenergyvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 heromaxenergyvalue() const;
  void set_heromaxenergyvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heromaxenergyvalue() const;
  void _internal_set_heromaxenergyvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HeroMaxEnergyNum = 19;
  void clear_heromaxenergynum();
  ::PROTOBUF_NAMESPACE_ID::int32 heromaxenergynum() const;
  void set_heromaxenergynum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heromaxenergynum() const;
  void _internal_set_heromaxenergynum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double MaxAttackSpeed = 21;
  void clear_maxattackspeed();
  double maxattackspeed() const;
  void set_maxattackspeed(double value);
  private:
  double _internal_maxattackspeed() const;
  void _internal_set_maxattackspeed(double value);
  public:

  // int32 LordMaxEnergy = 20;
  void clear_lordmaxenergy();
  ::PROTOBUF_NAMESPACE_ID::int32 lordmaxenergy() const;
  void set_lordmaxenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lordmaxenergy() const;
  void _internal_set_lordmaxenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HeroSkillCount = 22;
  void clear_heroskillcount();
  ::PROTOBUF_NAMESPACE_ID::int32 heroskillcount() const;
  void set_heroskillcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heroskillcount() const;
  void _internal_set_heroskillcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MonsterWalkModeTime = 23;
  void clear_monsterwalkmodetime();
  ::PROTOBUF_NAMESPACE_ID::int32 monsterwalkmodetime() const;
  void set_monsterwalkmodetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterwalkmodetime() const;
  void _internal_set_monsterwalkmodetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MonsterDropModeTime = 24;
  void clear_monsterdropmodetime();
  ::PROTOBUF_NAMESPACE_ID::int32 monsterdropmodetime() const;
  void set_monsterdropmodetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterdropmodetime() const;
  void _internal_set_monsterdropmodetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 GridSize = 26;
  void clear_gridsize();
  ::PROTOBUF_NAMESPACE_ID::int32 gridsize() const;
  void set_gridsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gridsize() const;
  void _internal_set_gridsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LordGrid = 27;
  void clear_lordgrid();
  ::PROTOBUF_NAMESPACE_ID::int32 lordgrid() const;
  void set_lordgrid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lordgrid() const;
  void _internal_set_lordgrid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SkillMoveTime = 28;
  void clear_skillmovetime();
  ::PROTOBUF_NAMESPACE_ID::int32 skillmovetime() const;
  void set_skillmovetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_skillmovetime() const;
  void _internal_set_skillmovetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SkillFlashTime = 29;
  void clear_skillflashtime();
  ::PROTOBUF_NAMESPACE_ID::int32 skillflashtime() const;
  void set_skillflashtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_skillflashtime() const;
  void _internal_set_skillflashtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MonsterDropRange = 30;
  void clear_monsterdroprange();
  ::PROTOBUF_NAMESPACE_ID::int32 monsterdroprange() const;
  void set_monsterdroprange(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monsterdroprange() const;
  void _internal_set_monsterdroprange(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 OffsetDistance = 31;
  void clear_offsetdistance();
  ::PROTOBUF_NAMESPACE_ID::int32 offsetdistance() const;
  void set_offsetdistance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offsetdistance() const;
  void _internal_set_offsetdistance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 DropItemStayTime = 32;
  void clear_dropitemstaytime();
  ::PROTOBUF_NAMESPACE_ID::int32 dropitemstaytime() const;
  void set_dropitemstaytime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropitemstaytime() const;
  void _internal_set_dropitemstaytime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BannerStayMaxtime = 33;
  void clear_bannerstaymaxtime();
  ::PROTOBUF_NAMESPACE_ID::int32 bannerstaymaxtime() const;
  void set_bannerstaymaxtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bannerstaymaxtime() const;
  void _internal_set_bannerstaymaxtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LordMoveSpeed = 34;
  void clear_lordmovespeed();
  ::PROTOBUF_NAMESPACE_ID::int32 lordmovespeed() const;
  void set_lordmovespeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lordmovespeed() const;
  void _internal_set_lordmovespeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 DropItemRange = 35;
  void clear_dropitemrange();
  ::PROTOBUF_NAMESPACE_ID::int32 dropitemrange() const;
  void set_dropitemrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropitemrange() const;
  void _internal_set_dropitemrange(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MaxRoom = 36;
  void clear_maxroom();
  ::PROTOBUF_NAMESPACE_ID::int32 maxroom() const;
  void set_maxroom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxroom() const;
  void _internal_set_maxroom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LordHealthFactor = 37;
  void clear_lordhealthfactor();
  ::PROTOBUF_NAMESPACE_ID::int32 lordhealthfactor() const;
  void set_lordhealthfactor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lordhealthfactor() const;
  void _internal_set_lordhealthfactor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HeroMaxRuneCount = 39;
  void clear_heromaxrunecount();
  ::PROTOBUF_NAMESPACE_ID::int32 heromaxrunecount() const;
  void set_heromaxrunecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heromaxrunecount() const;
  void _internal_set_heromaxrunecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MaxSoulStampDemand = 40;
  void clear_maxsoulstampdemand();
  ::PROTOBUF_NAMESPACE_ID::int32 maxsoulstampdemand() const;
  void set_maxsoulstampdemand(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxsoulstampdemand() const;
  void _internal_set_maxsoulstampdemand(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double SoulStampDemandFactor = 41;
  void clear_soulstampdemandfactor();
  double soulstampdemandfactor() const;
  void set_soulstampdemandfactor(double value);
  private:
  double _internal_soulstampdemandfactor() const;
  void _internal_set_soulstampdemandfactor(double value);
  public:

  // int32 BagCapacity = 42;
  void clear_bagcapacity();
  ::PROTOBUF_NAMESPACE_ID::int32 bagcapacity() const;
  void set_bagcapacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bagcapacity() const;
  void _internal_set_bagcapacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ResolveFactor = 43;
  void clear_resolvefactor();
  ::PROTOBUF_NAMESPACE_ID::int32 resolvefactor() const;
  void set_resolvefactor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resolvefactor() const;
  void _internal_set_resolvefactor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SkillFadeOutTime = 44;
  void clear_skillfadeouttime();
  ::PROTOBUF_NAMESPACE_ID::int32 skillfadeouttime() const;
  void set_skillfadeouttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_skillfadeouttime() const;
  void _internal_set_skillfadeouttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PvpEnemyLordGrid = 45;
  void clear_pvpenemylordgrid();
  ::PROTOBUF_NAMESPACE_ID::int32 pvpenemylordgrid() const;
  void set_pvpenemylordgrid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pvpenemylordgrid() const;
  void _internal_set_pvpenemylordgrid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PvpFirstHandWaiting = 47;
  void clear_pvpfirsthandwaiting();
  ::PROTOBUF_NAMESPACE_ID::int32 pvpfirsthandwaiting() const;
  void set_pvpfirsthandwaiting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pvpfirsthandwaiting() const;
  void _internal_set_pvpfirsthandwaiting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PvpSecondHandWaiting = 48;
  void clear_pvpsecondhandwaiting();
  ::PROTOBUF_NAMESPACE_ID::int32 pvpsecondhandwaiting() const;
  void set_pvpsecondhandwaiting(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pvpsecondhandwaiting() const;
  void _internal_set_pvpsecondhandwaiting(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PvpStartCountDown = 49;
  void clear_pvpstartcountdown();
  ::PROTOBUF_NAMESPACE_ID::int32 pvpstartcountdown() const;
  void set_pvpstartcountdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pvpstartcountdown() const;
  void _internal_set_pvpstartcountdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PvpOverCountDown = 50;
  void clear_pvpovercountdown();
  ::PROTOBUF_NAMESPACE_ID::int32 pvpovercountdown() const;
  void set_pvpovercountdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pvpovercountdown() const;
  void _internal_set_pvpovercountdown(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleHeroDieValue = 52;
  void clear_battleherodievalue();
  ::PROTOBUF_NAMESPACE_ID::int32 battleherodievalue() const;
  void set_battleherodievalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battleherodievalue() const;
  void _internal_set_battleherodievalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleMaxTimeValue = 53;
  void clear_battlemaxtimevalue();
  ::PROTOBUF_NAMESPACE_ID::int32 battlemaxtimevalue() const;
  void set_battlemaxtimevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battlemaxtimevalue() const;
  void _internal_set_battlemaxtimevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleJumpTime = 54;
  void clear_battlejumptime();
  ::PROTOBUF_NAMESPACE_ID::int32 battlejumptime() const;
  void set_battlejumptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battlejumptime() const;
  void _internal_set_battlejumptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ProfessionUpgradeCount = 55;
  void clear_professionupgradecount();
  ::PROTOBUF_NAMESPACE_ID::int32 professionupgradecount() const;
  void set_professionupgradecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_professionupgradecount() const;
  void _internal_set_professionupgradecount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HandCardLimit = 56;
  void clear_handcardlimit();
  ::PROTOBUF_NAMESPACE_ID::int32 handcardlimit() const;
  void set_handcardlimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_handcardlimit() const;
  void _internal_set_handcardlimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CardLevelUpNeedNum = 59;
  void clear_cardlevelupneednum();
  ::PROTOBUF_NAMESPACE_ID::int32 cardlevelupneednum() const;
  void set_cardlevelupneednum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cardlevelupneednum() const;
  void _internal_set_cardlevelupneednum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 CardUseToDrawUnique = 60;
  void clear_cardusetodrawunique();
  ::PROTOBUF_NAMESPACE_ID::int32 cardusetodrawunique() const;
  void set_cardusetodrawunique(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cardusetodrawunique() const;
  void _internal_set_cardusetodrawunique(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 OriginalHandCardLimit = 61;
  void clear_originalhandcardlimit();
  ::PROTOBUF_NAMESPACE_ID::int32 originalhandcardlimit() const;
  void set_originalhandcardlimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originalhandcardlimit() const;
  void _internal_set_originalhandcardlimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UniqueSkillCardLimitCountOT = 62;
  void clear_uniqueskillcardlimitcountot();
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueskillcardlimitcountot() const;
  void set_uniqueskillcardlimitcountot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uniqueskillcardlimitcountot() const;
  void _internal_set_uniqueskillcardlimitcountot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 DropCoefficientInEliteRoom = 63;
  void clear_dropcoefficientineliteroom();
  ::PROTOBUF_NAMESPACE_ID::int32 dropcoefficientineliteroom() const;
  void set_dropcoefficientineliteroom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropcoefficientineliteroom() const;
  void _internal_set_dropcoefficientineliteroom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 DropCoefficientInBossRoom = 64;
  void clear_dropcoefficientinbossroom();
  ::PROTOBUF_NAMESPACE_ID::int32 dropcoefficientinbossroom() const;
  void set_dropcoefficientinbossroom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dropcoefficientinbossroom() const;
  void _internal_set_dropcoefficientinbossroom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HeroRebornTime = 65;
  void clear_heroreborntime();
  ::PROTOBUF_NAMESPACE_ID::int32 heroreborntime() const;
  void set_heroreborntime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heroreborntime() const;
  void _internal_set_heroreborntime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HeroRebornHpCostFactor = 66;
  void clear_herorebornhpcostfactor();
  ::PROTOBUF_NAMESPACE_ID::int32 herorebornhpcostfactor() const;
  void set_herorebornhpcostfactor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_herorebornhpcostfactor() const;
  void _internal_set_herorebornhpcostfactor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 OriginalHandCardNum = 67;
  void clear_originalhandcardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 originalhandcardnum() const;
  void set_originalhandcardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_originalhandcardnum() const;
  void _internal_set_originalhandcardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ChallengeFirstHandChance = 68;
  void clear_challengefirsthandchance();
  ::PROTOBUF_NAMESPACE_ID::int32 challengefirsthandchance() const;
  void set_challengefirsthandchance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_challengefirsthandchance() const;
  void _internal_set_challengefirsthandchance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PvpChallengeTime = 69;
  void clear_pvpchallengetime();
  ::PROTOBUF_NAMESPACE_ID::int32 pvpchallengetime() const;
  void set_pvpchallengetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pvpchallengetime() const;
  void _internal_set_pvpchallengetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 FirstHandEnergyCardCount = 70;
  void clear_firsthandenergycardcount();
  ::PROTOBUF_NAMESPACE_ID::int32 firsthandenergycardcount() const;
  void set_firsthandenergycardcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_firsthandenergycardcount() const;
  void _internal_set_firsthandenergycardcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 SecondtHandEnergyCardCount = 71;
  void clear_secondthandenergycardcount();
  ::PROTOBUF_NAMESPACE_ID::int32 secondthandenergycardcount() const;
  void set_secondthandenergycardcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_secondthandenergycardcount() const;
  void _internal_set_secondthandenergycardcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PvpFirstHandTime = 72;
  void clear_pvpfirsthandtime();
  ::PROTOBUF_NAMESPACE_ID::int32 pvpfirsthandtime() const;
  void set_pvpfirsthandtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pvpfirsthandtime() const;
  void _internal_set_pvpfirsthandtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PvpSecondHandTime = 73;
  void clear_pvpsecondhandtime();
  ::PROTOBUF_NAMESPACE_ID::int32 pvpsecondhandtime() const;
  void set_pvpsecondhandtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pvpsecondhandtime() const;
  void _internal_set_pvpsecondhandtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 LordCardSpacing = 74;
  void clear_lordcardspacing();
  ::PROTOBUF_NAMESPACE_ID::int32 lordcardspacing() const;
  void set_lordcardspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lordcardspacing() const;
  void _internal_set_lordcardspacing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 EnergyCardCheckUp = 75;
  void clear_energycardcheckup();
  ::PROTOBUF_NAMESPACE_ID::int32 energycardcheckup() const;
  void set_energycardcheckup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_energycardcheckup() const;
  void _internal_set_energycardcheckup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PvpOriginalHandCardNum = 76;
  void clear_pvporiginalhandcardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 pvporiginalhandcardnum() const;
  void set_pvporiginalhandcardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pvporiginalhandcardnum() const;
  void _internal_set_pvporiginalhandcardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 HangUpIntervalTime = 78;
  void clear_hangupintervaltime();
  ::PROTOBUF_NAMESPACE_ID::int32 hangupintervaltime() const;
  void set_hangupintervaltime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hangupintervaltime() const;
  void _internal_set_hangupintervaltime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 NextWaveAppearInterval = 79;
  void clear_nextwaveappearinterval();
  ::PROTOBUF_NAMESPACE_ID::int32 nextwaveappearinterval() const;
  void set_nextwaveappearinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nextwaveappearinterval() const;
  void _internal_set_nextwaveappearinterval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 RemainsCompoundOriginalCount = 81;
  void clear_remainscompoundoriginalcount();
  ::PROTOBUF_NAMESPACE_ID::int32 remainscompoundoriginalcount() const;
  void set_remainscompoundoriginalcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remainscompoundoriginalcount() const;
  void _internal_set_remainscompoundoriginalcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleDashTime = 83;
  void clear_battledashtime();
  ::PROTOBUF_NAMESPACE_ID::int32 battledashtime() const;
  void set_battledashtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battledashtime() const;
  void _internal_set_battledashtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleDashBackTime = 84;
  void clear_battledashbacktime();
  ::PROTOBUF_NAMESPACE_ID::int32 battledashbacktime() const;
  void set_battledashbacktime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battledashbacktime() const;
  void _internal_set_battledashbacktime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleRoundSafeTime = 85;
  void clear_battleroundsafetime();
  ::PROTOBUF_NAMESPACE_ID::int32 battleroundsafetime() const;
  void set_battleroundsafetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battleroundsafetime() const;
  void _internal_set_battleroundsafetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleWaitNextTime = 86;
  void clear_battlewaitnexttime();
  ::PROTOBUF_NAMESPACE_ID::int32 battlewaitnexttime() const;
  void set_battlewaitnexttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battlewaitnexttime() const;
  void _internal_set_battlewaitnexttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleRoundTime = 87;
  void clear_battleroundtime();
  ::PROTOBUF_NAMESPACE_ID::int32 battleroundtime() const;
  void set_battleroundtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battleroundtime() const;
  void _internal_set_battleroundtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleHitFlyForce = 88;
  void clear_battlehitflyforce();
  ::PROTOBUF_NAMESPACE_ID::int32 battlehitflyforce() const;
  void set_battlehitflyforce(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battlehitflyforce() const;
  void _internal_set_battlehitflyforce(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleHitDownForce = 89;
  void clear_battlehitdownforce();
  ::PROTOBUF_NAMESPACE_ID::int32 battlehitdownforce() const;
  void set_battlehitdownforce(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battlehitdownforce() const;
  void _internal_set_battlehitdownforce(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleHitFlyMaxHeight = 90;
  void clear_battlehitflymaxheight();
  ::PROTOBUF_NAMESPACE_ID::int32 battlehitflymaxheight() const;
  void set_battlehitflymaxheight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battlehitflymaxheight() const;
  void _internal_set_battlehitflymaxheight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleGravity = 91;
  void clear_battlegravity();
  ::PROTOBUF_NAMESPACE_ID::int32 battlegravity() const;
  void set_battlegravity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battlegravity() const;
  void _internal_set_battlegravity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleFlyUpGravity = 92;
  void clear_battleflyupgravity();
  ::PROTOBUF_NAMESPACE_ID::int32 battleflyupgravity() const;
  void set_battleflyupgravity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battleflyupgravity() const;
  void _internal_set_battleflyupgravity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleNearTopGravity = 93;
  void clear_battleneartopgravity();
  ::PROTOBUF_NAMESPACE_ID::int32 battleneartopgravity() const;
  void set_battleneartopgravity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battleneartopgravity() const;
  void _internal_set_battleneartopgravity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 BattleNearTopSpeed = 94;
  void clear_battleneartopspeed();
  ::PROTOBUF_NAMESPACE_ID::int32 battleneartopspeed() const;
  void set_battleneartopspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battleneartopspeed() const;
  void _internal_set_battleneartopspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Config.BattleParamTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > battlemapsizes_;
  mutable std::atomic<int> _battlemapsizes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > runerefreshprices_;
  mutable std::atomic<int> _runerefreshprices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > pvpscenebuffs_;
  mutable std::atomic<int> _pvpscenebuffs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > forgetcosts_;
  mutable std::atomic<int> _forgetcosts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > praycosts_;
  mutable std::atomic<int> _praycosts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > battlespeeduprates_;
  mutable std::atomic<int> _battlespeeduprates_cached_byte_size_;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* dodgeeffectlimit_;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* criteffectlimit_;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* critdameffectlimit_;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* defenserateeffectlimit_;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* cooldownlimit_;
  ::Config::BattleParamTemplate_Elementeffectlimit_* elementeffectlimit_;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* damagecorrectionrange_;
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* blockeffectlimit_;
  ::Position2Int* battlemapgrid_;
  ::Config::BattleParamTemplate_Soulinterest_* soulinterest_;
  ::Config::BattleParamTemplate_Dice_* dice_;
  ::Config::BattleParamTemplate_Mazevaluefactor_* mazevaluefactor_;
  ::PROTOBUF_NAMESPACE_ID::int32 battlestartwaittime_;
  ::PROTOBUF_NAMESPACE_ID::int32 damagereducelimit_;
  double elementattackbase_;
  double elementdefensebase_;
  double dodgecorrection_;
  ::PROTOBUF_NAMESPACE_ID::int32 elementeffectbase_;
  ::PROTOBUF_NAMESPACE_ID::int32 blckeffect_;
  double critcorrection_;
  ::PROTOBUF_NAMESPACE_ID::int32 heromaxenergyvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 heromaxenergynum_;
  double maxattackspeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 lordmaxenergy_;
  ::PROTOBUF_NAMESPACE_ID::int32 heroskillcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsterwalkmodetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsterdropmodetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 gridsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 lordgrid_;
  ::PROTOBUF_NAMESPACE_ID::int32 skillmovetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 skillflashtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 monsterdroprange_;
  ::PROTOBUF_NAMESPACE_ID::int32 offsetdistance_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropitemstaytime_;
  ::PROTOBUF_NAMESPACE_ID::int32 bannerstaymaxtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 lordmovespeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropitemrange_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxroom_;
  ::PROTOBUF_NAMESPACE_ID::int32 lordhealthfactor_;
  ::PROTOBUF_NAMESPACE_ID::int32 heromaxrunecount_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxsoulstampdemand_;
  double soulstampdemandfactor_;
  ::PROTOBUF_NAMESPACE_ID::int32 bagcapacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 resolvefactor_;
  ::PROTOBUF_NAMESPACE_ID::int32 skillfadeouttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 pvpenemylordgrid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pvpfirsthandwaiting_;
  ::PROTOBUF_NAMESPACE_ID::int32 pvpsecondhandwaiting_;
  ::PROTOBUF_NAMESPACE_ID::int32 pvpstartcountdown_;
  ::PROTOBUF_NAMESPACE_ID::int32 pvpovercountdown_;
  ::PROTOBUF_NAMESPACE_ID::int32 battleherodievalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 battlemaxtimevalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 battlejumptime_;
  ::PROTOBUF_NAMESPACE_ID::int32 professionupgradecount_;
  ::PROTOBUF_NAMESPACE_ID::int32 handcardlimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardlevelupneednum_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardusetodrawunique_;
  ::PROTOBUF_NAMESPACE_ID::int32 originalhandcardlimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 uniqueskillcardlimitcountot_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropcoefficientineliteroom_;
  ::PROTOBUF_NAMESPACE_ID::int32 dropcoefficientinbossroom_;
  ::PROTOBUF_NAMESPACE_ID::int32 heroreborntime_;
  ::PROTOBUF_NAMESPACE_ID::int32 herorebornhpcostfactor_;
  ::PROTOBUF_NAMESPACE_ID::int32 originalhandcardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 challengefirsthandchance_;
  ::PROTOBUF_NAMESPACE_ID::int32 pvpchallengetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 firsthandenergycardcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 secondthandenergycardcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 pvpfirsthandtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 pvpsecondhandtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 lordcardspacing_;
  ::PROTOBUF_NAMESPACE_ID::int32 energycardcheckup_;
  ::PROTOBUF_NAMESPACE_ID::int32 pvporiginalhandcardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 hangupintervaltime_;
  ::PROTOBUF_NAMESPACE_ID::int32 nextwaveappearinterval_;
  ::PROTOBUF_NAMESPACE_ID::int32 remainscompoundoriginalcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 battledashtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 battledashbacktime_;
  ::PROTOBUF_NAMESPACE_ID::int32 battleroundsafetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 battlewaitnexttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 battleroundtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 battlehitflyforce_;
  ::PROTOBUF_NAMESPACE_ID::int32 battlehitdownforce_;
  ::PROTOBUF_NAMESPACE_ID::int32 battlehitflymaxheight_;
  ::PROTOBUF_NAMESPACE_ID::int32 battlegravity_;
  ::PROTOBUF_NAMESPACE_ID::int32 battleflyupgravity_;
  ::PROTOBUF_NAMESPACE_ID::int32 battleneartopgravity_;
  ::PROTOBUF_NAMESPACE_ID::int32 battleneartopspeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fBattleParamTemplate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BattleParamTemplate_Dodgeeffectlimit_

// int32 Max = 1;
inline void BattleParamTemplate_Dodgeeffectlimit_::clear_max() {
  max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Dodgeeffectlimit_::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Dodgeeffectlimit_::max() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Dodgeeffectlimit_.Max)
  return _internal_max();
}
inline void BattleParamTemplate_Dodgeeffectlimit_::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_ = value;
}
inline void BattleParamTemplate_Dodgeeffectlimit_::set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.Dodgeeffectlimit_.Max)
}

// int32 Min = 2;
inline void BattleParamTemplate_Dodgeeffectlimit_::clear_min() {
  min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Dodgeeffectlimit_::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Dodgeeffectlimit_::min() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Dodgeeffectlimit_.Min)
  return _internal_min();
}
inline void BattleParamTemplate_Dodgeeffectlimit_::_internal_set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_ = value;
}
inline void BattleParamTemplate_Dodgeeffectlimit_::set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.Dodgeeffectlimit_.Min)
}

// -------------------------------------------------------------------

// BattleParamTemplate_Elementeffectlimit_

// double Max = 1;
inline void BattleParamTemplate_Elementeffectlimit_::clear_max() {
  max_ = 0;
}
inline double BattleParamTemplate_Elementeffectlimit_::_internal_max() const {
  return max_;
}
inline double BattleParamTemplate_Elementeffectlimit_::max() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Elementeffectlimit_.Max)
  return _internal_max();
}
inline void BattleParamTemplate_Elementeffectlimit_::_internal_set_max(double value) {
  
  max_ = value;
}
inline void BattleParamTemplate_Elementeffectlimit_::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.Elementeffectlimit_.Max)
}

// double Min = 2;
inline void BattleParamTemplate_Elementeffectlimit_::clear_min() {
  min_ = 0;
}
inline double BattleParamTemplate_Elementeffectlimit_::_internal_min() const {
  return min_;
}
inline double BattleParamTemplate_Elementeffectlimit_::min() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Elementeffectlimit_.Min)
  return _internal_min();
}
inline void BattleParamTemplate_Elementeffectlimit_::_internal_set_min(double value) {
  
  min_ = value;
}
inline void BattleParamTemplate_Elementeffectlimit_::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.Elementeffectlimit_.Min)
}

// -------------------------------------------------------------------

// BattleParamTemplate_Soulinterest_

// int32 Factor = 1;
inline void BattleParamTemplate_Soulinterest_::clear_factor() {
  factor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Soulinterest_::_internal_factor() const {
  return factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Soulinterest_::factor() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Soulinterest_.Factor)
  return _internal_factor();
}
inline void BattleParamTemplate_Soulinterest_::_internal_set_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  factor_ = value;
}
inline void BattleParamTemplate_Soulinterest_::set_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_factor(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.Soulinterest_.Factor)
}

// int32 MaxCount = 2;
inline void BattleParamTemplate_Soulinterest_::clear_maxcount() {
  maxcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Soulinterest_::_internal_maxcount() const {
  return maxcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Soulinterest_::maxcount() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Soulinterest_.MaxCount)
  return _internal_maxcount();
}
inline void BattleParamTemplate_Soulinterest_::_internal_set_maxcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxcount_ = value;
}
inline void BattleParamTemplate_Soulinterest_::set_maxcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxcount(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.Soulinterest_.MaxCount)
}

// -------------------------------------------------------------------

// BattleParamTemplate_Dice_

// int32 DiceCount = 1;
inline void BattleParamTemplate_Dice_::clear_dicecount() {
  dicecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Dice_::_internal_dicecount() const {
  return dicecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Dice_::dicecount() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Dice_.DiceCount)
  return _internal_dicecount();
}
inline void BattleParamTemplate_Dice_::_internal_set_dicecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dicecount_ = value;
}
inline void BattleParamTemplate_Dice_::set_dicecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dicecount(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.Dice_.DiceCount)
}

// int32 DiceValue = 2;
inline void BattleParamTemplate_Dice_::clear_dicevalue() {
  dicevalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Dice_::_internal_dicevalue() const {
  return dicevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Dice_::dicevalue() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Dice_.DiceValue)
  return _internal_dicevalue();
}
inline void BattleParamTemplate_Dice_::_internal_set_dicevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dicevalue_ = value;
}
inline void BattleParamTemplate_Dice_::set_dicevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dicevalue(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.Dice_.DiceValue)
}

// -------------------------------------------------------------------

// BattleParamTemplate_Mazevaluefactor_

// double AtkRate = 1;
inline void BattleParamTemplate_Mazevaluefactor_::clear_atkrate() {
  atkrate_ = 0;
}
inline double BattleParamTemplate_Mazevaluefactor_::_internal_atkrate() const {
  return atkrate_;
}
inline double BattleParamTemplate_Mazevaluefactor_::atkrate() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Mazevaluefactor_.AtkRate)
  return _internal_atkrate();
}
inline void BattleParamTemplate_Mazevaluefactor_::_internal_set_atkrate(double value) {
  
  atkrate_ = value;
}
inline void BattleParamTemplate_Mazevaluefactor_::set_atkrate(double value) {
  _internal_set_atkrate(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.Mazevaluefactor_.AtkRate)
}

// int32 Factor = 2;
inline void BattleParamTemplate_Mazevaluefactor_::clear_factor() {
  factor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Mazevaluefactor_::_internal_factor() const {
  return factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate_Mazevaluefactor_::factor() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Mazevaluefactor_.Factor)
  return _internal_factor();
}
inline void BattleParamTemplate_Mazevaluefactor_::_internal_set_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  factor_ = value;
}
inline void BattleParamTemplate_Mazevaluefactor_::set_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_factor(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.Mazevaluefactor_.Factor)
}

// -------------------------------------------------------------------

// BattleParamTemplate

// int32 BattleStartWaitTime = 1;
inline void BattleParamTemplate::clear_battlestartwaittime() {
  battlestartwaittime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battlestartwaittime() const {
  return battlestartwaittime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battlestartwaittime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleStartWaitTime)
  return _internal_battlestartwaittime();
}
inline void BattleParamTemplate::_internal_set_battlestartwaittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battlestartwaittime_ = value;
}
inline void BattleParamTemplate::set_battlestartwaittime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battlestartwaittime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleStartWaitTime)
}

// repeated int32 BattleMapSizes = 2;
inline int BattleParamTemplate::_internal_battlemapsizes_size() const {
  return battlemapsizes_.size();
}
inline int BattleParamTemplate::battlemapsizes_size() const {
  return _internal_battlemapsizes_size();
}
inline void BattleParamTemplate::clear_battlemapsizes() {
  battlemapsizes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battlemapsizes(int index) const {
  return battlemapsizes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battlemapsizes(int index) const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleMapSizes)
  return _internal_battlemapsizes(index);
}
inline void BattleParamTemplate::set_battlemapsizes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  battlemapsizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleMapSizes)
}
inline void BattleParamTemplate::_internal_add_battlemapsizes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  battlemapsizes_.Add(value);
}
inline void BattleParamTemplate::add_battlemapsizes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_battlemapsizes(value);
  // @@protoc_insertion_point(field_add:Config.BattleParamTemplate.BattleMapSizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleParamTemplate::_internal_battlemapsizes() const {
  return battlemapsizes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleParamTemplate::battlemapsizes() const {
  // @@protoc_insertion_point(field_list:Config.BattleParamTemplate.BattleMapSizes)
  return _internal_battlemapsizes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleParamTemplate::_internal_mutable_battlemapsizes() {
  return &battlemapsizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleParamTemplate::mutable_battlemapsizes() {
  // @@protoc_insertion_point(field_mutable_list:Config.BattleParamTemplate.BattleMapSizes)
  return _internal_mutable_battlemapsizes();
}

// .Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;
inline bool BattleParamTemplate::_internal_has_dodgeeffectlimit() const {
  return this != internal_default_instance() && dodgeeffectlimit_ != nullptr;
}
inline bool BattleParamTemplate::has_dodgeeffectlimit() const {
  return _internal_has_dodgeeffectlimit();
}
inline void BattleParamTemplate::clear_dodgeeffectlimit() {
  if (GetArena() == nullptr && dodgeeffectlimit_ != nullptr) {
    delete dodgeeffectlimit_;
  }
  dodgeeffectlimit_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::_internal_dodgeeffectlimit() const {
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_* p = dodgeeffectlimit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Dodgeeffectlimit_&>(
      ::Config::_BattleParamTemplate_Dodgeeffectlimit__default_instance_);
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::dodgeeffectlimit() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.DodgeEffectLimit)
  return _internal_dodgeeffectlimit();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_dodgeeffectlimit(
    ::Config::BattleParamTemplate_Dodgeeffectlimit_* dodgeeffectlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dodgeeffectlimit_);
  }
  dodgeeffectlimit_ = dodgeeffectlimit;
  if (dodgeeffectlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.DodgeEffectLimit)
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::release_dodgeeffectlimit() {
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = dodgeeffectlimit_;
  dodgeeffectlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::unsafe_arena_release_dodgeeffectlimit() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.DodgeEffectLimit)
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = dodgeeffectlimit_;
  dodgeeffectlimit_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::_internal_mutable_dodgeeffectlimit() {
  
  if (dodgeeffectlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Dodgeeffectlimit_>(GetArena());
    dodgeeffectlimit_ = p;
  }
  return dodgeeffectlimit_;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::mutable_dodgeeffectlimit() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.DodgeEffectLimit)
  return _internal_mutable_dodgeeffectlimit();
}
inline void BattleParamTemplate::set_allocated_dodgeeffectlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* dodgeeffectlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dodgeeffectlimit_;
  }
  if (dodgeeffectlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dodgeeffectlimit);
    if (message_arena != submessage_arena) {
      dodgeeffectlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dodgeeffectlimit, submessage_arena);
    }
    
  } else {
    
  }
  dodgeeffectlimit_ = dodgeeffectlimit;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.DodgeEffectLimit)
}

// .Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;
inline bool BattleParamTemplate::_internal_has_criteffectlimit() const {
  return this != internal_default_instance() && criteffectlimit_ != nullptr;
}
inline bool BattleParamTemplate::has_criteffectlimit() const {
  return _internal_has_criteffectlimit();
}
inline void BattleParamTemplate::clear_criteffectlimit() {
  if (GetArena() == nullptr && criteffectlimit_ != nullptr) {
    delete criteffectlimit_;
  }
  criteffectlimit_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::_internal_criteffectlimit() const {
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_* p = criteffectlimit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Dodgeeffectlimit_&>(
      ::Config::_BattleParamTemplate_Dodgeeffectlimit__default_instance_);
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::criteffectlimit() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.CritEffectLimit)
  return _internal_criteffectlimit();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_criteffectlimit(
    ::Config::BattleParamTemplate_Dodgeeffectlimit_* criteffectlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(criteffectlimit_);
  }
  criteffectlimit_ = criteffectlimit;
  if (criteffectlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.CritEffectLimit)
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::release_criteffectlimit() {
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = criteffectlimit_;
  criteffectlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::unsafe_arena_release_criteffectlimit() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.CritEffectLimit)
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = criteffectlimit_;
  criteffectlimit_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::_internal_mutable_criteffectlimit() {
  
  if (criteffectlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Dodgeeffectlimit_>(GetArena());
    criteffectlimit_ = p;
  }
  return criteffectlimit_;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::mutable_criteffectlimit() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.CritEffectLimit)
  return _internal_mutable_criteffectlimit();
}
inline void BattleParamTemplate::set_allocated_criteffectlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* criteffectlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete criteffectlimit_;
  }
  if (criteffectlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(criteffectlimit);
    if (message_arena != submessage_arena) {
      criteffectlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, criteffectlimit, submessage_arena);
    }
    
  } else {
    
  }
  criteffectlimit_ = criteffectlimit;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.CritEffectLimit)
}

// .Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;
inline bool BattleParamTemplate::_internal_has_critdameffectlimit() const {
  return this != internal_default_instance() && critdameffectlimit_ != nullptr;
}
inline bool BattleParamTemplate::has_critdameffectlimit() const {
  return _internal_has_critdameffectlimit();
}
inline void BattleParamTemplate::clear_critdameffectlimit() {
  if (GetArena() == nullptr && critdameffectlimit_ != nullptr) {
    delete critdameffectlimit_;
  }
  critdameffectlimit_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::_internal_critdameffectlimit() const {
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_* p = critdameffectlimit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Dodgeeffectlimit_&>(
      ::Config::_BattleParamTemplate_Dodgeeffectlimit__default_instance_);
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::critdameffectlimit() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.CritDamEffectLimit)
  return _internal_critdameffectlimit();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_critdameffectlimit(
    ::Config::BattleParamTemplate_Dodgeeffectlimit_* critdameffectlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(critdameffectlimit_);
  }
  critdameffectlimit_ = critdameffectlimit;
  if (critdameffectlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.CritDamEffectLimit)
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::release_critdameffectlimit() {
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = critdameffectlimit_;
  critdameffectlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::unsafe_arena_release_critdameffectlimit() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.CritDamEffectLimit)
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = critdameffectlimit_;
  critdameffectlimit_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::_internal_mutable_critdameffectlimit() {
  
  if (critdameffectlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Dodgeeffectlimit_>(GetArena());
    critdameffectlimit_ = p;
  }
  return critdameffectlimit_;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::mutable_critdameffectlimit() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.CritDamEffectLimit)
  return _internal_mutable_critdameffectlimit();
}
inline void BattleParamTemplate::set_allocated_critdameffectlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* critdameffectlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete critdameffectlimit_;
  }
  if (critdameffectlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(critdameffectlimit);
    if (message_arena != submessage_arena) {
      critdameffectlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, critdameffectlimit, submessage_arena);
    }
    
  } else {
    
  }
  critdameffectlimit_ = critdameffectlimit;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.CritDamEffectLimit)
}

// .Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;
inline bool BattleParamTemplate::_internal_has_defenserateeffectlimit() const {
  return this != internal_default_instance() && defenserateeffectlimit_ != nullptr;
}
inline bool BattleParamTemplate::has_defenserateeffectlimit() const {
  return _internal_has_defenserateeffectlimit();
}
inline void BattleParamTemplate::clear_defenserateeffectlimit() {
  if (GetArena() == nullptr && defenserateeffectlimit_ != nullptr) {
    delete defenserateeffectlimit_;
  }
  defenserateeffectlimit_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::_internal_defenserateeffectlimit() const {
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_* p = defenserateeffectlimit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Dodgeeffectlimit_&>(
      ::Config::_BattleParamTemplate_Dodgeeffectlimit__default_instance_);
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::defenserateeffectlimit() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.DefenseRateEffectLimit)
  return _internal_defenserateeffectlimit();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_defenserateeffectlimit(
    ::Config::BattleParamTemplate_Dodgeeffectlimit_* defenserateeffectlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defenserateeffectlimit_);
  }
  defenserateeffectlimit_ = defenserateeffectlimit;
  if (defenserateeffectlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.DefenseRateEffectLimit)
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::release_defenserateeffectlimit() {
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = defenserateeffectlimit_;
  defenserateeffectlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::unsafe_arena_release_defenserateeffectlimit() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.DefenseRateEffectLimit)
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = defenserateeffectlimit_;
  defenserateeffectlimit_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::_internal_mutable_defenserateeffectlimit() {
  
  if (defenserateeffectlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Dodgeeffectlimit_>(GetArena());
    defenserateeffectlimit_ = p;
  }
  return defenserateeffectlimit_;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::mutable_defenserateeffectlimit() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.DefenseRateEffectLimit)
  return _internal_mutable_defenserateeffectlimit();
}
inline void BattleParamTemplate::set_allocated_defenserateeffectlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* defenserateeffectlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete defenserateeffectlimit_;
  }
  if (defenserateeffectlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(defenserateeffectlimit);
    if (message_arena != submessage_arena) {
      defenserateeffectlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defenserateeffectlimit, submessage_arena);
    }
    
  } else {
    
  }
  defenserateeffectlimit_ = defenserateeffectlimit;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.DefenseRateEffectLimit)
}

// int32 DamageReduceLimit = 7;
inline void BattleParamTemplate::clear_damagereducelimit() {
  damagereducelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_damagereducelimit() const {
  return damagereducelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::damagereducelimit() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.DamageReduceLimit)
  return _internal_damagereducelimit();
}
inline void BattleParamTemplate::_internal_set_damagereducelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  damagereducelimit_ = value;
}
inline void BattleParamTemplate::set_damagereducelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_damagereducelimit(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.DamageReduceLimit)
}

// .Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;
inline bool BattleParamTemplate::_internal_has_cooldownlimit() const {
  return this != internal_default_instance() && cooldownlimit_ != nullptr;
}
inline bool BattleParamTemplate::has_cooldownlimit() const {
  return _internal_has_cooldownlimit();
}
inline void BattleParamTemplate::clear_cooldownlimit() {
  if (GetArena() == nullptr && cooldownlimit_ != nullptr) {
    delete cooldownlimit_;
  }
  cooldownlimit_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::_internal_cooldownlimit() const {
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_* p = cooldownlimit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Dodgeeffectlimit_&>(
      ::Config::_BattleParamTemplate_Dodgeeffectlimit__default_instance_);
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::cooldownlimit() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.CoolDownLimit)
  return _internal_cooldownlimit();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_cooldownlimit(
    ::Config::BattleParamTemplate_Dodgeeffectlimit_* cooldownlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cooldownlimit_);
  }
  cooldownlimit_ = cooldownlimit;
  if (cooldownlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.CoolDownLimit)
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::release_cooldownlimit() {
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = cooldownlimit_;
  cooldownlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::unsafe_arena_release_cooldownlimit() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.CoolDownLimit)
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = cooldownlimit_;
  cooldownlimit_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::_internal_mutable_cooldownlimit() {
  
  if (cooldownlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Dodgeeffectlimit_>(GetArena());
    cooldownlimit_ = p;
  }
  return cooldownlimit_;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::mutable_cooldownlimit() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.CoolDownLimit)
  return _internal_mutable_cooldownlimit();
}
inline void BattleParamTemplate::set_allocated_cooldownlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* cooldownlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cooldownlimit_;
  }
  if (cooldownlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cooldownlimit);
    if (message_arena != submessage_arena) {
      cooldownlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cooldownlimit, submessage_arena);
    }
    
  } else {
    
  }
  cooldownlimit_ = cooldownlimit;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.CoolDownLimit)
}

// .Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;
inline bool BattleParamTemplate::_internal_has_elementeffectlimit() const {
  return this != internal_default_instance() && elementeffectlimit_ != nullptr;
}
inline bool BattleParamTemplate::has_elementeffectlimit() const {
  return _internal_has_elementeffectlimit();
}
inline void BattleParamTemplate::clear_elementeffectlimit() {
  if (GetArena() == nullptr && elementeffectlimit_ != nullptr) {
    delete elementeffectlimit_;
  }
  elementeffectlimit_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Elementeffectlimit_& BattleParamTemplate::_internal_elementeffectlimit() const {
  const ::Config::BattleParamTemplate_Elementeffectlimit_* p = elementeffectlimit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Elementeffectlimit_&>(
      ::Config::_BattleParamTemplate_Elementeffectlimit__default_instance_);
}
inline const ::Config::BattleParamTemplate_Elementeffectlimit_& BattleParamTemplate::elementeffectlimit() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.ElementEffectLimit)
  return _internal_elementeffectlimit();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_elementeffectlimit(
    ::Config::BattleParamTemplate_Elementeffectlimit_* elementeffectlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elementeffectlimit_);
  }
  elementeffectlimit_ = elementeffectlimit;
  if (elementeffectlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.ElementEffectLimit)
}
inline ::Config::BattleParamTemplate_Elementeffectlimit_* BattleParamTemplate::release_elementeffectlimit() {
  
  ::Config::BattleParamTemplate_Elementeffectlimit_* temp = elementeffectlimit_;
  elementeffectlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Elementeffectlimit_* BattleParamTemplate::unsafe_arena_release_elementeffectlimit() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.ElementEffectLimit)
  
  ::Config::BattleParamTemplate_Elementeffectlimit_* temp = elementeffectlimit_;
  elementeffectlimit_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Elementeffectlimit_* BattleParamTemplate::_internal_mutable_elementeffectlimit() {
  
  if (elementeffectlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Elementeffectlimit_>(GetArena());
    elementeffectlimit_ = p;
  }
  return elementeffectlimit_;
}
inline ::Config::BattleParamTemplate_Elementeffectlimit_* BattleParamTemplate::mutable_elementeffectlimit() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.ElementEffectLimit)
  return _internal_mutable_elementeffectlimit();
}
inline void BattleParamTemplate::set_allocated_elementeffectlimit(::Config::BattleParamTemplate_Elementeffectlimit_* elementeffectlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete elementeffectlimit_;
  }
  if (elementeffectlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(elementeffectlimit);
    if (message_arena != submessage_arena) {
      elementeffectlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elementeffectlimit, submessage_arena);
    }
    
  } else {
    
  }
  elementeffectlimit_ = elementeffectlimit;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.ElementEffectLimit)
}

// double ElementAttackBase = 10;
inline void BattleParamTemplate::clear_elementattackbase() {
  elementattackbase_ = 0;
}
inline double BattleParamTemplate::_internal_elementattackbase() const {
  return elementattackbase_;
}
inline double BattleParamTemplate::elementattackbase() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.ElementAttackBase)
  return _internal_elementattackbase();
}
inline void BattleParamTemplate::_internal_set_elementattackbase(double value) {
  
  elementattackbase_ = value;
}
inline void BattleParamTemplate::set_elementattackbase(double value) {
  _internal_set_elementattackbase(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.ElementAttackBase)
}

// double ElementDefenseBase = 11;
inline void BattleParamTemplate::clear_elementdefensebase() {
  elementdefensebase_ = 0;
}
inline double BattleParamTemplate::_internal_elementdefensebase() const {
  return elementdefensebase_;
}
inline double BattleParamTemplate::elementdefensebase() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.ElementDefenseBase)
  return _internal_elementdefensebase();
}
inline void BattleParamTemplate::_internal_set_elementdefensebase(double value) {
  
  elementdefensebase_ = value;
}
inline void BattleParamTemplate::set_elementdefensebase(double value) {
  _internal_set_elementdefensebase(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.ElementDefenseBase)
}

// int32 ElementEffectBase = 12;
inline void BattleParamTemplate::clear_elementeffectbase() {
  elementeffectbase_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_elementeffectbase() const {
  return elementeffectbase_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::elementeffectbase() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.ElementEffectBase)
  return _internal_elementeffectbase();
}
inline void BattleParamTemplate::_internal_set_elementeffectbase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  elementeffectbase_ = value;
}
inline void BattleParamTemplate::set_elementeffectbase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_elementeffectbase(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.ElementEffectBase)
}

// .Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;
inline bool BattleParamTemplate::_internal_has_damagecorrectionrange() const {
  return this != internal_default_instance() && damagecorrectionrange_ != nullptr;
}
inline bool BattleParamTemplate::has_damagecorrectionrange() const {
  return _internal_has_damagecorrectionrange();
}
inline void BattleParamTemplate::clear_damagecorrectionrange() {
  if (GetArena() == nullptr && damagecorrectionrange_ != nullptr) {
    delete damagecorrectionrange_;
  }
  damagecorrectionrange_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::_internal_damagecorrectionrange() const {
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_* p = damagecorrectionrange_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Dodgeeffectlimit_&>(
      ::Config::_BattleParamTemplate_Dodgeeffectlimit__default_instance_);
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::damagecorrectionrange() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.DamageCorrectionRange)
  return _internal_damagecorrectionrange();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_damagecorrectionrange(
    ::Config::BattleParamTemplate_Dodgeeffectlimit_* damagecorrectionrange) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(damagecorrectionrange_);
  }
  damagecorrectionrange_ = damagecorrectionrange;
  if (damagecorrectionrange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.DamageCorrectionRange)
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::release_damagecorrectionrange() {
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = damagecorrectionrange_;
  damagecorrectionrange_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::unsafe_arena_release_damagecorrectionrange() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.DamageCorrectionRange)
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = damagecorrectionrange_;
  damagecorrectionrange_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::_internal_mutable_damagecorrectionrange() {
  
  if (damagecorrectionrange_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Dodgeeffectlimit_>(GetArena());
    damagecorrectionrange_ = p;
  }
  return damagecorrectionrange_;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::mutable_damagecorrectionrange() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.DamageCorrectionRange)
  return _internal_mutable_damagecorrectionrange();
}
inline void BattleParamTemplate::set_allocated_damagecorrectionrange(::Config::BattleParamTemplate_Dodgeeffectlimit_* damagecorrectionrange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete damagecorrectionrange_;
  }
  if (damagecorrectionrange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(damagecorrectionrange);
    if (message_arena != submessage_arena) {
      damagecorrectionrange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, damagecorrectionrange, submessage_arena);
    }
    
  } else {
    
  }
  damagecorrectionrange_ = damagecorrectionrange;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.DamageCorrectionRange)
}

// double DodgeCorrection = 14;
inline void BattleParamTemplate::clear_dodgecorrection() {
  dodgecorrection_ = 0;
}
inline double BattleParamTemplate::_internal_dodgecorrection() const {
  return dodgecorrection_;
}
inline double BattleParamTemplate::dodgecorrection() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.DodgeCorrection)
  return _internal_dodgecorrection();
}
inline void BattleParamTemplate::_internal_set_dodgecorrection(double value) {
  
  dodgecorrection_ = value;
}
inline void BattleParamTemplate::set_dodgecorrection(double value) {
  _internal_set_dodgecorrection(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.DodgeCorrection)
}

// double CritCorrection = 15;
inline void BattleParamTemplate::clear_critcorrection() {
  critcorrection_ = 0;
}
inline double BattleParamTemplate::_internal_critcorrection() const {
  return critcorrection_;
}
inline double BattleParamTemplate::critcorrection() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.CritCorrection)
  return _internal_critcorrection();
}
inline void BattleParamTemplate::_internal_set_critcorrection(double value) {
  
  critcorrection_ = value;
}
inline void BattleParamTemplate::set_critcorrection(double value) {
  _internal_set_critcorrection(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.CritCorrection)
}

// int32 BlckEffect = 16;
inline void BattleParamTemplate::clear_blckeffect() {
  blckeffect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_blckeffect() const {
  return blckeffect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::blckeffect() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BlckEffect)
  return _internal_blckeffect();
}
inline void BattleParamTemplate::_internal_set_blckeffect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blckeffect_ = value;
}
inline void BattleParamTemplate::set_blckeffect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blckeffect(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BlckEffect)
}

// .Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;
inline bool BattleParamTemplate::_internal_has_blockeffectlimit() const {
  return this != internal_default_instance() && blockeffectlimit_ != nullptr;
}
inline bool BattleParamTemplate::has_blockeffectlimit() const {
  return _internal_has_blockeffectlimit();
}
inline void BattleParamTemplate::clear_blockeffectlimit() {
  if (GetArena() == nullptr && blockeffectlimit_ != nullptr) {
    delete blockeffectlimit_;
  }
  blockeffectlimit_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::_internal_blockeffectlimit() const {
  const ::Config::BattleParamTemplate_Dodgeeffectlimit_* p = blockeffectlimit_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Dodgeeffectlimit_&>(
      ::Config::_BattleParamTemplate_Dodgeeffectlimit__default_instance_);
}
inline const ::Config::BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate::blockeffectlimit() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BlockEffectLimit)
  return _internal_blockeffectlimit();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_blockeffectlimit(
    ::Config::BattleParamTemplate_Dodgeeffectlimit_* blockeffectlimit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blockeffectlimit_);
  }
  blockeffectlimit_ = blockeffectlimit;
  if (blockeffectlimit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.BlockEffectLimit)
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::release_blockeffectlimit() {
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = blockeffectlimit_;
  blockeffectlimit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::unsafe_arena_release_blockeffectlimit() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.BlockEffectLimit)
  
  ::Config::BattleParamTemplate_Dodgeeffectlimit_* temp = blockeffectlimit_;
  blockeffectlimit_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::_internal_mutable_blockeffectlimit() {
  
  if (blockeffectlimit_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Dodgeeffectlimit_>(GetArena());
    blockeffectlimit_ = p;
  }
  return blockeffectlimit_;
}
inline ::Config::BattleParamTemplate_Dodgeeffectlimit_* BattleParamTemplate::mutable_blockeffectlimit() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.BlockEffectLimit)
  return _internal_mutable_blockeffectlimit();
}
inline void BattleParamTemplate::set_allocated_blockeffectlimit(::Config::BattleParamTemplate_Dodgeeffectlimit_* blockeffectlimit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete blockeffectlimit_;
  }
  if (blockeffectlimit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(blockeffectlimit);
    if (message_arena != submessage_arena) {
      blockeffectlimit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockeffectlimit, submessage_arena);
    }
    
  } else {
    
  }
  blockeffectlimit_ = blockeffectlimit;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.BlockEffectLimit)
}

// int32 HeroMaxEnergyValue = 18;
inline void BattleParamTemplate::clear_heromaxenergyvalue() {
  heromaxenergyvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_heromaxenergyvalue() const {
  return heromaxenergyvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::heromaxenergyvalue() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.HeroMaxEnergyValue)
  return _internal_heromaxenergyvalue();
}
inline void BattleParamTemplate::_internal_set_heromaxenergyvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heromaxenergyvalue_ = value;
}
inline void BattleParamTemplate::set_heromaxenergyvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heromaxenergyvalue(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.HeroMaxEnergyValue)
}

// int32 HeroMaxEnergyNum = 19;
inline void BattleParamTemplate::clear_heromaxenergynum() {
  heromaxenergynum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_heromaxenergynum() const {
  return heromaxenergynum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::heromaxenergynum() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.HeroMaxEnergyNum)
  return _internal_heromaxenergynum();
}
inline void BattleParamTemplate::_internal_set_heromaxenergynum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heromaxenergynum_ = value;
}
inline void BattleParamTemplate::set_heromaxenergynum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heromaxenergynum(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.HeroMaxEnergyNum)
}

// int32 LordMaxEnergy = 20;
inline void BattleParamTemplate::clear_lordmaxenergy() {
  lordmaxenergy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_lordmaxenergy() const {
  return lordmaxenergy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::lordmaxenergy() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.LordMaxEnergy)
  return _internal_lordmaxenergy();
}
inline void BattleParamTemplate::_internal_set_lordmaxenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lordmaxenergy_ = value;
}
inline void BattleParamTemplate::set_lordmaxenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lordmaxenergy(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.LordMaxEnergy)
}

// double MaxAttackSpeed = 21;
inline void BattleParamTemplate::clear_maxattackspeed() {
  maxattackspeed_ = 0;
}
inline double BattleParamTemplate::_internal_maxattackspeed() const {
  return maxattackspeed_;
}
inline double BattleParamTemplate::maxattackspeed() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.MaxAttackSpeed)
  return _internal_maxattackspeed();
}
inline void BattleParamTemplate::_internal_set_maxattackspeed(double value) {
  
  maxattackspeed_ = value;
}
inline void BattleParamTemplate::set_maxattackspeed(double value) {
  _internal_set_maxattackspeed(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.MaxAttackSpeed)
}

// int32 HeroSkillCount = 22;
inline void BattleParamTemplate::clear_heroskillcount() {
  heroskillcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_heroskillcount() const {
  return heroskillcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::heroskillcount() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.HeroSkillCount)
  return _internal_heroskillcount();
}
inline void BattleParamTemplate::_internal_set_heroskillcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heroskillcount_ = value;
}
inline void BattleParamTemplate::set_heroskillcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heroskillcount(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.HeroSkillCount)
}

// int32 MonsterWalkModeTime = 23;
inline void BattleParamTemplate::clear_monsterwalkmodetime() {
  monsterwalkmodetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_monsterwalkmodetime() const {
  return monsterwalkmodetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::monsterwalkmodetime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.MonsterWalkModeTime)
  return _internal_monsterwalkmodetime();
}
inline void BattleParamTemplate::_internal_set_monsterwalkmodetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsterwalkmodetime_ = value;
}
inline void BattleParamTemplate::set_monsterwalkmodetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsterwalkmodetime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.MonsterWalkModeTime)
}

// int32 MonsterDropModeTime = 24;
inline void BattleParamTemplate::clear_monsterdropmodetime() {
  monsterdropmodetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_monsterdropmodetime() const {
  return monsterdropmodetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::monsterdropmodetime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.MonsterDropModeTime)
  return _internal_monsterdropmodetime();
}
inline void BattleParamTemplate::_internal_set_monsterdropmodetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsterdropmodetime_ = value;
}
inline void BattleParamTemplate::set_monsterdropmodetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsterdropmodetime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.MonsterDropModeTime)
}

// .Position2Int BattleMapGrid = 25;
inline bool BattleParamTemplate::_internal_has_battlemapgrid() const {
  return this != internal_default_instance() && battlemapgrid_ != nullptr;
}
inline bool BattleParamTemplate::has_battlemapgrid() const {
  return _internal_has_battlemapgrid();
}
inline const ::Position2Int& BattleParamTemplate::_internal_battlemapgrid() const {
  const ::Position2Int* p = battlemapgrid_;
  return p != nullptr ? *p : reinterpret_cast<const ::Position2Int&>(
      ::_Position2Int_default_instance_);
}
inline const ::Position2Int& BattleParamTemplate::battlemapgrid() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleMapGrid)
  return _internal_battlemapgrid();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_battlemapgrid(
    ::Position2Int* battlemapgrid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battlemapgrid_);
  }
  battlemapgrid_ = battlemapgrid;
  if (battlemapgrid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.BattleMapGrid)
}
inline ::Position2Int* BattleParamTemplate::release_battlemapgrid() {
  
  ::Position2Int* temp = battlemapgrid_;
  battlemapgrid_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Position2Int* BattleParamTemplate::unsafe_arena_release_battlemapgrid() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.BattleMapGrid)
  
  ::Position2Int* temp = battlemapgrid_;
  battlemapgrid_ = nullptr;
  return temp;
}
inline ::Position2Int* BattleParamTemplate::_internal_mutable_battlemapgrid() {
  
  if (battlemapgrid_ == nullptr) {
    auto* p = CreateMaybeMessage<::Position2Int>(GetArena());
    battlemapgrid_ = p;
  }
  return battlemapgrid_;
}
inline ::Position2Int* BattleParamTemplate::mutable_battlemapgrid() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.BattleMapGrid)
  return _internal_mutable_battlemapgrid();
}
inline void BattleParamTemplate::set_allocated_battlemapgrid(::Position2Int* battlemapgrid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(battlemapgrid_);
  }
  if (battlemapgrid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battlemapgrid)->GetArena();
    if (message_arena != submessage_arena) {
      battlemapgrid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battlemapgrid, submessage_arena);
    }
    
  } else {
    
  }
  battlemapgrid_ = battlemapgrid;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.BattleMapGrid)
}

// int32 GridSize = 26;
inline void BattleParamTemplate::clear_gridsize() {
  gridsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_gridsize() const {
  return gridsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::gridsize() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.GridSize)
  return _internal_gridsize();
}
inline void BattleParamTemplate::_internal_set_gridsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gridsize_ = value;
}
inline void BattleParamTemplate::set_gridsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gridsize(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.GridSize)
}

// int32 LordGrid = 27;
inline void BattleParamTemplate::clear_lordgrid() {
  lordgrid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_lordgrid() const {
  return lordgrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::lordgrid() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.LordGrid)
  return _internal_lordgrid();
}
inline void BattleParamTemplate::_internal_set_lordgrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lordgrid_ = value;
}
inline void BattleParamTemplate::set_lordgrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lordgrid(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.LordGrid)
}

// int32 SkillMoveTime = 28;
inline void BattleParamTemplate::clear_skillmovetime() {
  skillmovetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_skillmovetime() const {
  return skillmovetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::skillmovetime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.SkillMoveTime)
  return _internal_skillmovetime();
}
inline void BattleParamTemplate::_internal_set_skillmovetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  skillmovetime_ = value;
}
inline void BattleParamTemplate::set_skillmovetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_skillmovetime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.SkillMoveTime)
}

// int32 SkillFlashTime = 29;
inline void BattleParamTemplate::clear_skillflashtime() {
  skillflashtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_skillflashtime() const {
  return skillflashtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::skillflashtime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.SkillFlashTime)
  return _internal_skillflashtime();
}
inline void BattleParamTemplate::_internal_set_skillflashtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  skillflashtime_ = value;
}
inline void BattleParamTemplate::set_skillflashtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_skillflashtime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.SkillFlashTime)
}

// int32 MonsterDropRange = 30;
inline void BattleParamTemplate::clear_monsterdroprange() {
  monsterdroprange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_monsterdroprange() const {
  return monsterdroprange_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::monsterdroprange() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.MonsterDropRange)
  return _internal_monsterdroprange();
}
inline void BattleParamTemplate::_internal_set_monsterdroprange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monsterdroprange_ = value;
}
inline void BattleParamTemplate::set_monsterdroprange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monsterdroprange(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.MonsterDropRange)
}

// int32 OffsetDistance = 31;
inline void BattleParamTemplate::clear_offsetdistance() {
  offsetdistance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_offsetdistance() const {
  return offsetdistance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::offsetdistance() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.OffsetDistance)
  return _internal_offsetdistance();
}
inline void BattleParamTemplate::_internal_set_offsetdistance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offsetdistance_ = value;
}
inline void BattleParamTemplate::set_offsetdistance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offsetdistance(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.OffsetDistance)
}

// int32 DropItemStayTime = 32;
inline void BattleParamTemplate::clear_dropitemstaytime() {
  dropitemstaytime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_dropitemstaytime() const {
  return dropitemstaytime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::dropitemstaytime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.DropItemStayTime)
  return _internal_dropitemstaytime();
}
inline void BattleParamTemplate::_internal_set_dropitemstaytime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropitemstaytime_ = value;
}
inline void BattleParamTemplate::set_dropitemstaytime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropitemstaytime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.DropItemStayTime)
}

// int32 BannerStayMaxtime = 33;
inline void BattleParamTemplate::clear_bannerstaymaxtime() {
  bannerstaymaxtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_bannerstaymaxtime() const {
  return bannerstaymaxtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::bannerstaymaxtime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BannerStayMaxtime)
  return _internal_bannerstaymaxtime();
}
inline void BattleParamTemplate::_internal_set_bannerstaymaxtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bannerstaymaxtime_ = value;
}
inline void BattleParamTemplate::set_bannerstaymaxtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bannerstaymaxtime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BannerStayMaxtime)
}

// int32 LordMoveSpeed = 34;
inline void BattleParamTemplate::clear_lordmovespeed() {
  lordmovespeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_lordmovespeed() const {
  return lordmovespeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::lordmovespeed() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.LordMoveSpeed)
  return _internal_lordmovespeed();
}
inline void BattleParamTemplate::_internal_set_lordmovespeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lordmovespeed_ = value;
}
inline void BattleParamTemplate::set_lordmovespeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lordmovespeed(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.LordMoveSpeed)
}

// int32 DropItemRange = 35;
inline void BattleParamTemplate::clear_dropitemrange() {
  dropitemrange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_dropitemrange() const {
  return dropitemrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::dropitemrange() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.DropItemRange)
  return _internal_dropitemrange();
}
inline void BattleParamTemplate::_internal_set_dropitemrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropitemrange_ = value;
}
inline void BattleParamTemplate::set_dropitemrange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropitemrange(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.DropItemRange)
}

// int32 MaxRoom = 36;
inline void BattleParamTemplate::clear_maxroom() {
  maxroom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_maxroom() const {
  return maxroom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::maxroom() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.MaxRoom)
  return _internal_maxroom();
}
inline void BattleParamTemplate::_internal_set_maxroom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxroom_ = value;
}
inline void BattleParamTemplate::set_maxroom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxroom(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.MaxRoom)
}

// int32 LordHealthFactor = 37;
inline void BattleParamTemplate::clear_lordhealthfactor() {
  lordhealthfactor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_lordhealthfactor() const {
  return lordhealthfactor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::lordhealthfactor() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.LordHealthFactor)
  return _internal_lordhealthfactor();
}
inline void BattleParamTemplate::_internal_set_lordhealthfactor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lordhealthfactor_ = value;
}
inline void BattleParamTemplate::set_lordhealthfactor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lordhealthfactor(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.LordHealthFactor)
}

// repeated int32 RuneRefreshPrices = 38;
inline int BattleParamTemplate::_internal_runerefreshprices_size() const {
  return runerefreshprices_.size();
}
inline int BattleParamTemplate::runerefreshprices_size() const {
  return _internal_runerefreshprices_size();
}
inline void BattleParamTemplate::clear_runerefreshprices() {
  runerefreshprices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_runerefreshprices(int index) const {
  return runerefreshprices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::runerefreshprices(int index) const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.RuneRefreshPrices)
  return _internal_runerefreshprices(index);
}
inline void BattleParamTemplate::set_runerefreshprices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  runerefreshprices_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.RuneRefreshPrices)
}
inline void BattleParamTemplate::_internal_add_runerefreshprices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  runerefreshprices_.Add(value);
}
inline void BattleParamTemplate::add_runerefreshprices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_runerefreshprices(value);
  // @@protoc_insertion_point(field_add:Config.BattleParamTemplate.RuneRefreshPrices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleParamTemplate::_internal_runerefreshprices() const {
  return runerefreshprices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleParamTemplate::runerefreshprices() const {
  // @@protoc_insertion_point(field_list:Config.BattleParamTemplate.RuneRefreshPrices)
  return _internal_runerefreshprices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleParamTemplate::_internal_mutable_runerefreshprices() {
  return &runerefreshprices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleParamTemplate::mutable_runerefreshprices() {
  // @@protoc_insertion_point(field_mutable_list:Config.BattleParamTemplate.RuneRefreshPrices)
  return _internal_mutable_runerefreshprices();
}

// int32 HeroMaxRuneCount = 39;
inline void BattleParamTemplate::clear_heromaxrunecount() {
  heromaxrunecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_heromaxrunecount() const {
  return heromaxrunecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::heromaxrunecount() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.HeroMaxRuneCount)
  return _internal_heromaxrunecount();
}
inline void BattleParamTemplate::_internal_set_heromaxrunecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heromaxrunecount_ = value;
}
inline void BattleParamTemplate::set_heromaxrunecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heromaxrunecount(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.HeroMaxRuneCount)
}

// int32 MaxSoulStampDemand = 40;
inline void BattleParamTemplate::clear_maxsoulstampdemand() {
  maxsoulstampdemand_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_maxsoulstampdemand() const {
  return maxsoulstampdemand_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::maxsoulstampdemand() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.MaxSoulStampDemand)
  return _internal_maxsoulstampdemand();
}
inline void BattleParamTemplate::_internal_set_maxsoulstampdemand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxsoulstampdemand_ = value;
}
inline void BattleParamTemplate::set_maxsoulstampdemand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxsoulstampdemand(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.MaxSoulStampDemand)
}

// double SoulStampDemandFactor = 41;
inline void BattleParamTemplate::clear_soulstampdemandfactor() {
  soulstampdemandfactor_ = 0;
}
inline double BattleParamTemplate::_internal_soulstampdemandfactor() const {
  return soulstampdemandfactor_;
}
inline double BattleParamTemplate::soulstampdemandfactor() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.SoulStampDemandFactor)
  return _internal_soulstampdemandfactor();
}
inline void BattleParamTemplate::_internal_set_soulstampdemandfactor(double value) {
  
  soulstampdemandfactor_ = value;
}
inline void BattleParamTemplate::set_soulstampdemandfactor(double value) {
  _internal_set_soulstampdemandfactor(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.SoulStampDemandFactor)
}

// int32 BagCapacity = 42;
inline void BattleParamTemplate::clear_bagcapacity() {
  bagcapacity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_bagcapacity() const {
  return bagcapacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::bagcapacity() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BagCapacity)
  return _internal_bagcapacity();
}
inline void BattleParamTemplate::_internal_set_bagcapacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bagcapacity_ = value;
}
inline void BattleParamTemplate::set_bagcapacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bagcapacity(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BagCapacity)
}

// int32 ResolveFactor = 43;
inline void BattleParamTemplate::clear_resolvefactor() {
  resolvefactor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_resolvefactor() const {
  return resolvefactor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::resolvefactor() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.ResolveFactor)
  return _internal_resolvefactor();
}
inline void BattleParamTemplate::_internal_set_resolvefactor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resolvefactor_ = value;
}
inline void BattleParamTemplate::set_resolvefactor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resolvefactor(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.ResolveFactor)
}

// int32 SkillFadeOutTime = 44;
inline void BattleParamTemplate::clear_skillfadeouttime() {
  skillfadeouttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_skillfadeouttime() const {
  return skillfadeouttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::skillfadeouttime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.SkillFadeOutTime)
  return _internal_skillfadeouttime();
}
inline void BattleParamTemplate::_internal_set_skillfadeouttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  skillfadeouttime_ = value;
}
inline void BattleParamTemplate::set_skillfadeouttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_skillfadeouttime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.SkillFadeOutTime)
}

// int32 PvpEnemyLordGrid = 45;
inline void BattleParamTemplate::clear_pvpenemylordgrid() {
  pvpenemylordgrid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_pvpenemylordgrid() const {
  return pvpenemylordgrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::pvpenemylordgrid() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PvpEnemyLordGrid)
  return _internal_pvpenemylordgrid();
}
inline void BattleParamTemplate::_internal_set_pvpenemylordgrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pvpenemylordgrid_ = value;
}
inline void BattleParamTemplate::set_pvpenemylordgrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pvpenemylordgrid(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PvpEnemyLordGrid)
}

// repeated int32 PvpSceneBuffs = 46;
inline int BattleParamTemplate::_internal_pvpscenebuffs_size() const {
  return pvpscenebuffs_.size();
}
inline int BattleParamTemplate::pvpscenebuffs_size() const {
  return _internal_pvpscenebuffs_size();
}
inline void BattleParamTemplate::clear_pvpscenebuffs() {
  pvpscenebuffs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_pvpscenebuffs(int index) const {
  return pvpscenebuffs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::pvpscenebuffs(int index) const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PvpSceneBuffs)
  return _internal_pvpscenebuffs(index);
}
inline void BattleParamTemplate::set_pvpscenebuffs(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  pvpscenebuffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PvpSceneBuffs)
}
inline void BattleParamTemplate::_internal_add_pvpscenebuffs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  pvpscenebuffs_.Add(value);
}
inline void BattleParamTemplate::add_pvpscenebuffs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_pvpscenebuffs(value);
  // @@protoc_insertion_point(field_add:Config.BattleParamTemplate.PvpSceneBuffs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleParamTemplate::_internal_pvpscenebuffs() const {
  return pvpscenebuffs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleParamTemplate::pvpscenebuffs() const {
  // @@protoc_insertion_point(field_list:Config.BattleParamTemplate.PvpSceneBuffs)
  return _internal_pvpscenebuffs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleParamTemplate::_internal_mutable_pvpscenebuffs() {
  return &pvpscenebuffs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleParamTemplate::mutable_pvpscenebuffs() {
  // @@protoc_insertion_point(field_mutable_list:Config.BattleParamTemplate.PvpSceneBuffs)
  return _internal_mutable_pvpscenebuffs();
}

// int32 PvpFirstHandWaiting = 47;
inline void BattleParamTemplate::clear_pvpfirsthandwaiting() {
  pvpfirsthandwaiting_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_pvpfirsthandwaiting() const {
  return pvpfirsthandwaiting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::pvpfirsthandwaiting() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PvpFirstHandWaiting)
  return _internal_pvpfirsthandwaiting();
}
inline void BattleParamTemplate::_internal_set_pvpfirsthandwaiting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pvpfirsthandwaiting_ = value;
}
inline void BattleParamTemplate::set_pvpfirsthandwaiting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pvpfirsthandwaiting(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PvpFirstHandWaiting)
}

// int32 PvpSecondHandWaiting = 48;
inline void BattleParamTemplate::clear_pvpsecondhandwaiting() {
  pvpsecondhandwaiting_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_pvpsecondhandwaiting() const {
  return pvpsecondhandwaiting_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::pvpsecondhandwaiting() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PvpSecondHandWaiting)
  return _internal_pvpsecondhandwaiting();
}
inline void BattleParamTemplate::_internal_set_pvpsecondhandwaiting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pvpsecondhandwaiting_ = value;
}
inline void BattleParamTemplate::set_pvpsecondhandwaiting(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pvpsecondhandwaiting(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PvpSecondHandWaiting)
}

// int32 PvpStartCountDown = 49;
inline void BattleParamTemplate::clear_pvpstartcountdown() {
  pvpstartcountdown_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_pvpstartcountdown() const {
  return pvpstartcountdown_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::pvpstartcountdown() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PvpStartCountDown)
  return _internal_pvpstartcountdown();
}
inline void BattleParamTemplate::_internal_set_pvpstartcountdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pvpstartcountdown_ = value;
}
inline void BattleParamTemplate::set_pvpstartcountdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pvpstartcountdown(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PvpStartCountDown)
}

// int32 PvpOverCountDown = 50;
inline void BattleParamTemplate::clear_pvpovercountdown() {
  pvpovercountdown_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_pvpovercountdown() const {
  return pvpovercountdown_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::pvpovercountdown() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PvpOverCountDown)
  return _internal_pvpovercountdown();
}
inline void BattleParamTemplate::_internal_set_pvpovercountdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pvpovercountdown_ = value;
}
inline void BattleParamTemplate::set_pvpovercountdown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pvpovercountdown(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PvpOverCountDown)
}

// .Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;
inline bool BattleParamTemplate::_internal_has_soulinterest() const {
  return this != internal_default_instance() && soulinterest_ != nullptr;
}
inline bool BattleParamTemplate::has_soulinterest() const {
  return _internal_has_soulinterest();
}
inline void BattleParamTemplate::clear_soulinterest() {
  if (GetArena() == nullptr && soulinterest_ != nullptr) {
    delete soulinterest_;
  }
  soulinterest_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Soulinterest_& BattleParamTemplate::_internal_soulinterest() const {
  const ::Config::BattleParamTemplate_Soulinterest_* p = soulinterest_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Soulinterest_&>(
      ::Config::_BattleParamTemplate_Soulinterest__default_instance_);
}
inline const ::Config::BattleParamTemplate_Soulinterest_& BattleParamTemplate::soulinterest() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.SoulInterest)
  return _internal_soulinterest();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_soulinterest(
    ::Config::BattleParamTemplate_Soulinterest_* soulinterest) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soulinterest_);
  }
  soulinterest_ = soulinterest;
  if (soulinterest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.SoulInterest)
}
inline ::Config::BattleParamTemplate_Soulinterest_* BattleParamTemplate::release_soulinterest() {
  
  ::Config::BattleParamTemplate_Soulinterest_* temp = soulinterest_;
  soulinterest_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Soulinterest_* BattleParamTemplate::unsafe_arena_release_soulinterest() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.SoulInterest)
  
  ::Config::BattleParamTemplate_Soulinterest_* temp = soulinterest_;
  soulinterest_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Soulinterest_* BattleParamTemplate::_internal_mutable_soulinterest() {
  
  if (soulinterest_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Soulinterest_>(GetArena());
    soulinterest_ = p;
  }
  return soulinterest_;
}
inline ::Config::BattleParamTemplate_Soulinterest_* BattleParamTemplate::mutable_soulinterest() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.SoulInterest)
  return _internal_mutable_soulinterest();
}
inline void BattleParamTemplate::set_allocated_soulinterest(::Config::BattleParamTemplate_Soulinterest_* soulinterest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete soulinterest_;
  }
  if (soulinterest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(soulinterest);
    if (message_arena != submessage_arena) {
      soulinterest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soulinterest, submessage_arena);
    }
    
  } else {
    
  }
  soulinterest_ = soulinterest;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.SoulInterest)
}

// int32 BattleHeroDieValue = 52;
inline void BattleParamTemplate::clear_battleherodievalue() {
  battleherodievalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battleherodievalue() const {
  return battleherodievalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battleherodievalue() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleHeroDieValue)
  return _internal_battleherodievalue();
}
inline void BattleParamTemplate::_internal_set_battleherodievalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battleherodievalue_ = value;
}
inline void BattleParamTemplate::set_battleherodievalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battleherodievalue(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleHeroDieValue)
}

// int32 BattleMaxTimeValue = 53;
inline void BattleParamTemplate::clear_battlemaxtimevalue() {
  battlemaxtimevalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battlemaxtimevalue() const {
  return battlemaxtimevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battlemaxtimevalue() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleMaxTimeValue)
  return _internal_battlemaxtimevalue();
}
inline void BattleParamTemplate::_internal_set_battlemaxtimevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battlemaxtimevalue_ = value;
}
inline void BattleParamTemplate::set_battlemaxtimevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battlemaxtimevalue(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleMaxTimeValue)
}

// int32 BattleJumpTime = 54;
inline void BattleParamTemplate::clear_battlejumptime() {
  battlejumptime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battlejumptime() const {
  return battlejumptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battlejumptime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleJumpTime)
  return _internal_battlejumptime();
}
inline void BattleParamTemplate::_internal_set_battlejumptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battlejumptime_ = value;
}
inline void BattleParamTemplate::set_battlejumptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battlejumptime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleJumpTime)
}

// int32 ProfessionUpgradeCount = 55;
inline void BattleParamTemplate::clear_professionupgradecount() {
  professionupgradecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_professionupgradecount() const {
  return professionupgradecount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::professionupgradecount() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.ProfessionUpgradeCount)
  return _internal_professionupgradecount();
}
inline void BattleParamTemplate::_internal_set_professionupgradecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  professionupgradecount_ = value;
}
inline void BattleParamTemplate::set_professionupgradecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_professionupgradecount(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.ProfessionUpgradeCount)
}

// int32 HandCardLimit = 56;
inline void BattleParamTemplate::clear_handcardlimit() {
  handcardlimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_handcardlimit() const {
  return handcardlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::handcardlimit() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.HandCardLimit)
  return _internal_handcardlimit();
}
inline void BattleParamTemplate::_internal_set_handcardlimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  handcardlimit_ = value;
}
inline void BattleParamTemplate::set_handcardlimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_handcardlimit(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.HandCardLimit)
}

// repeated int32 ForgetCosts = 57;
inline int BattleParamTemplate::_internal_forgetcosts_size() const {
  return forgetcosts_.size();
}
inline int BattleParamTemplate::forgetcosts_size() const {
  return _internal_forgetcosts_size();
}
inline void BattleParamTemplate::clear_forgetcosts() {
  forgetcosts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_forgetcosts(int index) const {
  return forgetcosts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::forgetcosts(int index) const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.ForgetCosts)
  return _internal_forgetcosts(index);
}
inline void BattleParamTemplate::set_forgetcosts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  forgetcosts_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.ForgetCosts)
}
inline void BattleParamTemplate::_internal_add_forgetcosts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  forgetcosts_.Add(value);
}
inline void BattleParamTemplate::add_forgetcosts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_forgetcosts(value);
  // @@protoc_insertion_point(field_add:Config.BattleParamTemplate.ForgetCosts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleParamTemplate::_internal_forgetcosts() const {
  return forgetcosts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleParamTemplate::forgetcosts() const {
  // @@protoc_insertion_point(field_list:Config.BattleParamTemplate.ForgetCosts)
  return _internal_forgetcosts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleParamTemplate::_internal_mutable_forgetcosts() {
  return &forgetcosts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleParamTemplate::mutable_forgetcosts() {
  // @@protoc_insertion_point(field_mutable_list:Config.BattleParamTemplate.ForgetCosts)
  return _internal_mutable_forgetcosts();
}

// repeated int32 PrayCosts = 58;
inline int BattleParamTemplate::_internal_praycosts_size() const {
  return praycosts_.size();
}
inline int BattleParamTemplate::praycosts_size() const {
  return _internal_praycosts_size();
}
inline void BattleParamTemplate::clear_praycosts() {
  praycosts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_praycosts(int index) const {
  return praycosts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::praycosts(int index) const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PrayCosts)
  return _internal_praycosts(index);
}
inline void BattleParamTemplate::set_praycosts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  praycosts_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PrayCosts)
}
inline void BattleParamTemplate::_internal_add_praycosts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  praycosts_.Add(value);
}
inline void BattleParamTemplate::add_praycosts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_praycosts(value);
  // @@protoc_insertion_point(field_add:Config.BattleParamTemplate.PrayCosts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleParamTemplate::_internal_praycosts() const {
  return praycosts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleParamTemplate::praycosts() const {
  // @@protoc_insertion_point(field_list:Config.BattleParamTemplate.PrayCosts)
  return _internal_praycosts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleParamTemplate::_internal_mutable_praycosts() {
  return &praycosts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleParamTemplate::mutable_praycosts() {
  // @@protoc_insertion_point(field_mutable_list:Config.BattleParamTemplate.PrayCosts)
  return _internal_mutable_praycosts();
}

// int32 CardLevelUpNeedNum = 59;
inline void BattleParamTemplate::clear_cardlevelupneednum() {
  cardlevelupneednum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_cardlevelupneednum() const {
  return cardlevelupneednum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::cardlevelupneednum() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.CardLevelUpNeedNum)
  return _internal_cardlevelupneednum();
}
inline void BattleParamTemplate::_internal_set_cardlevelupneednum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardlevelupneednum_ = value;
}
inline void BattleParamTemplate::set_cardlevelupneednum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cardlevelupneednum(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.CardLevelUpNeedNum)
}

// int32 CardUseToDrawUnique = 60;
inline void BattleParamTemplate::clear_cardusetodrawunique() {
  cardusetodrawunique_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_cardusetodrawunique() const {
  return cardusetodrawunique_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::cardusetodrawunique() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.CardUseToDrawUnique)
  return _internal_cardusetodrawunique();
}
inline void BattleParamTemplate::_internal_set_cardusetodrawunique(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardusetodrawunique_ = value;
}
inline void BattleParamTemplate::set_cardusetodrawunique(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cardusetodrawunique(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.CardUseToDrawUnique)
}

// int32 OriginalHandCardLimit = 61;
inline void BattleParamTemplate::clear_originalhandcardlimit() {
  originalhandcardlimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_originalhandcardlimit() const {
  return originalhandcardlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::originalhandcardlimit() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.OriginalHandCardLimit)
  return _internal_originalhandcardlimit();
}
inline void BattleParamTemplate::_internal_set_originalhandcardlimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originalhandcardlimit_ = value;
}
inline void BattleParamTemplate::set_originalhandcardlimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originalhandcardlimit(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.OriginalHandCardLimit)
}

// int32 UniqueSkillCardLimitCountOT = 62;
inline void BattleParamTemplate::clear_uniqueskillcardlimitcountot() {
  uniqueskillcardlimitcountot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_uniqueskillcardlimitcountot() const {
  return uniqueskillcardlimitcountot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::uniqueskillcardlimitcountot() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.UniqueSkillCardLimitCountOT)
  return _internal_uniqueskillcardlimitcountot();
}
inline void BattleParamTemplate::_internal_set_uniqueskillcardlimitcountot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uniqueskillcardlimitcountot_ = value;
}
inline void BattleParamTemplate::set_uniqueskillcardlimitcountot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uniqueskillcardlimitcountot(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.UniqueSkillCardLimitCountOT)
}

// int32 DropCoefficientInEliteRoom = 63;
inline void BattleParamTemplate::clear_dropcoefficientineliteroom() {
  dropcoefficientineliteroom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_dropcoefficientineliteroom() const {
  return dropcoefficientineliteroom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::dropcoefficientineliteroom() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.DropCoefficientInEliteRoom)
  return _internal_dropcoefficientineliteroom();
}
inline void BattleParamTemplate::_internal_set_dropcoefficientineliteroom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropcoefficientineliteroom_ = value;
}
inline void BattleParamTemplate::set_dropcoefficientineliteroom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropcoefficientineliteroom(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.DropCoefficientInEliteRoom)
}

// int32 DropCoefficientInBossRoom = 64;
inline void BattleParamTemplate::clear_dropcoefficientinbossroom() {
  dropcoefficientinbossroom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_dropcoefficientinbossroom() const {
  return dropcoefficientinbossroom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::dropcoefficientinbossroom() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.DropCoefficientInBossRoom)
  return _internal_dropcoefficientinbossroom();
}
inline void BattleParamTemplate::_internal_set_dropcoefficientinbossroom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dropcoefficientinbossroom_ = value;
}
inline void BattleParamTemplate::set_dropcoefficientinbossroom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dropcoefficientinbossroom(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.DropCoefficientInBossRoom)
}

// int32 HeroRebornTime = 65;
inline void BattleParamTemplate::clear_heroreborntime() {
  heroreborntime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_heroreborntime() const {
  return heroreborntime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::heroreborntime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.HeroRebornTime)
  return _internal_heroreborntime();
}
inline void BattleParamTemplate::_internal_set_heroreborntime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heroreborntime_ = value;
}
inline void BattleParamTemplate::set_heroreborntime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heroreborntime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.HeroRebornTime)
}

// int32 HeroRebornHpCostFactor = 66;
inline void BattleParamTemplate::clear_herorebornhpcostfactor() {
  herorebornhpcostfactor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_herorebornhpcostfactor() const {
  return herorebornhpcostfactor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::herorebornhpcostfactor() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.HeroRebornHpCostFactor)
  return _internal_herorebornhpcostfactor();
}
inline void BattleParamTemplate::_internal_set_herorebornhpcostfactor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  herorebornhpcostfactor_ = value;
}
inline void BattleParamTemplate::set_herorebornhpcostfactor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_herorebornhpcostfactor(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.HeroRebornHpCostFactor)
}

// int32 OriginalHandCardNum = 67;
inline void BattleParamTemplate::clear_originalhandcardnum() {
  originalhandcardnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_originalhandcardnum() const {
  return originalhandcardnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::originalhandcardnum() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.OriginalHandCardNum)
  return _internal_originalhandcardnum();
}
inline void BattleParamTemplate::_internal_set_originalhandcardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  originalhandcardnum_ = value;
}
inline void BattleParamTemplate::set_originalhandcardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_originalhandcardnum(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.OriginalHandCardNum)
}

// int32 ChallengeFirstHandChance = 68;
inline void BattleParamTemplate::clear_challengefirsthandchance() {
  challengefirsthandchance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_challengefirsthandchance() const {
  return challengefirsthandchance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::challengefirsthandchance() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.ChallengeFirstHandChance)
  return _internal_challengefirsthandchance();
}
inline void BattleParamTemplate::_internal_set_challengefirsthandchance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  challengefirsthandchance_ = value;
}
inline void BattleParamTemplate::set_challengefirsthandchance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_challengefirsthandchance(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.ChallengeFirstHandChance)
}

// int32 PvpChallengeTime = 69;
inline void BattleParamTemplate::clear_pvpchallengetime() {
  pvpchallengetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_pvpchallengetime() const {
  return pvpchallengetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::pvpchallengetime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PvpChallengeTime)
  return _internal_pvpchallengetime();
}
inline void BattleParamTemplate::_internal_set_pvpchallengetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pvpchallengetime_ = value;
}
inline void BattleParamTemplate::set_pvpchallengetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pvpchallengetime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PvpChallengeTime)
}

// int32 FirstHandEnergyCardCount = 70;
inline void BattleParamTemplate::clear_firsthandenergycardcount() {
  firsthandenergycardcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_firsthandenergycardcount() const {
  return firsthandenergycardcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::firsthandenergycardcount() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.FirstHandEnergyCardCount)
  return _internal_firsthandenergycardcount();
}
inline void BattleParamTemplate::_internal_set_firsthandenergycardcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  firsthandenergycardcount_ = value;
}
inline void BattleParamTemplate::set_firsthandenergycardcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_firsthandenergycardcount(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.FirstHandEnergyCardCount)
}

// int32 SecondtHandEnergyCardCount = 71;
inline void BattleParamTemplate::clear_secondthandenergycardcount() {
  secondthandenergycardcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_secondthandenergycardcount() const {
  return secondthandenergycardcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::secondthandenergycardcount() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.SecondtHandEnergyCardCount)
  return _internal_secondthandenergycardcount();
}
inline void BattleParamTemplate::_internal_set_secondthandenergycardcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  secondthandenergycardcount_ = value;
}
inline void BattleParamTemplate::set_secondthandenergycardcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_secondthandenergycardcount(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.SecondtHandEnergyCardCount)
}

// int32 PvpFirstHandTime = 72;
inline void BattleParamTemplate::clear_pvpfirsthandtime() {
  pvpfirsthandtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_pvpfirsthandtime() const {
  return pvpfirsthandtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::pvpfirsthandtime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PvpFirstHandTime)
  return _internal_pvpfirsthandtime();
}
inline void BattleParamTemplate::_internal_set_pvpfirsthandtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pvpfirsthandtime_ = value;
}
inline void BattleParamTemplate::set_pvpfirsthandtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pvpfirsthandtime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PvpFirstHandTime)
}

// int32 PvpSecondHandTime = 73;
inline void BattleParamTemplate::clear_pvpsecondhandtime() {
  pvpsecondhandtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_pvpsecondhandtime() const {
  return pvpsecondhandtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::pvpsecondhandtime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PvpSecondHandTime)
  return _internal_pvpsecondhandtime();
}
inline void BattleParamTemplate::_internal_set_pvpsecondhandtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pvpsecondhandtime_ = value;
}
inline void BattleParamTemplate::set_pvpsecondhandtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pvpsecondhandtime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PvpSecondHandTime)
}

// int32 LordCardSpacing = 74;
inline void BattleParamTemplate::clear_lordcardspacing() {
  lordcardspacing_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_lordcardspacing() const {
  return lordcardspacing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::lordcardspacing() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.LordCardSpacing)
  return _internal_lordcardspacing();
}
inline void BattleParamTemplate::_internal_set_lordcardspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lordcardspacing_ = value;
}
inline void BattleParamTemplate::set_lordcardspacing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lordcardspacing(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.LordCardSpacing)
}

// int32 EnergyCardCheckUp = 75;
inline void BattleParamTemplate::clear_energycardcheckup() {
  energycardcheckup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_energycardcheckup() const {
  return energycardcheckup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::energycardcheckup() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.EnergyCardCheckUp)
  return _internal_energycardcheckup();
}
inline void BattleParamTemplate::_internal_set_energycardcheckup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  energycardcheckup_ = value;
}
inline void BattleParamTemplate::set_energycardcheckup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_energycardcheckup(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.EnergyCardCheckUp)
}

// int32 PvpOriginalHandCardNum = 76;
inline void BattleParamTemplate::clear_pvporiginalhandcardnum() {
  pvporiginalhandcardnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_pvporiginalhandcardnum() const {
  return pvporiginalhandcardnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::pvporiginalhandcardnum() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.PvpOriginalHandCardNum)
  return _internal_pvporiginalhandcardnum();
}
inline void BattleParamTemplate::_internal_set_pvporiginalhandcardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pvporiginalhandcardnum_ = value;
}
inline void BattleParamTemplate::set_pvporiginalhandcardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pvporiginalhandcardnum(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.PvpOriginalHandCardNum)
}

// repeated double BattleSpeedUpRates = 77;
inline int BattleParamTemplate::_internal_battlespeeduprates_size() const {
  return battlespeeduprates_.size();
}
inline int BattleParamTemplate::battlespeeduprates_size() const {
  return _internal_battlespeeduprates_size();
}
inline void BattleParamTemplate::clear_battlespeeduprates() {
  battlespeeduprates_.Clear();
}
inline double BattleParamTemplate::_internal_battlespeeduprates(int index) const {
  return battlespeeduprates_.Get(index);
}
inline double BattleParamTemplate::battlespeeduprates(int index) const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleSpeedUpRates)
  return _internal_battlespeeduprates(index);
}
inline void BattleParamTemplate::set_battlespeeduprates(int index, double value) {
  battlespeeduprates_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleSpeedUpRates)
}
inline void BattleParamTemplate::_internal_add_battlespeeduprates(double value) {
  battlespeeduprates_.Add(value);
}
inline void BattleParamTemplate::add_battlespeeduprates(double value) {
  _internal_add_battlespeeduprates(value);
  // @@protoc_insertion_point(field_add:Config.BattleParamTemplate.BattleSpeedUpRates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BattleParamTemplate::_internal_battlespeeduprates() const {
  return battlespeeduprates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BattleParamTemplate::battlespeeduprates() const {
  // @@protoc_insertion_point(field_list:Config.BattleParamTemplate.BattleSpeedUpRates)
  return _internal_battlespeeduprates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BattleParamTemplate::_internal_mutable_battlespeeduprates() {
  return &battlespeeduprates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BattleParamTemplate::mutable_battlespeeduprates() {
  // @@protoc_insertion_point(field_mutable_list:Config.BattleParamTemplate.BattleSpeedUpRates)
  return _internal_mutable_battlespeeduprates();
}

// int32 HangUpIntervalTime = 78;
inline void BattleParamTemplate::clear_hangupintervaltime() {
  hangupintervaltime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_hangupintervaltime() const {
  return hangupintervaltime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::hangupintervaltime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.HangUpIntervalTime)
  return _internal_hangupintervaltime();
}
inline void BattleParamTemplate::_internal_set_hangupintervaltime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hangupintervaltime_ = value;
}
inline void BattleParamTemplate::set_hangupintervaltime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hangupintervaltime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.HangUpIntervalTime)
}

// int32 NextWaveAppearInterval = 79;
inline void BattleParamTemplate::clear_nextwaveappearinterval() {
  nextwaveappearinterval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_nextwaveappearinterval() const {
  return nextwaveappearinterval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::nextwaveappearinterval() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.NextWaveAppearInterval)
  return _internal_nextwaveappearinterval();
}
inline void BattleParamTemplate::_internal_set_nextwaveappearinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nextwaveappearinterval_ = value;
}
inline void BattleParamTemplate::set_nextwaveappearinterval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nextwaveappearinterval(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.NextWaveAppearInterval)
}

// .Config.BattleParamTemplate.Dice_ Dice = 80;
inline bool BattleParamTemplate::_internal_has_dice() const {
  return this != internal_default_instance() && dice_ != nullptr;
}
inline bool BattleParamTemplate::has_dice() const {
  return _internal_has_dice();
}
inline void BattleParamTemplate::clear_dice() {
  if (GetArena() == nullptr && dice_ != nullptr) {
    delete dice_;
  }
  dice_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Dice_& BattleParamTemplate::_internal_dice() const {
  const ::Config::BattleParamTemplate_Dice_* p = dice_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Dice_&>(
      ::Config::_BattleParamTemplate_Dice__default_instance_);
}
inline const ::Config::BattleParamTemplate_Dice_& BattleParamTemplate::dice() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.Dice)
  return _internal_dice();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_dice(
    ::Config::BattleParamTemplate_Dice_* dice) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dice_);
  }
  dice_ = dice;
  if (dice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.Dice)
}
inline ::Config::BattleParamTemplate_Dice_* BattleParamTemplate::release_dice() {
  
  ::Config::BattleParamTemplate_Dice_* temp = dice_;
  dice_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Dice_* BattleParamTemplate::unsafe_arena_release_dice() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.Dice)
  
  ::Config::BattleParamTemplate_Dice_* temp = dice_;
  dice_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Dice_* BattleParamTemplate::_internal_mutable_dice() {
  
  if (dice_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Dice_>(GetArena());
    dice_ = p;
  }
  return dice_;
}
inline ::Config::BattleParamTemplate_Dice_* BattleParamTemplate::mutable_dice() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.Dice)
  return _internal_mutable_dice();
}
inline void BattleParamTemplate::set_allocated_dice(::Config::BattleParamTemplate_Dice_* dice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dice_;
  }
  if (dice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dice);
    if (message_arena != submessage_arena) {
      dice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dice, submessage_arena);
    }
    
  } else {
    
  }
  dice_ = dice;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.Dice)
}

// int32 RemainsCompoundOriginalCount = 81;
inline void BattleParamTemplate::clear_remainscompoundoriginalcount() {
  remainscompoundoriginalcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_remainscompoundoriginalcount() const {
  return remainscompoundoriginalcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::remainscompoundoriginalcount() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.RemainsCompoundOriginalCount)
  return _internal_remainscompoundoriginalcount();
}
inline void BattleParamTemplate::_internal_set_remainscompoundoriginalcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remainscompoundoriginalcount_ = value;
}
inline void BattleParamTemplate::set_remainscompoundoriginalcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remainscompoundoriginalcount(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.RemainsCompoundOriginalCount)
}

// .Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;
inline bool BattleParamTemplate::_internal_has_mazevaluefactor() const {
  return this != internal_default_instance() && mazevaluefactor_ != nullptr;
}
inline bool BattleParamTemplate::has_mazevaluefactor() const {
  return _internal_has_mazevaluefactor();
}
inline void BattleParamTemplate::clear_mazevaluefactor() {
  if (GetArena() == nullptr && mazevaluefactor_ != nullptr) {
    delete mazevaluefactor_;
  }
  mazevaluefactor_ = nullptr;
}
inline const ::Config::BattleParamTemplate_Mazevaluefactor_& BattleParamTemplate::_internal_mazevaluefactor() const {
  const ::Config::BattleParamTemplate_Mazevaluefactor_* p = mazevaluefactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::BattleParamTemplate_Mazevaluefactor_&>(
      ::Config::_BattleParamTemplate_Mazevaluefactor__default_instance_);
}
inline const ::Config::BattleParamTemplate_Mazevaluefactor_& BattleParamTemplate::mazevaluefactor() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.MazeValueFactor)
  return _internal_mazevaluefactor();
}
inline void BattleParamTemplate::unsafe_arena_set_allocated_mazevaluefactor(
    ::Config::BattleParamTemplate_Mazevaluefactor_* mazevaluefactor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mazevaluefactor_);
  }
  mazevaluefactor_ = mazevaluefactor;
  if (mazevaluefactor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.BattleParamTemplate.MazeValueFactor)
}
inline ::Config::BattleParamTemplate_Mazevaluefactor_* BattleParamTemplate::release_mazevaluefactor() {
  
  ::Config::BattleParamTemplate_Mazevaluefactor_* temp = mazevaluefactor_;
  mazevaluefactor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::BattleParamTemplate_Mazevaluefactor_* BattleParamTemplate::unsafe_arena_release_mazevaluefactor() {
  // @@protoc_insertion_point(field_release:Config.BattleParamTemplate.MazeValueFactor)
  
  ::Config::BattleParamTemplate_Mazevaluefactor_* temp = mazevaluefactor_;
  mazevaluefactor_ = nullptr;
  return temp;
}
inline ::Config::BattleParamTemplate_Mazevaluefactor_* BattleParamTemplate::_internal_mutable_mazevaluefactor() {
  
  if (mazevaluefactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::BattleParamTemplate_Mazevaluefactor_>(GetArena());
    mazevaluefactor_ = p;
  }
  return mazevaluefactor_;
}
inline ::Config::BattleParamTemplate_Mazevaluefactor_* BattleParamTemplate::mutable_mazevaluefactor() {
  // @@protoc_insertion_point(field_mutable:Config.BattleParamTemplate.MazeValueFactor)
  return _internal_mutable_mazevaluefactor();
}
inline void BattleParamTemplate::set_allocated_mazevaluefactor(::Config::BattleParamTemplate_Mazevaluefactor_* mazevaluefactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mazevaluefactor_;
  }
  if (mazevaluefactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mazevaluefactor);
    if (message_arena != submessage_arena) {
      mazevaluefactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mazevaluefactor, submessage_arena);
    }
    
  } else {
    
  }
  mazevaluefactor_ = mazevaluefactor;
  // @@protoc_insertion_point(field_set_allocated:Config.BattleParamTemplate.MazeValueFactor)
}

// int32 BattleDashTime = 83;
inline void BattleParamTemplate::clear_battledashtime() {
  battledashtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battledashtime() const {
  return battledashtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battledashtime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleDashTime)
  return _internal_battledashtime();
}
inline void BattleParamTemplate::_internal_set_battledashtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battledashtime_ = value;
}
inline void BattleParamTemplate::set_battledashtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battledashtime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleDashTime)
}

// int32 BattleDashBackTime = 84;
inline void BattleParamTemplate::clear_battledashbacktime() {
  battledashbacktime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battledashbacktime() const {
  return battledashbacktime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battledashbacktime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleDashBackTime)
  return _internal_battledashbacktime();
}
inline void BattleParamTemplate::_internal_set_battledashbacktime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battledashbacktime_ = value;
}
inline void BattleParamTemplate::set_battledashbacktime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battledashbacktime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleDashBackTime)
}

// int32 BattleRoundSafeTime = 85;
inline void BattleParamTemplate::clear_battleroundsafetime() {
  battleroundsafetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battleroundsafetime() const {
  return battleroundsafetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battleroundsafetime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleRoundSafeTime)
  return _internal_battleroundsafetime();
}
inline void BattleParamTemplate::_internal_set_battleroundsafetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battleroundsafetime_ = value;
}
inline void BattleParamTemplate::set_battleroundsafetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battleroundsafetime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleRoundSafeTime)
}

// int32 BattleWaitNextTime = 86;
inline void BattleParamTemplate::clear_battlewaitnexttime() {
  battlewaitnexttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battlewaitnexttime() const {
  return battlewaitnexttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battlewaitnexttime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleWaitNextTime)
  return _internal_battlewaitnexttime();
}
inline void BattleParamTemplate::_internal_set_battlewaitnexttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battlewaitnexttime_ = value;
}
inline void BattleParamTemplate::set_battlewaitnexttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battlewaitnexttime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleWaitNextTime)
}

// int32 BattleRoundTime = 87;
inline void BattleParamTemplate::clear_battleroundtime() {
  battleroundtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battleroundtime() const {
  return battleroundtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battleroundtime() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleRoundTime)
  return _internal_battleroundtime();
}
inline void BattleParamTemplate::_internal_set_battleroundtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battleroundtime_ = value;
}
inline void BattleParamTemplate::set_battleroundtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battleroundtime(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleRoundTime)
}

// int32 BattleHitFlyForce = 88;
inline void BattleParamTemplate::clear_battlehitflyforce() {
  battlehitflyforce_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battlehitflyforce() const {
  return battlehitflyforce_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battlehitflyforce() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleHitFlyForce)
  return _internal_battlehitflyforce();
}
inline void BattleParamTemplate::_internal_set_battlehitflyforce(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battlehitflyforce_ = value;
}
inline void BattleParamTemplate::set_battlehitflyforce(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battlehitflyforce(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleHitFlyForce)
}

// int32 BattleHitDownForce = 89;
inline void BattleParamTemplate::clear_battlehitdownforce() {
  battlehitdownforce_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battlehitdownforce() const {
  return battlehitdownforce_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battlehitdownforce() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleHitDownForce)
  return _internal_battlehitdownforce();
}
inline void BattleParamTemplate::_internal_set_battlehitdownforce(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battlehitdownforce_ = value;
}
inline void BattleParamTemplate::set_battlehitdownforce(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battlehitdownforce(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleHitDownForce)
}

// int32 BattleHitFlyMaxHeight = 90;
inline void BattleParamTemplate::clear_battlehitflymaxheight() {
  battlehitflymaxheight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battlehitflymaxheight() const {
  return battlehitflymaxheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battlehitflymaxheight() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleHitFlyMaxHeight)
  return _internal_battlehitflymaxheight();
}
inline void BattleParamTemplate::_internal_set_battlehitflymaxheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battlehitflymaxheight_ = value;
}
inline void BattleParamTemplate::set_battlehitflymaxheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battlehitflymaxheight(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleHitFlyMaxHeight)
}

// int32 BattleGravity = 91;
inline void BattleParamTemplate::clear_battlegravity() {
  battlegravity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battlegravity() const {
  return battlegravity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battlegravity() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleGravity)
  return _internal_battlegravity();
}
inline void BattleParamTemplate::_internal_set_battlegravity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battlegravity_ = value;
}
inline void BattleParamTemplate::set_battlegravity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battlegravity(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleGravity)
}

// int32 BattleFlyUpGravity = 92;
inline void BattleParamTemplate::clear_battleflyupgravity() {
  battleflyupgravity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battleflyupgravity() const {
  return battleflyupgravity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battleflyupgravity() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleFlyUpGravity)
  return _internal_battleflyupgravity();
}
inline void BattleParamTemplate::_internal_set_battleflyupgravity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battleflyupgravity_ = value;
}
inline void BattleParamTemplate::set_battleflyupgravity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battleflyupgravity(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleFlyUpGravity)
}

// int32 BattleNearTopGravity = 93;
inline void BattleParamTemplate::clear_battleneartopgravity() {
  battleneartopgravity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battleneartopgravity() const {
  return battleneartopgravity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battleneartopgravity() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleNearTopGravity)
  return _internal_battleneartopgravity();
}
inline void BattleParamTemplate::_internal_set_battleneartopgravity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battleneartopgravity_ = value;
}
inline void BattleParamTemplate::set_battleneartopgravity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battleneartopgravity(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleNearTopGravity)
}

// int32 BattleNearTopSpeed = 94;
inline void BattleParamTemplate::clear_battleneartopspeed() {
  battleneartopspeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::_internal_battleneartopspeed() const {
  return battleneartopspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleParamTemplate::battleneartopspeed() const {
  // @@protoc_insertion_point(field_get:Config.BattleParamTemplate.BattleNearTopSpeed)
  return _internal_battleneartopspeed();
}
inline void BattleParamTemplate::_internal_set_battleneartopspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battleneartopspeed_ = value;
}
inline void BattleParamTemplate::set_battleneartopspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battleneartopspeed(value);
  // @@protoc_insertion_point(field_set:Config.BattleParamTemplate.BattleNearTopSpeed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fBattleParamTemplate_2eproto
