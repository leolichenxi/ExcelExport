// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/BattleParamTemplate.proto

#include "protos/BattleParamTemplate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protos_2fBattleParamTemplate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleParamTemplate_Dice__protos_2fBattleParamTemplate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fBattleParamTemplate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleParamTemplate_Dodgeeffectlimit__protos_2fBattleParamTemplate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fBattleParamTemplate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleParamTemplate_Elementeffectlimit__protos_2fBattleParamTemplate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fBattleParamTemplate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleParamTemplate_Mazevaluefactor__protos_2fBattleParamTemplate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fBattleParamTemplate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleParamTemplate_Soulinterest__protos_2fBattleParamTemplate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protos_2fPosition2Int_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position2Int_protos_2fPosition2Int_2eproto;
namespace Config {
class BattleParamTemplate_Dodgeeffectlimit_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleParamTemplate_Dodgeeffectlimit_> _instance;
} _BattleParamTemplate_Dodgeeffectlimit__default_instance_;
class BattleParamTemplate_Elementeffectlimit_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleParamTemplate_Elementeffectlimit_> _instance;
} _BattleParamTemplate_Elementeffectlimit__default_instance_;
class BattleParamTemplate_Soulinterest_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleParamTemplate_Soulinterest_> _instance;
} _BattleParamTemplate_Soulinterest__default_instance_;
class BattleParamTemplate_Dice_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleParamTemplate_Dice_> _instance;
} _BattleParamTemplate_Dice__default_instance_;
class BattleParamTemplate_Mazevaluefactor_DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleParamTemplate_Mazevaluefactor_> _instance;
} _BattleParamTemplate_Mazevaluefactor__default_instance_;
class BattleParamTemplateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleParamTemplate> _instance;
} _BattleParamTemplate_default_instance_;
}  // namespace Config
static void InitDefaultsscc_info_BattleParamTemplate_protos_2fBattleParamTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_BattleParamTemplate_default_instance_;
    new (ptr) ::Config::BattleParamTemplate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_BattleParamTemplate_protos_2fBattleParamTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_BattleParamTemplate_protos_2fBattleParamTemplate_2eproto}, {
      &scc_info_BattleParamTemplate_Dodgeeffectlimit__protos_2fBattleParamTemplate_2eproto.base,
      &scc_info_BattleParamTemplate_Elementeffectlimit__protos_2fBattleParamTemplate_2eproto.base,
      &scc_info_Position2Int_protos_2fPosition2Int_2eproto.base,
      &scc_info_BattleParamTemplate_Soulinterest__protos_2fBattleParamTemplate_2eproto.base,
      &scc_info_BattleParamTemplate_Dice__protos_2fBattleParamTemplate_2eproto.base,
      &scc_info_BattleParamTemplate_Mazevaluefactor__protos_2fBattleParamTemplate_2eproto.base,}};

static void InitDefaultsscc_info_BattleParamTemplate_Dice__protos_2fBattleParamTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_BattleParamTemplate_Dice__default_instance_;
    new (ptr) ::Config::BattleParamTemplate_Dice_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleParamTemplate_Dice__protos_2fBattleParamTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleParamTemplate_Dice__protos_2fBattleParamTemplate_2eproto}, {}};

static void InitDefaultsscc_info_BattleParamTemplate_Dodgeeffectlimit__protos_2fBattleParamTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_BattleParamTemplate_Dodgeeffectlimit__default_instance_;
    new (ptr) ::Config::BattleParamTemplate_Dodgeeffectlimit_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleParamTemplate_Dodgeeffectlimit__protos_2fBattleParamTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleParamTemplate_Dodgeeffectlimit__protos_2fBattleParamTemplate_2eproto}, {}};

static void InitDefaultsscc_info_BattleParamTemplate_Elementeffectlimit__protos_2fBattleParamTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_BattleParamTemplate_Elementeffectlimit__default_instance_;
    new (ptr) ::Config::BattleParamTemplate_Elementeffectlimit_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleParamTemplate_Elementeffectlimit__protos_2fBattleParamTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleParamTemplate_Elementeffectlimit__protos_2fBattleParamTemplate_2eproto}, {}};

static void InitDefaultsscc_info_BattleParamTemplate_Mazevaluefactor__protos_2fBattleParamTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_BattleParamTemplate_Mazevaluefactor__default_instance_;
    new (ptr) ::Config::BattleParamTemplate_Mazevaluefactor_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleParamTemplate_Mazevaluefactor__protos_2fBattleParamTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleParamTemplate_Mazevaluefactor__protos_2fBattleParamTemplate_2eproto}, {}};

static void InitDefaultsscc_info_BattleParamTemplate_Soulinterest__protos_2fBattleParamTemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Config::_BattleParamTemplate_Soulinterest__default_instance_;
    new (ptr) ::Config::BattleParamTemplate_Soulinterest_();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleParamTemplate_Soulinterest__protos_2fBattleParamTemplate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleParamTemplate_Soulinterest__protos_2fBattleParamTemplate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fBattleParamTemplate_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protos_2fBattleParamTemplate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fBattleParamTemplate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fBattleParamTemplate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Dodgeeffectlimit_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Dodgeeffectlimit_, max_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Dodgeeffectlimit_, min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Elementeffectlimit_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Elementeffectlimit_, max_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Elementeffectlimit_, min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Soulinterest_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Soulinterest_, factor_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Soulinterest_, maxcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Dice_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Dice_, dicecount_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Dice_, dicevalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Mazevaluefactor_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Mazevaluefactor_, atkrate_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate_Mazevaluefactor_, factor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlestartwaittime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlemapsizes_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, dodgeeffectlimit_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, criteffectlimit_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, critdameffectlimit_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, defenserateeffectlimit_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, damagereducelimit_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, cooldownlimit_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, elementeffectlimit_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, elementattackbase_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, elementdefensebase_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, elementeffectbase_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, damagecorrectionrange_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, dodgecorrection_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, critcorrection_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, blckeffect_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, blockeffectlimit_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, heromaxenergyvalue_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, heromaxenergynum_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, lordmaxenergy_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, maxattackspeed_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, heroskillcount_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, monsterwalkmodetime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, monsterdropmodetime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlemapgrid_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, gridsize_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, lordgrid_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, skillmovetime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, skillflashtime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, monsterdroprange_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, offsetdistance_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, dropitemstaytime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, bannerstaymaxtime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, lordmovespeed_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, dropitemrange_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, maxroom_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, lordhealthfactor_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, runerefreshprices_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, heromaxrunecount_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, maxsoulstampdemand_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, soulstampdemandfactor_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, bagcapacity_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, resolvefactor_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, skillfadeouttime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, pvpenemylordgrid_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, pvpscenebuffs_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, pvpfirsthandwaiting_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, pvpsecondhandwaiting_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, pvpstartcountdown_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, pvpovercountdown_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, soulinterest_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battleherodievalue_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlemaxtimevalue_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlejumptime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, professionupgradecount_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, handcardlimit_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, forgetcosts_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, praycosts_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, cardlevelupneednum_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, cardusetodrawunique_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, originalhandcardlimit_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, uniqueskillcardlimitcountot_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, dropcoefficientineliteroom_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, dropcoefficientinbossroom_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, heroreborntime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, herorebornhpcostfactor_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, originalhandcardnum_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, challengefirsthandchance_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, pvpchallengetime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, firsthandenergycardcount_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, secondthandenergycardcount_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, pvpfirsthandtime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, pvpsecondhandtime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, lordcardspacing_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, energycardcheckup_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, pvporiginalhandcardnum_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlespeeduprates_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, hangupintervaltime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, nextwaveappearinterval_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, dice_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, remainscompoundoriginalcount_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, mazevaluefactor_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battledashtime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battledashbacktime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battleroundsafetime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlewaitnexttime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battleroundtime_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlehitflyforce_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlehitdownforce_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlehitflymaxheight_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battlegravity_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battleflyupgravity_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battleneartopgravity_),
  PROTOBUF_FIELD_OFFSET(::Config::BattleParamTemplate, battleneartopspeed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Config::BattleParamTemplate_Dodgeeffectlimit_)},
  { 7, -1, sizeof(::Config::BattleParamTemplate_Elementeffectlimit_)},
  { 14, -1, sizeof(::Config::BattleParamTemplate_Soulinterest_)},
  { 21, -1, sizeof(::Config::BattleParamTemplate_Dice_)},
  { 28, -1, sizeof(::Config::BattleParamTemplate_Mazevaluefactor_)},
  { 35, -1, sizeof(::Config::BattleParamTemplate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_BattleParamTemplate_Dodgeeffectlimit__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_BattleParamTemplate_Elementeffectlimit__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_BattleParamTemplate_Soulinterest__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_BattleParamTemplate_Dice__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_BattleParamTemplate_Mazevaluefactor__default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Config::_BattleParamTemplate_default_instance_),
};

const char descriptor_table_protodef_protos_2fBattleParamTemplate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n protos/BattleParamTemplate.proto\022\006Conf"
  "ig\032\031protos/Position2Int.proto\"\342\031\n\023Battle"
  "ParamTemplate\022\033\n\023BattleStartWaitTime\030\001 \001"
  "(\005\022\026\n\016BattleMapSizes\030\002 \003(\005\022G\n\020DodgeEffec"
  "tLimit\030\003 \001(\0132-.Config.BattleParamTemplat"
  "e.Dodgeeffectlimit_\022F\n\017CritEffectLimit\030\004"
  " \001(\0132-.Config.BattleParamTemplate.Dodgee"
  "ffectlimit_\022I\n\022CritDamEffectLimit\030\005 \001(\0132"
  "-.Config.BattleParamTemplate.Dodgeeffect"
  "limit_\022M\n\026DefenseRateEffectLimit\030\006 \001(\0132-"
  ".Config.BattleParamTemplate.Dodgeeffectl"
  "imit_\022\031\n\021DamageReduceLimit\030\007 \001(\005\022D\n\rCool"
  "DownLimit\030\010 \001(\0132-.Config.BattleParamTemp"
  "late.Dodgeeffectlimit_\022K\n\022ElementEffectL"
  "imit\030\t \001(\0132/.Config.BattleParamTemplate."
  "Elementeffectlimit_\022\031\n\021ElementAttackBase"
  "\030\n \001(\001\022\032\n\022ElementDefenseBase\030\013 \001(\001\022\031\n\021El"
  "ementEffectBase\030\014 \001(\005\022L\n\025DamageCorrectio"
  "nRange\030\r \001(\0132-.Config.BattleParamTemplat"
  "e.Dodgeeffectlimit_\022\027\n\017DodgeCorrection\030\016"
  " \001(\001\022\026\n\016CritCorrection\030\017 \001(\001\022\022\n\nBlckEffe"
  "ct\030\020 \001(\005\022G\n\020BlockEffectLimit\030\021 \001(\0132-.Con"
  "fig.BattleParamTemplate.Dodgeeffectlimit"
  "_\022\032\n\022HeroMaxEnergyValue\030\022 \001(\005\022\030\n\020HeroMax"
  "EnergyNum\030\023 \001(\005\022\025\n\rLordMaxEnergy\030\024 \001(\005\022\026"
  "\n\016MaxAttackSpeed\030\025 \001(\001\022\026\n\016HeroSkillCount"
  "\030\026 \001(\005\022\033\n\023MonsterWalkModeTime\030\027 \001(\005\022\033\n\023M"
  "onsterDropModeTime\030\030 \001(\005\022$\n\rBattleMapGri"
  "d\030\031 \001(\0132\r.Position2Int\022\020\n\010GridSize\030\032 \001(\005"
  "\022\020\n\010LordGrid\030\033 \001(\005\022\025\n\rSkillMoveTime\030\034 \001("
  "\005\022\026\n\016SkillFlashTime\030\035 \001(\005\022\030\n\020MonsterDrop"
  "Range\030\036 \001(\005\022\026\n\016OffsetDistance\030\037 \001(\005\022\030\n\020D"
  "ropItemStayTime\030  \001(\005\022\031\n\021BannerStayMaxti"
  "me\030! \001(\005\022\025\n\rLordMoveSpeed\030\" \001(\005\022\025\n\rDropI"
  "temRange\030# \001(\005\022\017\n\007MaxRoom\030$ \001(\005\022\030\n\020LordH"
  "ealthFactor\030% \001(\005\022\031\n\021RuneRefreshPrices\030&"
  " \003(\005\022\030\n\020HeroMaxRuneCount\030\' \001(\005\022\032\n\022MaxSou"
  "lStampDemand\030( \001(\005\022\035\n\025SoulStampDemandFac"
  "tor\030) \001(\001\022\023\n\013BagCapacity\030* \001(\005\022\025\n\rResolv"
  "eFactor\030+ \001(\005\022\030\n\020SkillFadeOutTime\030, \001(\005\022"
  "\030\n\020PvpEnemyLordGrid\030- \001(\005\022\025\n\rPvpSceneBuf"
  "fs\030. \003(\005\022\033\n\023PvpFirstHandWaiting\030/ \001(\005\022\034\n"
  "\024PvpSecondHandWaiting\0300 \001(\005\022\031\n\021PvpStartC"
  "ountDown\0301 \001(\005\022\030\n\020PvpOverCountDown\0302 \001(\005"
  "\022\?\n\014SoulInterest\0303 \001(\0132).Config.BattlePa"
  "ramTemplate.Soulinterest_\022\032\n\022BattleHeroD"
  "ieValue\0304 \001(\005\022\032\n\022BattleMaxTimeValue\0305 \001("
  "\005\022\026\n\016BattleJumpTime\0306 \001(\005\022\036\n\026ProfessionU"
  "pgradeCount\0307 \001(\005\022\025\n\rHandCardLimit\0308 \001(\005"
  "\022\023\n\013ForgetCosts\0309 \003(\005\022\021\n\tPrayCosts\030: \003(\005"
  "\022\032\n\022CardLevelUpNeedNum\030; \001(\005\022\033\n\023CardUseT"
  "oDrawUnique\030< \001(\005\022\035\n\025OriginalHandCardLim"
  "it\030= \001(\005\022#\n\033UniqueSkillCardLimitCountOT\030"
  "> \001(\005\022\"\n\032DropCoefficientInEliteRoom\030\? \001("
  "\005\022!\n\031DropCoefficientInBossRoom\030@ \001(\005\022\026\n\016"
  "HeroRebornTime\030A \001(\005\022\036\n\026HeroRebornHpCost"
  "Factor\030B \001(\005\022\033\n\023OriginalHandCardNum\030C \001("
  "\005\022 \n\030ChallengeFirstHandChance\030D \001(\005\022\030\n\020P"
  "vpChallengeTime\030E \001(\005\022 \n\030FirstHandEnergy"
  "CardCount\030F \001(\005\022\"\n\032SecondtHandEnergyCard"
  "Count\030G \001(\005\022\030\n\020PvpFirstHandTime\030H \001(\005\022\031\n"
  "\021PvpSecondHandTime\030I \001(\005\022\027\n\017LordCardSpac"
  "ing\030J \001(\005\022\031\n\021EnergyCardCheckUp\030K \001(\005\022\036\n\026"
  "PvpOriginalHandCardNum\030L \001(\005\022\032\n\022BattleSp"
  "eedUpRates\030M \003(\001\022\032\n\022HangUpIntervalTime\030N"
  " \001(\005\022\036\n\026NextWaveAppearInterval\030O \001(\005\022/\n\004"
  "Dice\030P \001(\0132!.Config.BattleParamTemplate."
  "Dice_\022$\n\034RemainsCompoundOriginalCount\030Q "
  "\001(\005\022E\n\017MazeValueFactor\030R \001(\0132,.Config.Ba"
  "ttleParamTemplate.Mazevaluefactor_\022\026\n\016Ba"
  "ttleDashTime\030S \001(\005\022\032\n\022BattleDashBackTime"
  "\030T \001(\005\022\033\n\023BattleRoundSafeTime\030U \001(\005\022\032\n\022B"
  "attleWaitNextTime\030V \001(\005\022\027\n\017BattleRoundTi"
  "me\030W \001(\005\022\031\n\021BattleHitFlyForce\030X \001(\005\022\032\n\022B"
  "attleHitDownForce\030Y \001(\005\022\035\n\025BattleHitFlyM"
  "axHeight\030Z \001(\005\022\025\n\rBattleGravity\030[ \001(\005\022\032\n"
  "\022BattleFlyUpGravity\030\\ \001(\005\022\034\n\024BattleNearT"
  "opGravity\030] \001(\005\022\032\n\022BattleNearTopSpeed\030^ "
  "\001(\005\032-\n\021Dodgeeffectlimit_\022\013\n\003Max\030\001 \001(\005\022\013\n"
  "\003Min\030\002 \001(\005\032/\n\023Elementeffectlimit_\022\013\n\003Max"
  "\030\001 \001(\001\022\013\n\003Min\030\002 \001(\001\0321\n\rSoulinterest_\022\016\n\006"
  "Factor\030\001 \001(\005\022\020\n\010MaxCount\030\002 \001(\005\032-\n\005Dice_\022"
  "\021\n\tDiceCount\030\001 \001(\005\022\021\n\tDiceValue\030\002 \001(\005\0323\n"
  "\020Mazevaluefactor_\022\017\n\007AtkRate\030\001 \001(\001\022\016\n\006Fa"
  "ctor\030\002 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fBattleParamTemplate_2eproto_deps[1] = {
  &::descriptor_table_protos_2fPosition2Int_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protos_2fBattleParamTemplate_2eproto_sccs[6] = {
  &scc_info_BattleParamTemplate_protos_2fBattleParamTemplate_2eproto.base,
  &scc_info_BattleParamTemplate_Dice__protos_2fBattleParamTemplate_2eproto.base,
  &scc_info_BattleParamTemplate_Dodgeeffectlimit__protos_2fBattleParamTemplate_2eproto.base,
  &scc_info_BattleParamTemplate_Elementeffectlimit__protos_2fBattleParamTemplate_2eproto.base,
  &scc_info_BattleParamTemplate_Mazevaluefactor__protos_2fBattleParamTemplate_2eproto.base,
  &scc_info_BattleParamTemplate_Soulinterest__protos_2fBattleParamTemplate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fBattleParamTemplate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fBattleParamTemplate_2eproto = {
  false, false, descriptor_table_protodef_protos_2fBattleParamTemplate_2eproto, "protos/BattleParamTemplate.proto", 3378,
  &descriptor_table_protos_2fBattleParamTemplate_2eproto_once, descriptor_table_protos_2fBattleParamTemplate_2eproto_sccs, descriptor_table_protos_2fBattleParamTemplate_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_protos_2fBattleParamTemplate_2eproto::offsets,
  file_level_metadata_protos_2fBattleParamTemplate_2eproto, 6, file_level_enum_descriptors_protos_2fBattleParamTemplate_2eproto, file_level_service_descriptors_protos_2fBattleParamTemplate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protos_2fBattleParamTemplate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protos_2fBattleParamTemplate_2eproto)), true);
namespace Config {

// ===================================================================

class BattleParamTemplate_Dodgeeffectlimit_::_Internal {
 public:
};

BattleParamTemplate_Dodgeeffectlimit_::BattleParamTemplate_Dodgeeffectlimit_(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.BattleParamTemplate.Dodgeeffectlimit_)
}
BattleParamTemplate_Dodgeeffectlimit_::BattleParamTemplate_Dodgeeffectlimit_(const BattleParamTemplate_Dodgeeffectlimit_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_, &from.max_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_) -
    reinterpret_cast<char*>(&max_)) + sizeof(min_));
  // @@protoc_insertion_point(copy_constructor:Config.BattleParamTemplate.Dodgeeffectlimit_)
}

void BattleParamTemplate_Dodgeeffectlimit_::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&min_) -
      reinterpret_cast<char*>(&max_)) + sizeof(min_));
}

BattleParamTemplate_Dodgeeffectlimit_::~BattleParamTemplate_Dodgeeffectlimit_() {
  // @@protoc_insertion_point(destructor:Config.BattleParamTemplate.Dodgeeffectlimit_)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleParamTemplate_Dodgeeffectlimit_::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BattleParamTemplate_Dodgeeffectlimit_::ArenaDtor(void* object) {
  BattleParamTemplate_Dodgeeffectlimit_* _this = reinterpret_cast< BattleParamTemplate_Dodgeeffectlimit_* >(object);
  (void)_this;
}
void BattleParamTemplate_Dodgeeffectlimit_::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleParamTemplate_Dodgeeffectlimit_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleParamTemplate_Dodgeeffectlimit_& BattleParamTemplate_Dodgeeffectlimit_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleParamTemplate_Dodgeeffectlimit__protos_2fBattleParamTemplate_2eproto.base);
  return *internal_default_instance();
}


void BattleParamTemplate_Dodgeeffectlimit_::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.BattleParamTemplate.Dodgeeffectlimit_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_) -
      reinterpret_cast<char*>(&max_)) + sizeof(min_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleParamTemplate_Dodgeeffectlimit_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Max = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleParamTemplate_Dodgeeffectlimit_::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.BattleParamTemplate.Dodgeeffectlimit_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Max = 1;
  if (this->max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max(), target);
  }

  // int32 Min = 2;
  if (this->min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.BattleParamTemplate.Dodgeeffectlimit_)
  return target;
}

size_t BattleParamTemplate_Dodgeeffectlimit_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.BattleParamTemplate.Dodgeeffectlimit_)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Max = 1;
  if (this->max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max());
  }

  // int32 Min = 2;
  if (this->min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleParamTemplate_Dodgeeffectlimit_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.BattleParamTemplate.Dodgeeffectlimit_)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleParamTemplate_Dodgeeffectlimit_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleParamTemplate_Dodgeeffectlimit_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.BattleParamTemplate.Dodgeeffectlimit_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.BattleParamTemplate.Dodgeeffectlimit_)
    MergeFrom(*source);
  }
}

void BattleParamTemplate_Dodgeeffectlimit_::MergeFrom(const BattleParamTemplate_Dodgeeffectlimit_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.BattleParamTemplate.Dodgeeffectlimit_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max() != 0) {
    _internal_set_max(from._internal_max());
  }
  if (from.min() != 0) {
    _internal_set_min(from._internal_min());
  }
}

void BattleParamTemplate_Dodgeeffectlimit_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.BattleParamTemplate.Dodgeeffectlimit_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleParamTemplate_Dodgeeffectlimit_::CopyFrom(const BattleParamTemplate_Dodgeeffectlimit_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.BattleParamTemplate.Dodgeeffectlimit_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleParamTemplate_Dodgeeffectlimit_::IsInitialized() const {
  return true;
}

void BattleParamTemplate_Dodgeeffectlimit_::InternalSwap(BattleParamTemplate_Dodgeeffectlimit_* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleParamTemplate_Dodgeeffectlimit_, min_)
      + sizeof(BattleParamTemplate_Dodgeeffectlimit_::min_)
      - PROTOBUF_FIELD_OFFSET(BattleParamTemplate_Dodgeeffectlimit_, max_)>(
          reinterpret_cast<char*>(&max_),
          reinterpret_cast<char*>(&other->max_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleParamTemplate_Dodgeeffectlimit_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BattleParamTemplate_Elementeffectlimit_::_Internal {
 public:
};

BattleParamTemplate_Elementeffectlimit_::BattleParamTemplate_Elementeffectlimit_(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.BattleParamTemplate.Elementeffectlimit_)
}
BattleParamTemplate_Elementeffectlimit_::BattleParamTemplate_Elementeffectlimit_(const BattleParamTemplate_Elementeffectlimit_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_, &from.max_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_) -
    reinterpret_cast<char*>(&max_)) + sizeof(min_));
  // @@protoc_insertion_point(copy_constructor:Config.BattleParamTemplate.Elementeffectlimit_)
}

void BattleParamTemplate_Elementeffectlimit_::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&max_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&min_) -
      reinterpret_cast<char*>(&max_)) + sizeof(min_));
}

BattleParamTemplate_Elementeffectlimit_::~BattleParamTemplate_Elementeffectlimit_() {
  // @@protoc_insertion_point(destructor:Config.BattleParamTemplate.Elementeffectlimit_)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleParamTemplate_Elementeffectlimit_::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BattleParamTemplate_Elementeffectlimit_::ArenaDtor(void* object) {
  BattleParamTemplate_Elementeffectlimit_* _this = reinterpret_cast< BattleParamTemplate_Elementeffectlimit_* >(object);
  (void)_this;
}
void BattleParamTemplate_Elementeffectlimit_::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleParamTemplate_Elementeffectlimit_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleParamTemplate_Elementeffectlimit_& BattleParamTemplate_Elementeffectlimit_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleParamTemplate_Elementeffectlimit__protos_2fBattleParamTemplate_2eproto.base);
  return *internal_default_instance();
}


void BattleParamTemplate_Elementeffectlimit_::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.BattleParamTemplate.Elementeffectlimit_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_) -
      reinterpret_cast<char*>(&max_)) + sizeof(min_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleParamTemplate_Elementeffectlimit_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double Max = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleParamTemplate_Elementeffectlimit_::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.BattleParamTemplate.Elementeffectlimit_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Max = 1;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max(), target);
  }

  // double Min = 2;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.BattleParamTemplate.Elementeffectlimit_)
  return target;
}

size_t BattleParamTemplate_Elementeffectlimit_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.BattleParamTemplate.Elementeffectlimit_)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Max = 1;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    total_size += 1 + 8;
  }

  // double Min = 2;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleParamTemplate_Elementeffectlimit_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.BattleParamTemplate.Elementeffectlimit_)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleParamTemplate_Elementeffectlimit_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleParamTemplate_Elementeffectlimit_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.BattleParamTemplate.Elementeffectlimit_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.BattleParamTemplate.Elementeffectlimit_)
    MergeFrom(*source);
  }
}

void BattleParamTemplate_Elementeffectlimit_::MergeFrom(const BattleParamTemplate_Elementeffectlimit_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.BattleParamTemplate.Elementeffectlimit_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max() <= 0 && from.max() >= 0)) {
    _internal_set_max(from._internal_max());
  }
  if (!(from.min() <= 0 && from.min() >= 0)) {
    _internal_set_min(from._internal_min());
  }
}

void BattleParamTemplate_Elementeffectlimit_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.BattleParamTemplate.Elementeffectlimit_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleParamTemplate_Elementeffectlimit_::CopyFrom(const BattleParamTemplate_Elementeffectlimit_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.BattleParamTemplate.Elementeffectlimit_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleParamTemplate_Elementeffectlimit_::IsInitialized() const {
  return true;
}

void BattleParamTemplate_Elementeffectlimit_::InternalSwap(BattleParamTemplate_Elementeffectlimit_* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleParamTemplate_Elementeffectlimit_, min_)
      + sizeof(BattleParamTemplate_Elementeffectlimit_::min_)
      - PROTOBUF_FIELD_OFFSET(BattleParamTemplate_Elementeffectlimit_, max_)>(
          reinterpret_cast<char*>(&max_),
          reinterpret_cast<char*>(&other->max_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleParamTemplate_Elementeffectlimit_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BattleParamTemplate_Soulinterest_::_Internal {
 public:
};

BattleParamTemplate_Soulinterest_::BattleParamTemplate_Soulinterest_(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.BattleParamTemplate.Soulinterest_)
}
BattleParamTemplate_Soulinterest_::BattleParamTemplate_Soulinterest_(const BattleParamTemplate_Soulinterest_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&factor_, &from.factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxcount_) -
    reinterpret_cast<char*>(&factor_)) + sizeof(maxcount_));
  // @@protoc_insertion_point(copy_constructor:Config.BattleParamTemplate.Soulinterest_)
}

void BattleParamTemplate_Soulinterest_::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&maxcount_) -
      reinterpret_cast<char*>(&factor_)) + sizeof(maxcount_));
}

BattleParamTemplate_Soulinterest_::~BattleParamTemplate_Soulinterest_() {
  // @@protoc_insertion_point(destructor:Config.BattleParamTemplate.Soulinterest_)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleParamTemplate_Soulinterest_::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BattleParamTemplate_Soulinterest_::ArenaDtor(void* object) {
  BattleParamTemplate_Soulinterest_* _this = reinterpret_cast< BattleParamTemplate_Soulinterest_* >(object);
  (void)_this;
}
void BattleParamTemplate_Soulinterest_::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleParamTemplate_Soulinterest_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleParamTemplate_Soulinterest_& BattleParamTemplate_Soulinterest_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleParamTemplate_Soulinterest__protos_2fBattleParamTemplate_2eproto.base);
  return *internal_default_instance();
}


void BattleParamTemplate_Soulinterest_::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.BattleParamTemplate.Soulinterest_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxcount_) -
      reinterpret_cast<char*>(&factor_)) + sizeof(maxcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleParamTemplate_Soulinterest_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleParamTemplate_Soulinterest_::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.BattleParamTemplate.Soulinterest_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Factor = 1;
  if (this->factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_factor(), target);
  }

  // int32 MaxCount = 2;
  if (this->maxcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.BattleParamTemplate.Soulinterest_)
  return target;
}

size_t BattleParamTemplate_Soulinterest_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.BattleParamTemplate.Soulinterest_)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Factor = 1;
  if (this->factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_factor());
  }

  // int32 MaxCount = 2;
  if (this->maxcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleParamTemplate_Soulinterest_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.BattleParamTemplate.Soulinterest_)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleParamTemplate_Soulinterest_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleParamTemplate_Soulinterest_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.BattleParamTemplate.Soulinterest_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.BattleParamTemplate.Soulinterest_)
    MergeFrom(*source);
  }
}

void BattleParamTemplate_Soulinterest_::MergeFrom(const BattleParamTemplate_Soulinterest_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.BattleParamTemplate.Soulinterest_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.factor() != 0) {
    _internal_set_factor(from._internal_factor());
  }
  if (from.maxcount() != 0) {
    _internal_set_maxcount(from._internal_maxcount());
  }
}

void BattleParamTemplate_Soulinterest_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.BattleParamTemplate.Soulinterest_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleParamTemplate_Soulinterest_::CopyFrom(const BattleParamTemplate_Soulinterest_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.BattleParamTemplate.Soulinterest_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleParamTemplate_Soulinterest_::IsInitialized() const {
  return true;
}

void BattleParamTemplate_Soulinterest_::InternalSwap(BattleParamTemplate_Soulinterest_* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleParamTemplate_Soulinterest_, maxcount_)
      + sizeof(BattleParamTemplate_Soulinterest_::maxcount_)
      - PROTOBUF_FIELD_OFFSET(BattleParamTemplate_Soulinterest_, factor_)>(
          reinterpret_cast<char*>(&factor_),
          reinterpret_cast<char*>(&other->factor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleParamTemplate_Soulinterest_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BattleParamTemplate_Dice_::_Internal {
 public:
};

BattleParamTemplate_Dice_::BattleParamTemplate_Dice_(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.BattleParamTemplate.Dice_)
}
BattleParamTemplate_Dice_::BattleParamTemplate_Dice_(const BattleParamTemplate_Dice_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dicecount_, &from.dicecount_,
    static_cast<size_t>(reinterpret_cast<char*>(&dicevalue_) -
    reinterpret_cast<char*>(&dicecount_)) + sizeof(dicevalue_));
  // @@protoc_insertion_point(copy_constructor:Config.BattleParamTemplate.Dice_)
}

void BattleParamTemplate_Dice_::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dicecount_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dicevalue_) -
      reinterpret_cast<char*>(&dicecount_)) + sizeof(dicevalue_));
}

BattleParamTemplate_Dice_::~BattleParamTemplate_Dice_() {
  // @@protoc_insertion_point(destructor:Config.BattleParamTemplate.Dice_)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleParamTemplate_Dice_::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BattleParamTemplate_Dice_::ArenaDtor(void* object) {
  BattleParamTemplate_Dice_* _this = reinterpret_cast< BattleParamTemplate_Dice_* >(object);
  (void)_this;
}
void BattleParamTemplate_Dice_::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleParamTemplate_Dice_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleParamTemplate_Dice_& BattleParamTemplate_Dice_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleParamTemplate_Dice__protos_2fBattleParamTemplate_2eproto.base);
  return *internal_default_instance();
}


void BattleParamTemplate_Dice_::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.BattleParamTemplate.Dice_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dicecount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dicevalue_) -
      reinterpret_cast<char*>(&dicecount_)) + sizeof(dicevalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleParamTemplate_Dice_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 DiceCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dicecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DiceValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dicevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleParamTemplate_Dice_::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.BattleParamTemplate.Dice_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 DiceCount = 1;
  if (this->dicecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dicecount(), target);
  }

  // int32 DiceValue = 2;
  if (this->dicevalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dicevalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.BattleParamTemplate.Dice_)
  return target;
}

size_t BattleParamTemplate_Dice_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.BattleParamTemplate.Dice_)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 DiceCount = 1;
  if (this->dicecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dicecount());
  }

  // int32 DiceValue = 2;
  if (this->dicevalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dicevalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleParamTemplate_Dice_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.BattleParamTemplate.Dice_)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleParamTemplate_Dice_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleParamTemplate_Dice_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.BattleParamTemplate.Dice_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.BattleParamTemplate.Dice_)
    MergeFrom(*source);
  }
}

void BattleParamTemplate_Dice_::MergeFrom(const BattleParamTemplate_Dice_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.BattleParamTemplate.Dice_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dicecount() != 0) {
    _internal_set_dicecount(from._internal_dicecount());
  }
  if (from.dicevalue() != 0) {
    _internal_set_dicevalue(from._internal_dicevalue());
  }
}

void BattleParamTemplate_Dice_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.BattleParamTemplate.Dice_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleParamTemplate_Dice_::CopyFrom(const BattleParamTemplate_Dice_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.BattleParamTemplate.Dice_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleParamTemplate_Dice_::IsInitialized() const {
  return true;
}

void BattleParamTemplate_Dice_::InternalSwap(BattleParamTemplate_Dice_* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleParamTemplate_Dice_, dicevalue_)
      + sizeof(BattleParamTemplate_Dice_::dicevalue_)
      - PROTOBUF_FIELD_OFFSET(BattleParamTemplate_Dice_, dicecount_)>(
          reinterpret_cast<char*>(&dicecount_),
          reinterpret_cast<char*>(&other->dicecount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleParamTemplate_Dice_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BattleParamTemplate_Mazevaluefactor_::_Internal {
 public:
};

BattleParamTemplate_Mazevaluefactor_::BattleParamTemplate_Mazevaluefactor_(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.BattleParamTemplate.Mazevaluefactor_)
}
BattleParamTemplate_Mazevaluefactor_::BattleParamTemplate_Mazevaluefactor_(const BattleParamTemplate_Mazevaluefactor_& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&atkrate_, &from.atkrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&factor_) -
    reinterpret_cast<char*>(&atkrate_)) + sizeof(factor_));
  // @@protoc_insertion_point(copy_constructor:Config.BattleParamTemplate.Mazevaluefactor_)
}

void BattleParamTemplate_Mazevaluefactor_::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&atkrate_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&atkrate_)) + sizeof(factor_));
}

BattleParamTemplate_Mazevaluefactor_::~BattleParamTemplate_Mazevaluefactor_() {
  // @@protoc_insertion_point(destructor:Config.BattleParamTemplate.Mazevaluefactor_)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleParamTemplate_Mazevaluefactor_::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BattleParamTemplate_Mazevaluefactor_::ArenaDtor(void* object) {
  BattleParamTemplate_Mazevaluefactor_* _this = reinterpret_cast< BattleParamTemplate_Mazevaluefactor_* >(object);
  (void)_this;
}
void BattleParamTemplate_Mazevaluefactor_::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleParamTemplate_Mazevaluefactor_::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleParamTemplate_Mazevaluefactor_& BattleParamTemplate_Mazevaluefactor_::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleParamTemplate_Mazevaluefactor__protos_2fBattleParamTemplate_2eproto.base);
  return *internal_default_instance();
}


void BattleParamTemplate_Mazevaluefactor_::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.BattleParamTemplate.Mazevaluefactor_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&atkrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&atkrate_)) + sizeof(factor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleParamTemplate_Mazevaluefactor_::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double AtkRate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          atkrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 Factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleParamTemplate_Mazevaluefactor_::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.BattleParamTemplate.Mazevaluefactor_)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double AtkRate = 1;
  if (!(this->atkrate() <= 0 && this->atkrate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_atkrate(), target);
  }

  // int32 Factor = 2;
  if (this->factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.BattleParamTemplate.Mazevaluefactor_)
  return target;
}

size_t BattleParamTemplate_Mazevaluefactor_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.BattleParamTemplate.Mazevaluefactor_)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double AtkRate = 1;
  if (!(this->atkrate() <= 0 && this->atkrate() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 Factor = 2;
  if (this->factor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_factor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleParamTemplate_Mazevaluefactor_::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.BattleParamTemplate.Mazevaluefactor_)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleParamTemplate_Mazevaluefactor_* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleParamTemplate_Mazevaluefactor_>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.BattleParamTemplate.Mazevaluefactor_)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.BattleParamTemplate.Mazevaluefactor_)
    MergeFrom(*source);
  }
}

void BattleParamTemplate_Mazevaluefactor_::MergeFrom(const BattleParamTemplate_Mazevaluefactor_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.BattleParamTemplate.Mazevaluefactor_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.atkrate() <= 0 && from.atkrate() >= 0)) {
    _internal_set_atkrate(from._internal_atkrate());
  }
  if (from.factor() != 0) {
    _internal_set_factor(from._internal_factor());
  }
}

void BattleParamTemplate_Mazevaluefactor_::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.BattleParamTemplate.Mazevaluefactor_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleParamTemplate_Mazevaluefactor_::CopyFrom(const BattleParamTemplate_Mazevaluefactor_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.BattleParamTemplate.Mazevaluefactor_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleParamTemplate_Mazevaluefactor_::IsInitialized() const {
  return true;
}

void BattleParamTemplate_Mazevaluefactor_::InternalSwap(BattleParamTemplate_Mazevaluefactor_* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleParamTemplate_Mazevaluefactor_, factor_)
      + sizeof(BattleParamTemplate_Mazevaluefactor_::factor_)
      - PROTOBUF_FIELD_OFFSET(BattleParamTemplate_Mazevaluefactor_, atkrate_)>(
          reinterpret_cast<char*>(&atkrate_),
          reinterpret_cast<char*>(&other->atkrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleParamTemplate_Mazevaluefactor_::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BattleParamTemplate::_Internal {
 public:
  static const ::Config::BattleParamTemplate_Dodgeeffectlimit_& dodgeeffectlimit(const BattleParamTemplate* msg);
  static const ::Config::BattleParamTemplate_Dodgeeffectlimit_& criteffectlimit(const BattleParamTemplate* msg);
  static const ::Config::BattleParamTemplate_Dodgeeffectlimit_& critdameffectlimit(const BattleParamTemplate* msg);
  static const ::Config::BattleParamTemplate_Dodgeeffectlimit_& defenserateeffectlimit(const BattleParamTemplate* msg);
  static const ::Config::BattleParamTemplate_Dodgeeffectlimit_& cooldownlimit(const BattleParamTemplate* msg);
  static const ::Config::BattleParamTemplate_Elementeffectlimit_& elementeffectlimit(const BattleParamTemplate* msg);
  static const ::Config::BattleParamTemplate_Dodgeeffectlimit_& damagecorrectionrange(const BattleParamTemplate* msg);
  static const ::Config::BattleParamTemplate_Dodgeeffectlimit_& blockeffectlimit(const BattleParamTemplate* msg);
  static const ::Position2Int& battlemapgrid(const BattleParamTemplate* msg);
  static const ::Config::BattleParamTemplate_Soulinterest_& soulinterest(const BattleParamTemplate* msg);
  static const ::Config::BattleParamTemplate_Dice_& dice(const BattleParamTemplate* msg);
  static const ::Config::BattleParamTemplate_Mazevaluefactor_& mazevaluefactor(const BattleParamTemplate* msg);
};

const ::Config::BattleParamTemplate_Dodgeeffectlimit_&
BattleParamTemplate::_Internal::dodgeeffectlimit(const BattleParamTemplate* msg) {
  return *msg->dodgeeffectlimit_;
}
const ::Config::BattleParamTemplate_Dodgeeffectlimit_&
BattleParamTemplate::_Internal::criteffectlimit(const BattleParamTemplate* msg) {
  return *msg->criteffectlimit_;
}
const ::Config::BattleParamTemplate_Dodgeeffectlimit_&
BattleParamTemplate::_Internal::critdameffectlimit(const BattleParamTemplate* msg) {
  return *msg->critdameffectlimit_;
}
const ::Config::BattleParamTemplate_Dodgeeffectlimit_&
BattleParamTemplate::_Internal::defenserateeffectlimit(const BattleParamTemplate* msg) {
  return *msg->defenserateeffectlimit_;
}
const ::Config::BattleParamTemplate_Dodgeeffectlimit_&
BattleParamTemplate::_Internal::cooldownlimit(const BattleParamTemplate* msg) {
  return *msg->cooldownlimit_;
}
const ::Config::BattleParamTemplate_Elementeffectlimit_&
BattleParamTemplate::_Internal::elementeffectlimit(const BattleParamTemplate* msg) {
  return *msg->elementeffectlimit_;
}
const ::Config::BattleParamTemplate_Dodgeeffectlimit_&
BattleParamTemplate::_Internal::damagecorrectionrange(const BattleParamTemplate* msg) {
  return *msg->damagecorrectionrange_;
}
const ::Config::BattleParamTemplate_Dodgeeffectlimit_&
BattleParamTemplate::_Internal::blockeffectlimit(const BattleParamTemplate* msg) {
  return *msg->blockeffectlimit_;
}
const ::Position2Int&
BattleParamTemplate::_Internal::battlemapgrid(const BattleParamTemplate* msg) {
  return *msg->battlemapgrid_;
}
const ::Config::BattleParamTemplate_Soulinterest_&
BattleParamTemplate::_Internal::soulinterest(const BattleParamTemplate* msg) {
  return *msg->soulinterest_;
}
const ::Config::BattleParamTemplate_Dice_&
BattleParamTemplate::_Internal::dice(const BattleParamTemplate* msg) {
  return *msg->dice_;
}
const ::Config::BattleParamTemplate_Mazevaluefactor_&
BattleParamTemplate::_Internal::mazevaluefactor(const BattleParamTemplate* msg) {
  return *msg->mazevaluefactor_;
}
void BattleParamTemplate::clear_battlemapgrid() {
  if (GetArena() == nullptr && battlemapgrid_ != nullptr) {
    delete battlemapgrid_;
  }
  battlemapgrid_ = nullptr;
}
BattleParamTemplate::BattleParamTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  battlemapsizes_(arena),
  runerefreshprices_(arena),
  pvpscenebuffs_(arena),
  forgetcosts_(arena),
  praycosts_(arena),
  battlespeeduprates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Config.BattleParamTemplate)
}
BattleParamTemplate::BattleParamTemplate(const BattleParamTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      battlemapsizes_(from.battlemapsizes_),
      runerefreshprices_(from.runerefreshprices_),
      pvpscenebuffs_(from.pvpscenebuffs_),
      forgetcosts_(from.forgetcosts_),
      praycosts_(from.praycosts_),
      battlespeeduprates_(from.battlespeeduprates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dodgeeffectlimit()) {
    dodgeeffectlimit_ = new ::Config::BattleParamTemplate_Dodgeeffectlimit_(*from.dodgeeffectlimit_);
  } else {
    dodgeeffectlimit_ = nullptr;
  }
  if (from._internal_has_criteffectlimit()) {
    criteffectlimit_ = new ::Config::BattleParamTemplate_Dodgeeffectlimit_(*from.criteffectlimit_);
  } else {
    criteffectlimit_ = nullptr;
  }
  if (from._internal_has_critdameffectlimit()) {
    critdameffectlimit_ = new ::Config::BattleParamTemplate_Dodgeeffectlimit_(*from.critdameffectlimit_);
  } else {
    critdameffectlimit_ = nullptr;
  }
  if (from._internal_has_defenserateeffectlimit()) {
    defenserateeffectlimit_ = new ::Config::BattleParamTemplate_Dodgeeffectlimit_(*from.defenserateeffectlimit_);
  } else {
    defenserateeffectlimit_ = nullptr;
  }
  if (from._internal_has_cooldownlimit()) {
    cooldownlimit_ = new ::Config::BattleParamTemplate_Dodgeeffectlimit_(*from.cooldownlimit_);
  } else {
    cooldownlimit_ = nullptr;
  }
  if (from._internal_has_elementeffectlimit()) {
    elementeffectlimit_ = new ::Config::BattleParamTemplate_Elementeffectlimit_(*from.elementeffectlimit_);
  } else {
    elementeffectlimit_ = nullptr;
  }
  if (from._internal_has_damagecorrectionrange()) {
    damagecorrectionrange_ = new ::Config::BattleParamTemplate_Dodgeeffectlimit_(*from.damagecorrectionrange_);
  } else {
    damagecorrectionrange_ = nullptr;
  }
  if (from._internal_has_blockeffectlimit()) {
    blockeffectlimit_ = new ::Config::BattleParamTemplate_Dodgeeffectlimit_(*from.blockeffectlimit_);
  } else {
    blockeffectlimit_ = nullptr;
  }
  if (from._internal_has_battlemapgrid()) {
    battlemapgrid_ = new ::Position2Int(*from.battlemapgrid_);
  } else {
    battlemapgrid_ = nullptr;
  }
  if (from._internal_has_soulinterest()) {
    soulinterest_ = new ::Config::BattleParamTemplate_Soulinterest_(*from.soulinterest_);
  } else {
    soulinterest_ = nullptr;
  }
  if (from._internal_has_dice()) {
    dice_ = new ::Config::BattleParamTemplate_Dice_(*from.dice_);
  } else {
    dice_ = nullptr;
  }
  if (from._internal_has_mazevaluefactor()) {
    mazevaluefactor_ = new ::Config::BattleParamTemplate_Mazevaluefactor_(*from.mazevaluefactor_);
  } else {
    mazevaluefactor_ = nullptr;
  }
  ::memcpy(&battlestartwaittime_, &from.battlestartwaittime_,
    static_cast<size_t>(reinterpret_cast<char*>(&battleneartopspeed_) -
    reinterpret_cast<char*>(&battlestartwaittime_)) + sizeof(battleneartopspeed_));
  // @@protoc_insertion_point(copy_constructor:Config.BattleParamTemplate)
}

void BattleParamTemplate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleParamTemplate_protos_2fBattleParamTemplate_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&dodgeeffectlimit_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&battleneartopspeed_) -
      reinterpret_cast<char*>(&dodgeeffectlimit_)) + sizeof(battleneartopspeed_));
}

BattleParamTemplate::~BattleParamTemplate() {
  // @@protoc_insertion_point(destructor:Config.BattleParamTemplate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleParamTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dodgeeffectlimit_;
  if (this != internal_default_instance()) delete criteffectlimit_;
  if (this != internal_default_instance()) delete critdameffectlimit_;
  if (this != internal_default_instance()) delete defenserateeffectlimit_;
  if (this != internal_default_instance()) delete cooldownlimit_;
  if (this != internal_default_instance()) delete elementeffectlimit_;
  if (this != internal_default_instance()) delete damagecorrectionrange_;
  if (this != internal_default_instance()) delete blockeffectlimit_;
  if (this != internal_default_instance()) delete battlemapgrid_;
  if (this != internal_default_instance()) delete soulinterest_;
  if (this != internal_default_instance()) delete dice_;
  if (this != internal_default_instance()) delete mazevaluefactor_;
}

void BattleParamTemplate::ArenaDtor(void* object) {
  BattleParamTemplate* _this = reinterpret_cast< BattleParamTemplate* >(object);
  (void)_this;
}
void BattleParamTemplate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleParamTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleParamTemplate& BattleParamTemplate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleParamTemplate_protos_2fBattleParamTemplate_2eproto.base);
  return *internal_default_instance();
}


void BattleParamTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:Config.BattleParamTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battlemapsizes_.Clear();
  runerefreshprices_.Clear();
  pvpscenebuffs_.Clear();
  forgetcosts_.Clear();
  praycosts_.Clear();
  battlespeeduprates_.Clear();
  if (GetArena() == nullptr && dodgeeffectlimit_ != nullptr) {
    delete dodgeeffectlimit_;
  }
  dodgeeffectlimit_ = nullptr;
  if (GetArena() == nullptr && criteffectlimit_ != nullptr) {
    delete criteffectlimit_;
  }
  criteffectlimit_ = nullptr;
  if (GetArena() == nullptr && critdameffectlimit_ != nullptr) {
    delete critdameffectlimit_;
  }
  critdameffectlimit_ = nullptr;
  if (GetArena() == nullptr && defenserateeffectlimit_ != nullptr) {
    delete defenserateeffectlimit_;
  }
  defenserateeffectlimit_ = nullptr;
  if (GetArena() == nullptr && cooldownlimit_ != nullptr) {
    delete cooldownlimit_;
  }
  cooldownlimit_ = nullptr;
  if (GetArena() == nullptr && elementeffectlimit_ != nullptr) {
    delete elementeffectlimit_;
  }
  elementeffectlimit_ = nullptr;
  if (GetArena() == nullptr && damagecorrectionrange_ != nullptr) {
    delete damagecorrectionrange_;
  }
  damagecorrectionrange_ = nullptr;
  if (GetArena() == nullptr && blockeffectlimit_ != nullptr) {
    delete blockeffectlimit_;
  }
  blockeffectlimit_ = nullptr;
  if (GetArena() == nullptr && battlemapgrid_ != nullptr) {
    delete battlemapgrid_;
  }
  battlemapgrid_ = nullptr;
  if (GetArena() == nullptr && soulinterest_ != nullptr) {
    delete soulinterest_;
  }
  soulinterest_ = nullptr;
  if (GetArena() == nullptr && dice_ != nullptr) {
    delete dice_;
  }
  dice_ = nullptr;
  if (GetArena() == nullptr && mazevaluefactor_ != nullptr) {
    delete mazevaluefactor_;
  }
  mazevaluefactor_ = nullptr;
  ::memset(&battlestartwaittime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battleneartopspeed_) -
      reinterpret_cast<char*>(&battlestartwaittime_)) + sizeof(battleneartopspeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleParamTemplate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 BattleStartWaitTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          battlestartwaittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 BattleMapSizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_battlemapsizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_battlemapsizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dodgeeffectlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_criteffectlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_critdameffectlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_defenserateeffectlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DamageReduceLimit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          damagereducelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cooldownlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_elementeffectlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ElementAttackBase = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          elementattackbase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ElementDefenseBase = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          elementdefensebase_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 ElementEffectBase = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          elementeffectbase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_damagecorrectionrange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double DodgeCorrection = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          dodgecorrection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double CritCorrection = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          critcorrection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 BlckEffect = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          blckeffect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockeffectlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HeroMaxEnergyValue = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          heromaxenergyvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HeroMaxEnergyNum = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          heromaxenergynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LordMaxEnergy = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          lordmaxenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double MaxAttackSpeed = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          maxattackspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 HeroSkillCount = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          heroskillcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MonsterWalkModeTime = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          monsterwalkmodetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MonsterDropModeTime = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          monsterdropmodetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Position2Int BattleMapGrid = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_battlemapgrid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 GridSize = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          gridsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LordGrid = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          lordgrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SkillMoveTime = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          skillmovetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SkillFlashTime = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          skillflashtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MonsterDropRange = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          monsterdroprange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OffsetDistance = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          offsetdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DropItemStayTime = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          dropitemstaytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BannerStayMaxtime = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bannerstaymaxtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LordMoveSpeed = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lordmovespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DropItemRange = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dropitemrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxRoom = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxroom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LordHealthFactor = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lordhealthfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 RuneRefreshPrices = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_runerefreshprices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_runerefreshprices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HeroMaxRuneCount = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          heromaxrunecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxSoulStampDemand = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxsoulstampdemand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double SoulStampDemandFactor = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          soulstampdemandfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 BagCapacity = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bagcapacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ResolveFactor = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          resolvefactor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SkillFadeOutTime = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          skillfadeouttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PvpEnemyLordGrid = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          pvpenemylordgrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 PvpSceneBuffs = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pvpscenebuffs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_pvpscenebuffs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PvpFirstHandWaiting = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          pvpfirsthandwaiting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PvpSecondHandWaiting = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          pvpsecondhandwaiting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PvpStartCountDown = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          pvpstartcountdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PvpOverCountDown = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          pvpovercountdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_soulinterest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleHeroDieValue = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          battleherodievalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleMaxTimeValue = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          battlemaxtimevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleJumpTime = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          battlejumptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ProfessionUpgradeCount = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          professionupgradecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HandCardLimit = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          handcardlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ForgetCosts = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_forgetcosts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200) {
          _internal_add_forgetcosts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 PrayCosts = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_praycosts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208) {
          _internal_add_praycosts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CardLevelUpNeedNum = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          cardlevelupneednum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CardUseToDrawUnique = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          cardusetodrawunique_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OriginalHandCardLimit = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          originalhandcardlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UniqueSkillCardLimitCountOT = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          uniqueskillcardlimitcountot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DropCoefficientInEliteRoom = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          dropcoefficientineliteroom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DropCoefficientInBossRoom = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          dropcoefficientinbossroom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HeroRebornTime = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          heroreborntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 HeroRebornHpCostFactor = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          herorebornhpcostfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 OriginalHandCardNum = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          originalhandcardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ChallengeFirstHandChance = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          challengefirsthandchance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PvpChallengeTime = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pvpchallengetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FirstHandEnergyCardCount = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          firsthandenergycardcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SecondtHandEnergyCardCount = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          secondthandenergycardcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PvpFirstHandTime = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pvpfirsthandtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PvpSecondHandTime = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pvpsecondhandtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 LordCardSpacing = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          lordcardspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 EnergyCardCheckUp = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          energycardcheckup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PvpOriginalHandCardNum = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          pvporiginalhandcardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double BattleSpeedUpRates = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_battlespeeduprates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105) {
          _internal_add_battlespeeduprates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 HangUpIntervalTime = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          hangupintervaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 NextWaveAppearInterval = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          nextwaveappearinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Dice_ Dice = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_dice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 RemainsCompoundOriginalCount = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          remainscompoundoriginalcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_mazevaluefactor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleDashTime = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          battledashtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleDashBackTime = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          battledashbacktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleRoundSafeTime = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          battleroundsafetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleWaitNextTime = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          battlewaitnexttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleRoundTime = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          battleroundtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleHitFlyForce = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          battlehitflyforce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleHitDownForce = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          battlehitdownforce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleHitFlyMaxHeight = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          battlehitflymaxheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleGravity = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          battlegravity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleFlyUpGravity = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          battleflyupgravity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleNearTopGravity = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          battleneartopgravity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 BattleNearTopSpeed = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          battleneartopspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleParamTemplate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config.BattleParamTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BattleStartWaitTime = 1;
  if (this->battlestartwaittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_battlestartwaittime(), target);
  }

  // repeated int32 BattleMapSizes = 2;
  {
    int byte_size = _battlemapsizes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_battlemapsizes(), byte_size, target);
    }
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;
  if (this->has_dodgeeffectlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dodgeeffectlimit(this), target, stream);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;
  if (this->has_criteffectlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::criteffectlimit(this), target, stream);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;
  if (this->has_critdameffectlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::critdameffectlimit(this), target, stream);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;
  if (this->has_defenserateeffectlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::defenserateeffectlimit(this), target, stream);
  }

  // int32 DamageReduceLimit = 7;
  if (this->damagereducelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_damagereducelimit(), target);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;
  if (this->has_cooldownlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cooldownlimit(this), target, stream);
  }

  // .Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;
  if (this->has_elementeffectlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::elementeffectlimit(this), target, stream);
  }

  // double ElementAttackBase = 10;
  if (!(this->elementattackbase() <= 0 && this->elementattackbase() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_elementattackbase(), target);
  }

  // double ElementDefenseBase = 11;
  if (!(this->elementdefensebase() <= 0 && this->elementdefensebase() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_elementdefensebase(), target);
  }

  // int32 ElementEffectBase = 12;
  if (this->elementeffectbase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_elementeffectbase(), target);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;
  if (this->has_damagecorrectionrange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::damagecorrectionrange(this), target, stream);
  }

  // double DodgeCorrection = 14;
  if (!(this->dodgecorrection() <= 0 && this->dodgecorrection() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_dodgecorrection(), target);
  }

  // double CritCorrection = 15;
  if (!(this->critcorrection() <= 0 && this->critcorrection() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_critcorrection(), target);
  }

  // int32 BlckEffect = 16;
  if (this->blckeffect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_blckeffect(), target);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;
  if (this->has_blockeffectlimit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::blockeffectlimit(this), target, stream);
  }

  // int32 HeroMaxEnergyValue = 18;
  if (this->heromaxenergyvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_heromaxenergyvalue(), target);
  }

  // int32 HeroMaxEnergyNum = 19;
  if (this->heromaxenergynum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_heromaxenergynum(), target);
  }

  // int32 LordMaxEnergy = 20;
  if (this->lordmaxenergy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_lordmaxenergy(), target);
  }

  // double MaxAttackSpeed = 21;
  if (!(this->maxattackspeed() <= 0 && this->maxattackspeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_maxattackspeed(), target);
  }

  // int32 HeroSkillCount = 22;
  if (this->heroskillcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_heroskillcount(), target);
  }

  // int32 MonsterWalkModeTime = 23;
  if (this->monsterwalkmodetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_monsterwalkmodetime(), target);
  }

  // int32 MonsterDropModeTime = 24;
  if (this->monsterdropmodetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_monsterdropmodetime(), target);
  }

  // .Position2Int BattleMapGrid = 25;
  if (this->has_battlemapgrid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::battlemapgrid(this), target, stream);
  }

  // int32 GridSize = 26;
  if (this->gridsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_gridsize(), target);
  }

  // int32 LordGrid = 27;
  if (this->lordgrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_lordgrid(), target);
  }

  // int32 SkillMoveTime = 28;
  if (this->skillmovetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_skillmovetime(), target);
  }

  // int32 SkillFlashTime = 29;
  if (this->skillflashtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_skillflashtime(), target);
  }

  // int32 MonsterDropRange = 30;
  if (this->monsterdroprange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_monsterdroprange(), target);
  }

  // int32 OffsetDistance = 31;
  if (this->offsetdistance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_offsetdistance(), target);
  }

  // int32 DropItemStayTime = 32;
  if (this->dropitemstaytime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_dropitemstaytime(), target);
  }

  // int32 BannerStayMaxtime = 33;
  if (this->bannerstaymaxtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_bannerstaymaxtime(), target);
  }

  // int32 LordMoveSpeed = 34;
  if (this->lordmovespeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_lordmovespeed(), target);
  }

  // int32 DropItemRange = 35;
  if (this->dropitemrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_dropitemrange(), target);
  }

  // int32 MaxRoom = 36;
  if (this->maxroom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_maxroom(), target);
  }

  // int32 LordHealthFactor = 37;
  if (this->lordhealthfactor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_lordhealthfactor(), target);
  }

  // repeated int32 RuneRefreshPrices = 38;
  {
    int byte_size = _runerefreshprices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          38, _internal_runerefreshprices(), byte_size, target);
    }
  }

  // int32 HeroMaxRuneCount = 39;
  if (this->heromaxrunecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_heromaxrunecount(), target);
  }

  // int32 MaxSoulStampDemand = 40;
  if (this->maxsoulstampdemand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_maxsoulstampdemand(), target);
  }

  // double SoulStampDemandFactor = 41;
  if (!(this->soulstampdemandfactor() <= 0 && this->soulstampdemandfactor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_soulstampdemandfactor(), target);
  }

  // int32 BagCapacity = 42;
  if (this->bagcapacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_bagcapacity(), target);
  }

  // int32 ResolveFactor = 43;
  if (this->resolvefactor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(43, this->_internal_resolvefactor(), target);
  }

  // int32 SkillFadeOutTime = 44;
  if (this->skillfadeouttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(44, this->_internal_skillfadeouttime(), target);
  }

  // int32 PvpEnemyLordGrid = 45;
  if (this->pvpenemylordgrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(45, this->_internal_pvpenemylordgrid(), target);
  }

  // repeated int32 PvpSceneBuffs = 46;
  {
    int byte_size = _pvpscenebuffs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          46, _internal_pvpscenebuffs(), byte_size, target);
    }
  }

  // int32 PvpFirstHandWaiting = 47;
  if (this->pvpfirsthandwaiting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_pvpfirsthandwaiting(), target);
  }

  // int32 PvpSecondHandWaiting = 48;
  if (this->pvpsecondhandwaiting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_pvpsecondhandwaiting(), target);
  }

  // int32 PvpStartCountDown = 49;
  if (this->pvpstartcountdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->_internal_pvpstartcountdown(), target);
  }

  // int32 PvpOverCountDown = 50;
  if (this->pvpovercountdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_pvpovercountdown(), target);
  }

  // .Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;
  if (this->has_soulinterest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::soulinterest(this), target, stream);
  }

  // int32 BattleHeroDieValue = 52;
  if (this->battleherodievalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(52, this->_internal_battleherodievalue(), target);
  }

  // int32 BattleMaxTimeValue = 53;
  if (this->battlemaxtimevalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(53, this->_internal_battlemaxtimevalue(), target);
  }

  // int32 BattleJumpTime = 54;
  if (this->battlejumptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_battlejumptime(), target);
  }

  // int32 ProfessionUpgradeCount = 55;
  if (this->professionupgradecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(55, this->_internal_professionupgradecount(), target);
  }

  // int32 HandCardLimit = 56;
  if (this->handcardlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(56, this->_internal_handcardlimit(), target);
  }

  // repeated int32 ForgetCosts = 57;
  {
    int byte_size = _forgetcosts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          57, _internal_forgetcosts(), byte_size, target);
    }
  }

  // repeated int32 PrayCosts = 58;
  {
    int byte_size = _praycosts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          58, _internal_praycosts(), byte_size, target);
    }
  }

  // int32 CardLevelUpNeedNum = 59;
  if (this->cardlevelupneednum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(59, this->_internal_cardlevelupneednum(), target);
  }

  // int32 CardUseToDrawUnique = 60;
  if (this->cardusetodrawunique() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_cardusetodrawunique(), target);
  }

  // int32 OriginalHandCardLimit = 61;
  if (this->originalhandcardlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_originalhandcardlimit(), target);
  }

  // int32 UniqueSkillCardLimitCountOT = 62;
  if (this->uniqueskillcardlimitcountot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(62, this->_internal_uniqueskillcardlimitcountot(), target);
  }

  // int32 DropCoefficientInEliteRoom = 63;
  if (this->dropcoefficientineliteroom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(63, this->_internal_dropcoefficientineliteroom(), target);
  }

  // int32 DropCoefficientInBossRoom = 64;
  if (this->dropcoefficientinbossroom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(64, this->_internal_dropcoefficientinbossroom(), target);
  }

  // int32 HeroRebornTime = 65;
  if (this->heroreborntime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(65, this->_internal_heroreborntime(), target);
  }

  // int32 HeroRebornHpCostFactor = 66;
  if (this->herorebornhpcostfactor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(66, this->_internal_herorebornhpcostfactor(), target);
  }

  // int32 OriginalHandCardNum = 67;
  if (this->originalhandcardnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(67, this->_internal_originalhandcardnum(), target);
  }

  // int32 ChallengeFirstHandChance = 68;
  if (this->challengefirsthandchance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(68, this->_internal_challengefirsthandchance(), target);
  }

  // int32 PvpChallengeTime = 69;
  if (this->pvpchallengetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(69, this->_internal_pvpchallengetime(), target);
  }

  // int32 FirstHandEnergyCardCount = 70;
  if (this->firsthandenergycardcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(70, this->_internal_firsthandenergycardcount(), target);
  }

  // int32 SecondtHandEnergyCardCount = 71;
  if (this->secondthandenergycardcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(71, this->_internal_secondthandenergycardcount(), target);
  }

  // int32 PvpFirstHandTime = 72;
  if (this->pvpfirsthandtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(72, this->_internal_pvpfirsthandtime(), target);
  }

  // int32 PvpSecondHandTime = 73;
  if (this->pvpsecondhandtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(73, this->_internal_pvpsecondhandtime(), target);
  }

  // int32 LordCardSpacing = 74;
  if (this->lordcardspacing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(74, this->_internal_lordcardspacing(), target);
  }

  // int32 EnergyCardCheckUp = 75;
  if (this->energycardcheckup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(75, this->_internal_energycardcheckup(), target);
  }

  // int32 PvpOriginalHandCardNum = 76;
  if (this->pvporiginalhandcardnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(76, this->_internal_pvporiginalhandcardnum(), target);
  }

  // repeated double BattleSpeedUpRates = 77;
  if (this->_internal_battlespeeduprates_size() > 0) {
    target = stream->WriteFixedPacked(77, _internal_battlespeeduprates(), target);
  }

  // int32 HangUpIntervalTime = 78;
  if (this->hangupintervaltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(78, this->_internal_hangupintervaltime(), target);
  }

  // int32 NextWaveAppearInterval = 79;
  if (this->nextwaveappearinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(79, this->_internal_nextwaveappearinterval(), target);
  }

  // .Config.BattleParamTemplate.Dice_ Dice = 80;
  if (this->has_dice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        80, _Internal::dice(this), target, stream);
  }

  // int32 RemainsCompoundOriginalCount = 81;
  if (this->remainscompoundoriginalcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(81, this->_internal_remainscompoundoriginalcount(), target);
  }

  // .Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;
  if (this->has_mazevaluefactor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        82, _Internal::mazevaluefactor(this), target, stream);
  }

  // int32 BattleDashTime = 83;
  if (this->battledashtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(83, this->_internal_battledashtime(), target);
  }

  // int32 BattleDashBackTime = 84;
  if (this->battledashbacktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(84, this->_internal_battledashbacktime(), target);
  }

  // int32 BattleRoundSafeTime = 85;
  if (this->battleroundsafetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(85, this->_internal_battleroundsafetime(), target);
  }

  // int32 BattleWaitNextTime = 86;
  if (this->battlewaitnexttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(86, this->_internal_battlewaitnexttime(), target);
  }

  // int32 BattleRoundTime = 87;
  if (this->battleroundtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(87, this->_internal_battleroundtime(), target);
  }

  // int32 BattleHitFlyForce = 88;
  if (this->battlehitflyforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(88, this->_internal_battlehitflyforce(), target);
  }

  // int32 BattleHitDownForce = 89;
  if (this->battlehitdownforce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(89, this->_internal_battlehitdownforce(), target);
  }

  // int32 BattleHitFlyMaxHeight = 90;
  if (this->battlehitflymaxheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(90, this->_internal_battlehitflymaxheight(), target);
  }

  // int32 BattleGravity = 91;
  if (this->battlegravity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(91, this->_internal_battlegravity(), target);
  }

  // int32 BattleFlyUpGravity = 92;
  if (this->battleflyupgravity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(92, this->_internal_battleflyupgravity(), target);
  }

  // int32 BattleNearTopGravity = 93;
  if (this->battleneartopgravity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(93, this->_internal_battleneartopgravity(), target);
  }

  // int32 BattleNearTopSpeed = 94;
  if (this->battleneartopspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(94, this->_internal_battleneartopspeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Config.BattleParamTemplate)
  return target;
}

size_t BattleParamTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config.BattleParamTemplate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 BattleMapSizes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->battlemapsizes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _battlemapsizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 RuneRefreshPrices = 38;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->runerefreshprices_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _runerefreshprices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 PvpSceneBuffs = 46;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pvpscenebuffs_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pvpscenebuffs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ForgetCosts = 57;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->forgetcosts_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _forgetcosts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 PrayCosts = 58;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->praycosts_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _praycosts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double BattleSpeedUpRates = 77;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_battlespeeduprates_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _battlespeeduprates_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ DodgeEffectLimit = 3;
  if (this->has_dodgeeffectlimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dodgeeffectlimit_);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ CritEffectLimit = 4;
  if (this->has_criteffectlimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *criteffectlimit_);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ CritDamEffectLimit = 5;
  if (this->has_critdameffectlimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *critdameffectlimit_);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ DefenseRateEffectLimit = 6;
  if (this->has_defenserateeffectlimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defenserateeffectlimit_);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ CoolDownLimit = 8;
  if (this->has_cooldownlimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cooldownlimit_);
  }

  // .Config.BattleParamTemplate.Elementeffectlimit_ ElementEffectLimit = 9;
  if (this->has_elementeffectlimit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *elementeffectlimit_);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ DamageCorrectionRange = 13;
  if (this->has_damagecorrectionrange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *damagecorrectionrange_);
  }

  // .Config.BattleParamTemplate.Dodgeeffectlimit_ BlockEffectLimit = 17;
  if (this->has_blockeffectlimit()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blockeffectlimit_);
  }

  // .Position2Int BattleMapGrid = 25;
  if (this->has_battlemapgrid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battlemapgrid_);
  }

  // .Config.BattleParamTemplate.Soulinterest_ SoulInterest = 51;
  if (this->has_soulinterest()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *soulinterest_);
  }

  // .Config.BattleParamTemplate.Dice_ Dice = 80;
  if (this->has_dice()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dice_);
  }

  // .Config.BattleParamTemplate.Mazevaluefactor_ MazeValueFactor = 82;
  if (this->has_mazevaluefactor()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mazevaluefactor_);
  }

  // int32 BattleStartWaitTime = 1;
  if (this->battlestartwaittime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlestartwaittime());
  }

  // int32 DamageReduceLimit = 7;
  if (this->damagereducelimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_damagereducelimit());
  }

  // double ElementAttackBase = 10;
  if (!(this->elementattackbase() <= 0 && this->elementattackbase() >= 0)) {
    total_size += 1 + 8;
  }

  // double ElementDefenseBase = 11;
  if (!(this->elementdefensebase() <= 0 && this->elementdefensebase() >= 0)) {
    total_size += 1 + 8;
  }

  // double DodgeCorrection = 14;
  if (!(this->dodgecorrection() <= 0 && this->dodgecorrection() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 ElementEffectBase = 12;
  if (this->elementeffectbase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_elementeffectbase());
  }

  // int32 BlckEffect = 16;
  if (this->blckeffect() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blckeffect());
  }

  // double CritCorrection = 15;
  if (!(this->critcorrection() <= 0 && this->critcorrection() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 HeroMaxEnergyValue = 18;
  if (this->heromaxenergyvalue() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heromaxenergyvalue());
  }

  // int32 HeroMaxEnergyNum = 19;
  if (this->heromaxenergynum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heromaxenergynum());
  }

  // double MaxAttackSpeed = 21;
  if (!(this->maxattackspeed() <= 0 && this->maxattackspeed() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 LordMaxEnergy = 20;
  if (this->lordmaxenergy() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lordmaxenergy());
  }

  // int32 HeroSkillCount = 22;
  if (this->heroskillcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heroskillcount());
  }

  // int32 MonsterWalkModeTime = 23;
  if (this->monsterwalkmodetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsterwalkmodetime());
  }

  // int32 MonsterDropModeTime = 24;
  if (this->monsterdropmodetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsterdropmodetime());
  }

  // int32 GridSize = 26;
  if (this->gridsize() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gridsize());
  }

  // int32 LordGrid = 27;
  if (this->lordgrid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lordgrid());
  }

  // int32 SkillMoveTime = 28;
  if (this->skillmovetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skillmovetime());
  }

  // int32 SkillFlashTime = 29;
  if (this->skillflashtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skillflashtime());
  }

  // int32 MonsterDropRange = 30;
  if (this->monsterdroprange() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monsterdroprange());
  }

  // int32 OffsetDistance = 31;
  if (this->offsetdistance() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offsetdistance());
  }

  // int32 DropItemStayTime = 32;
  if (this->dropitemstaytime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dropitemstaytime());
  }

  // int32 BannerStayMaxtime = 33;
  if (this->bannerstaymaxtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bannerstaymaxtime());
  }

  // int32 LordMoveSpeed = 34;
  if (this->lordmovespeed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lordmovespeed());
  }

  // int32 DropItemRange = 35;
  if (this->dropitemrange() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dropitemrange());
  }

  // int32 MaxRoom = 36;
  if (this->maxroom() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxroom());
  }

  // int32 LordHealthFactor = 37;
  if (this->lordhealthfactor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lordhealthfactor());
  }

  // int32 HeroMaxRuneCount = 39;
  if (this->heromaxrunecount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heromaxrunecount());
  }

  // int32 MaxSoulStampDemand = 40;
  if (this->maxsoulstampdemand() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxsoulstampdemand());
  }

  // double SoulStampDemandFactor = 41;
  if (!(this->soulstampdemandfactor() <= 0 && this->soulstampdemandfactor() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 BagCapacity = 42;
  if (this->bagcapacity() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bagcapacity());
  }

  // int32 ResolveFactor = 43;
  if (this->resolvefactor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_resolvefactor());
  }

  // int32 SkillFadeOutTime = 44;
  if (this->skillfadeouttime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skillfadeouttime());
  }

  // int32 PvpEnemyLordGrid = 45;
  if (this->pvpenemylordgrid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pvpenemylordgrid());
  }

  // int32 PvpFirstHandWaiting = 47;
  if (this->pvpfirsthandwaiting() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pvpfirsthandwaiting());
  }

  // int32 PvpSecondHandWaiting = 48;
  if (this->pvpsecondhandwaiting() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pvpsecondhandwaiting());
  }

  // int32 PvpStartCountDown = 49;
  if (this->pvpstartcountdown() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pvpstartcountdown());
  }

  // int32 PvpOverCountDown = 50;
  if (this->pvpovercountdown() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pvpovercountdown());
  }

  // int32 BattleHeroDieValue = 52;
  if (this->battleherodievalue() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battleherodievalue());
  }

  // int32 BattleMaxTimeValue = 53;
  if (this->battlemaxtimevalue() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlemaxtimevalue());
  }

  // int32 BattleJumpTime = 54;
  if (this->battlejumptime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlejumptime());
  }

  // int32 ProfessionUpgradeCount = 55;
  if (this->professionupgradecount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_professionupgradecount());
  }

  // int32 HandCardLimit = 56;
  if (this->handcardlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_handcardlimit());
  }

  // int32 CardLevelUpNeedNum = 59;
  if (this->cardlevelupneednum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cardlevelupneednum());
  }

  // int32 CardUseToDrawUnique = 60;
  if (this->cardusetodrawunique() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cardusetodrawunique());
  }

  // int32 OriginalHandCardLimit = 61;
  if (this->originalhandcardlimit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originalhandcardlimit());
  }

  // int32 UniqueSkillCardLimitCountOT = 62;
  if (this->uniqueskillcardlimitcountot() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uniqueskillcardlimitcountot());
  }

  // int32 DropCoefficientInEliteRoom = 63;
  if (this->dropcoefficientineliteroom() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dropcoefficientineliteroom());
  }

  // int32 DropCoefficientInBossRoom = 64;
  if (this->dropcoefficientinbossroom() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dropcoefficientinbossroom());
  }

  // int32 HeroRebornTime = 65;
  if (this->heroreborntime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_heroreborntime());
  }

  // int32 HeroRebornHpCostFactor = 66;
  if (this->herorebornhpcostfactor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_herorebornhpcostfactor());
  }

  // int32 OriginalHandCardNum = 67;
  if (this->originalhandcardnum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_originalhandcardnum());
  }

  // int32 ChallengeFirstHandChance = 68;
  if (this->challengefirsthandchance() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_challengefirsthandchance());
  }

  // int32 PvpChallengeTime = 69;
  if (this->pvpchallengetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pvpchallengetime());
  }

  // int32 FirstHandEnergyCardCount = 70;
  if (this->firsthandenergycardcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_firsthandenergycardcount());
  }

  // int32 SecondtHandEnergyCardCount = 71;
  if (this->secondthandenergycardcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_secondthandenergycardcount());
  }

  // int32 PvpFirstHandTime = 72;
  if (this->pvpfirsthandtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pvpfirsthandtime());
  }

  // int32 PvpSecondHandTime = 73;
  if (this->pvpsecondhandtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pvpsecondhandtime());
  }

  // int32 LordCardSpacing = 74;
  if (this->lordcardspacing() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lordcardspacing());
  }

  // int32 EnergyCardCheckUp = 75;
  if (this->energycardcheckup() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_energycardcheckup());
  }

  // int32 PvpOriginalHandCardNum = 76;
  if (this->pvporiginalhandcardnum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pvporiginalhandcardnum());
  }

  // int32 HangUpIntervalTime = 78;
  if (this->hangupintervaltime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hangupintervaltime());
  }

  // int32 NextWaveAppearInterval = 79;
  if (this->nextwaveappearinterval() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nextwaveappearinterval());
  }

  // int32 RemainsCompoundOriginalCount = 81;
  if (this->remainscompoundoriginalcount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_remainscompoundoriginalcount());
  }

  // int32 BattleDashTime = 83;
  if (this->battledashtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battledashtime());
  }

  // int32 BattleDashBackTime = 84;
  if (this->battledashbacktime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battledashbacktime());
  }

  // int32 BattleRoundSafeTime = 85;
  if (this->battleroundsafetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battleroundsafetime());
  }

  // int32 BattleWaitNextTime = 86;
  if (this->battlewaitnexttime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlewaitnexttime());
  }

  // int32 BattleRoundTime = 87;
  if (this->battleroundtime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battleroundtime());
  }

  // int32 BattleHitFlyForce = 88;
  if (this->battlehitflyforce() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlehitflyforce());
  }

  // int32 BattleHitDownForce = 89;
  if (this->battlehitdownforce() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlehitdownforce());
  }

  // int32 BattleHitFlyMaxHeight = 90;
  if (this->battlehitflymaxheight() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlehitflymaxheight());
  }

  // int32 BattleGravity = 91;
  if (this->battlegravity() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battlegravity());
  }

  // int32 BattleFlyUpGravity = 92;
  if (this->battleflyupgravity() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battleflyupgravity());
  }

  // int32 BattleNearTopGravity = 93;
  if (this->battleneartopgravity() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battleneartopgravity());
  }

  // int32 BattleNearTopSpeed = 94;
  if (this->battleneartopspeed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battleneartopspeed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleParamTemplate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config.BattleParamTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleParamTemplate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleParamTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config.BattleParamTemplate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config.BattleParamTemplate)
    MergeFrom(*source);
  }
}

void BattleParamTemplate::MergeFrom(const BattleParamTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config.BattleParamTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battlemapsizes_.MergeFrom(from.battlemapsizes_);
  runerefreshprices_.MergeFrom(from.runerefreshprices_);
  pvpscenebuffs_.MergeFrom(from.pvpscenebuffs_);
  forgetcosts_.MergeFrom(from.forgetcosts_);
  praycosts_.MergeFrom(from.praycosts_);
  battlespeeduprates_.MergeFrom(from.battlespeeduprates_);
  if (from.has_dodgeeffectlimit()) {
    _internal_mutable_dodgeeffectlimit()->::Config::BattleParamTemplate_Dodgeeffectlimit_::MergeFrom(from._internal_dodgeeffectlimit());
  }
  if (from.has_criteffectlimit()) {
    _internal_mutable_criteffectlimit()->::Config::BattleParamTemplate_Dodgeeffectlimit_::MergeFrom(from._internal_criteffectlimit());
  }
  if (from.has_critdameffectlimit()) {
    _internal_mutable_critdameffectlimit()->::Config::BattleParamTemplate_Dodgeeffectlimit_::MergeFrom(from._internal_critdameffectlimit());
  }
  if (from.has_defenserateeffectlimit()) {
    _internal_mutable_defenserateeffectlimit()->::Config::BattleParamTemplate_Dodgeeffectlimit_::MergeFrom(from._internal_defenserateeffectlimit());
  }
  if (from.has_cooldownlimit()) {
    _internal_mutable_cooldownlimit()->::Config::BattleParamTemplate_Dodgeeffectlimit_::MergeFrom(from._internal_cooldownlimit());
  }
  if (from.has_elementeffectlimit()) {
    _internal_mutable_elementeffectlimit()->::Config::BattleParamTemplate_Elementeffectlimit_::MergeFrom(from._internal_elementeffectlimit());
  }
  if (from.has_damagecorrectionrange()) {
    _internal_mutable_damagecorrectionrange()->::Config::BattleParamTemplate_Dodgeeffectlimit_::MergeFrom(from._internal_damagecorrectionrange());
  }
  if (from.has_blockeffectlimit()) {
    _internal_mutable_blockeffectlimit()->::Config::BattleParamTemplate_Dodgeeffectlimit_::MergeFrom(from._internal_blockeffectlimit());
  }
  if (from.has_battlemapgrid()) {
    _internal_mutable_battlemapgrid()->::Position2Int::MergeFrom(from._internal_battlemapgrid());
  }
  if (from.has_soulinterest()) {
    _internal_mutable_soulinterest()->::Config::BattleParamTemplate_Soulinterest_::MergeFrom(from._internal_soulinterest());
  }
  if (from.has_dice()) {
    _internal_mutable_dice()->::Config::BattleParamTemplate_Dice_::MergeFrom(from._internal_dice());
  }
  if (from.has_mazevaluefactor()) {
    _internal_mutable_mazevaluefactor()->::Config::BattleParamTemplate_Mazevaluefactor_::MergeFrom(from._internal_mazevaluefactor());
  }
  if (from.battlestartwaittime() != 0) {
    _internal_set_battlestartwaittime(from._internal_battlestartwaittime());
  }
  if (from.damagereducelimit() != 0) {
    _internal_set_damagereducelimit(from._internal_damagereducelimit());
  }
  if (!(from.elementattackbase() <= 0 && from.elementattackbase() >= 0)) {
    _internal_set_elementattackbase(from._internal_elementattackbase());
  }
  if (!(from.elementdefensebase() <= 0 && from.elementdefensebase() >= 0)) {
    _internal_set_elementdefensebase(from._internal_elementdefensebase());
  }
  if (!(from.dodgecorrection() <= 0 && from.dodgecorrection() >= 0)) {
    _internal_set_dodgecorrection(from._internal_dodgecorrection());
  }
  if (from.elementeffectbase() != 0) {
    _internal_set_elementeffectbase(from._internal_elementeffectbase());
  }
  if (from.blckeffect() != 0) {
    _internal_set_blckeffect(from._internal_blckeffect());
  }
  if (!(from.critcorrection() <= 0 && from.critcorrection() >= 0)) {
    _internal_set_critcorrection(from._internal_critcorrection());
  }
  if (from.heromaxenergyvalue() != 0) {
    _internal_set_heromaxenergyvalue(from._internal_heromaxenergyvalue());
  }
  if (from.heromaxenergynum() != 0) {
    _internal_set_heromaxenergynum(from._internal_heromaxenergynum());
  }
  if (!(from.maxattackspeed() <= 0 && from.maxattackspeed() >= 0)) {
    _internal_set_maxattackspeed(from._internal_maxattackspeed());
  }
  if (from.lordmaxenergy() != 0) {
    _internal_set_lordmaxenergy(from._internal_lordmaxenergy());
  }
  if (from.heroskillcount() != 0) {
    _internal_set_heroskillcount(from._internal_heroskillcount());
  }
  if (from.monsterwalkmodetime() != 0) {
    _internal_set_monsterwalkmodetime(from._internal_monsterwalkmodetime());
  }
  if (from.monsterdropmodetime() != 0) {
    _internal_set_monsterdropmodetime(from._internal_monsterdropmodetime());
  }
  if (from.gridsize() != 0) {
    _internal_set_gridsize(from._internal_gridsize());
  }
  if (from.lordgrid() != 0) {
    _internal_set_lordgrid(from._internal_lordgrid());
  }
  if (from.skillmovetime() != 0) {
    _internal_set_skillmovetime(from._internal_skillmovetime());
  }
  if (from.skillflashtime() != 0) {
    _internal_set_skillflashtime(from._internal_skillflashtime());
  }
  if (from.monsterdroprange() != 0) {
    _internal_set_monsterdroprange(from._internal_monsterdroprange());
  }
  if (from.offsetdistance() != 0) {
    _internal_set_offsetdistance(from._internal_offsetdistance());
  }
  if (from.dropitemstaytime() != 0) {
    _internal_set_dropitemstaytime(from._internal_dropitemstaytime());
  }
  if (from.bannerstaymaxtime() != 0) {
    _internal_set_bannerstaymaxtime(from._internal_bannerstaymaxtime());
  }
  if (from.lordmovespeed() != 0) {
    _internal_set_lordmovespeed(from._internal_lordmovespeed());
  }
  if (from.dropitemrange() != 0) {
    _internal_set_dropitemrange(from._internal_dropitemrange());
  }
  if (from.maxroom() != 0) {
    _internal_set_maxroom(from._internal_maxroom());
  }
  if (from.lordhealthfactor() != 0) {
    _internal_set_lordhealthfactor(from._internal_lordhealthfactor());
  }
  if (from.heromaxrunecount() != 0) {
    _internal_set_heromaxrunecount(from._internal_heromaxrunecount());
  }
  if (from.maxsoulstampdemand() != 0) {
    _internal_set_maxsoulstampdemand(from._internal_maxsoulstampdemand());
  }
  if (!(from.soulstampdemandfactor() <= 0 && from.soulstampdemandfactor() >= 0)) {
    _internal_set_soulstampdemandfactor(from._internal_soulstampdemandfactor());
  }
  if (from.bagcapacity() != 0) {
    _internal_set_bagcapacity(from._internal_bagcapacity());
  }
  if (from.resolvefactor() != 0) {
    _internal_set_resolvefactor(from._internal_resolvefactor());
  }
  if (from.skillfadeouttime() != 0) {
    _internal_set_skillfadeouttime(from._internal_skillfadeouttime());
  }
  if (from.pvpenemylordgrid() != 0) {
    _internal_set_pvpenemylordgrid(from._internal_pvpenemylordgrid());
  }
  if (from.pvpfirsthandwaiting() != 0) {
    _internal_set_pvpfirsthandwaiting(from._internal_pvpfirsthandwaiting());
  }
  if (from.pvpsecondhandwaiting() != 0) {
    _internal_set_pvpsecondhandwaiting(from._internal_pvpsecondhandwaiting());
  }
  if (from.pvpstartcountdown() != 0) {
    _internal_set_pvpstartcountdown(from._internal_pvpstartcountdown());
  }
  if (from.pvpovercountdown() != 0) {
    _internal_set_pvpovercountdown(from._internal_pvpovercountdown());
  }
  if (from.battleherodievalue() != 0) {
    _internal_set_battleherodievalue(from._internal_battleherodievalue());
  }
  if (from.battlemaxtimevalue() != 0) {
    _internal_set_battlemaxtimevalue(from._internal_battlemaxtimevalue());
  }
  if (from.battlejumptime() != 0) {
    _internal_set_battlejumptime(from._internal_battlejumptime());
  }
  if (from.professionupgradecount() != 0) {
    _internal_set_professionupgradecount(from._internal_professionupgradecount());
  }
  if (from.handcardlimit() != 0) {
    _internal_set_handcardlimit(from._internal_handcardlimit());
  }
  if (from.cardlevelupneednum() != 0) {
    _internal_set_cardlevelupneednum(from._internal_cardlevelupneednum());
  }
  if (from.cardusetodrawunique() != 0) {
    _internal_set_cardusetodrawunique(from._internal_cardusetodrawunique());
  }
  if (from.originalhandcardlimit() != 0) {
    _internal_set_originalhandcardlimit(from._internal_originalhandcardlimit());
  }
  if (from.uniqueskillcardlimitcountot() != 0) {
    _internal_set_uniqueskillcardlimitcountot(from._internal_uniqueskillcardlimitcountot());
  }
  if (from.dropcoefficientineliteroom() != 0) {
    _internal_set_dropcoefficientineliteroom(from._internal_dropcoefficientineliteroom());
  }
  if (from.dropcoefficientinbossroom() != 0) {
    _internal_set_dropcoefficientinbossroom(from._internal_dropcoefficientinbossroom());
  }
  if (from.heroreborntime() != 0) {
    _internal_set_heroreborntime(from._internal_heroreborntime());
  }
  if (from.herorebornhpcostfactor() != 0) {
    _internal_set_herorebornhpcostfactor(from._internal_herorebornhpcostfactor());
  }
  if (from.originalhandcardnum() != 0) {
    _internal_set_originalhandcardnum(from._internal_originalhandcardnum());
  }
  if (from.challengefirsthandchance() != 0) {
    _internal_set_challengefirsthandchance(from._internal_challengefirsthandchance());
  }
  if (from.pvpchallengetime() != 0) {
    _internal_set_pvpchallengetime(from._internal_pvpchallengetime());
  }
  if (from.firsthandenergycardcount() != 0) {
    _internal_set_firsthandenergycardcount(from._internal_firsthandenergycardcount());
  }
  if (from.secondthandenergycardcount() != 0) {
    _internal_set_secondthandenergycardcount(from._internal_secondthandenergycardcount());
  }
  if (from.pvpfirsthandtime() != 0) {
    _internal_set_pvpfirsthandtime(from._internal_pvpfirsthandtime());
  }
  if (from.pvpsecondhandtime() != 0) {
    _internal_set_pvpsecondhandtime(from._internal_pvpsecondhandtime());
  }
  if (from.lordcardspacing() != 0) {
    _internal_set_lordcardspacing(from._internal_lordcardspacing());
  }
  if (from.energycardcheckup() != 0) {
    _internal_set_energycardcheckup(from._internal_energycardcheckup());
  }
  if (from.pvporiginalhandcardnum() != 0) {
    _internal_set_pvporiginalhandcardnum(from._internal_pvporiginalhandcardnum());
  }
  if (from.hangupintervaltime() != 0) {
    _internal_set_hangupintervaltime(from._internal_hangupintervaltime());
  }
  if (from.nextwaveappearinterval() != 0) {
    _internal_set_nextwaveappearinterval(from._internal_nextwaveappearinterval());
  }
  if (from.remainscompoundoriginalcount() != 0) {
    _internal_set_remainscompoundoriginalcount(from._internal_remainscompoundoriginalcount());
  }
  if (from.battledashtime() != 0) {
    _internal_set_battledashtime(from._internal_battledashtime());
  }
  if (from.battledashbacktime() != 0) {
    _internal_set_battledashbacktime(from._internal_battledashbacktime());
  }
  if (from.battleroundsafetime() != 0) {
    _internal_set_battleroundsafetime(from._internal_battleroundsafetime());
  }
  if (from.battlewaitnexttime() != 0) {
    _internal_set_battlewaitnexttime(from._internal_battlewaitnexttime());
  }
  if (from.battleroundtime() != 0) {
    _internal_set_battleroundtime(from._internal_battleroundtime());
  }
  if (from.battlehitflyforce() != 0) {
    _internal_set_battlehitflyforce(from._internal_battlehitflyforce());
  }
  if (from.battlehitdownforce() != 0) {
    _internal_set_battlehitdownforce(from._internal_battlehitdownforce());
  }
  if (from.battlehitflymaxheight() != 0) {
    _internal_set_battlehitflymaxheight(from._internal_battlehitflymaxheight());
  }
  if (from.battlegravity() != 0) {
    _internal_set_battlegravity(from._internal_battlegravity());
  }
  if (from.battleflyupgravity() != 0) {
    _internal_set_battleflyupgravity(from._internal_battleflyupgravity());
  }
  if (from.battleneartopgravity() != 0) {
    _internal_set_battleneartopgravity(from._internal_battleneartopgravity());
  }
  if (from.battleneartopspeed() != 0) {
    _internal_set_battleneartopspeed(from._internal_battleneartopspeed());
  }
}

void BattleParamTemplate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config.BattleParamTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleParamTemplate::CopyFrom(const BattleParamTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config.BattleParamTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleParamTemplate::IsInitialized() const {
  return true;
}

void BattleParamTemplate::InternalSwap(BattleParamTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  battlemapsizes_.InternalSwap(&other->battlemapsizes_);
  runerefreshprices_.InternalSwap(&other->runerefreshprices_);
  pvpscenebuffs_.InternalSwap(&other->pvpscenebuffs_);
  forgetcosts_.InternalSwap(&other->forgetcosts_);
  praycosts_.InternalSwap(&other->praycosts_);
  battlespeeduprates_.InternalSwap(&other->battlespeeduprates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleParamTemplate, battleneartopspeed_)
      + sizeof(BattleParamTemplate::battleneartopspeed_)
      - PROTOBUF_FIELD_OFFSET(BattleParamTemplate, dodgeeffectlimit_)>(
          reinterpret_cast<char*>(&dodgeeffectlimit_),
          reinterpret_cast<char*>(&other->dodgeeffectlimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleParamTemplate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Config::BattleParamTemplate_Dodgeeffectlimit_* Arena::CreateMaybeMessage< ::Config::BattleParamTemplate_Dodgeeffectlimit_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::BattleParamTemplate_Dodgeeffectlimit_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Config::BattleParamTemplate_Elementeffectlimit_* Arena::CreateMaybeMessage< ::Config::BattleParamTemplate_Elementeffectlimit_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::BattleParamTemplate_Elementeffectlimit_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Config::BattleParamTemplate_Soulinterest_* Arena::CreateMaybeMessage< ::Config::BattleParamTemplate_Soulinterest_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::BattleParamTemplate_Soulinterest_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Config::BattleParamTemplate_Dice_* Arena::CreateMaybeMessage< ::Config::BattleParamTemplate_Dice_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::BattleParamTemplate_Dice_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Config::BattleParamTemplate_Mazevaluefactor_* Arena::CreateMaybeMessage< ::Config::BattleParamTemplate_Mazevaluefactor_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::BattleParamTemplate_Mazevaluefactor_ >(arena);
}
template<> PROTOBUF_NOINLINE ::Config::BattleParamTemplate* Arena::CreateMaybeMessage< ::Config::BattleParamTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Config::BattleParamTemplate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
