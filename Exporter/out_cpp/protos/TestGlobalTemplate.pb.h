// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/TestGlobalTemplate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fTestGlobalTemplate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fTestGlobalTemplate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/Position3d.pb.h"
#include "protos/PositionArray3d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fTestGlobalTemplate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fTestGlobalTemplate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fTestGlobalTemplate_2eproto;
namespace Config {
class TestGlobalTemplate;
class TestGlobalTemplateDefaultTypeInternal;
extern TestGlobalTemplateDefaultTypeInternal _TestGlobalTemplate_default_instance_;
class TestGlobalTemplate_TestObj1_;
class TestGlobalTemplate_TestObj1_DefaultTypeInternal;
extern TestGlobalTemplate_TestObj1_DefaultTypeInternal _TestGlobalTemplate_TestObj1__default_instance_;
class TestGlobalTemplate_TestObjArray1_;
class TestGlobalTemplate_TestObjArray1_DefaultTypeInternal;
extern TestGlobalTemplate_TestObjArray1_DefaultTypeInternal _TestGlobalTemplate_TestObjArray1__default_instance_;
class TestGlobalTemplate_TestObjArray_;
class TestGlobalTemplate_TestObjArray_DefaultTypeInternal;
extern TestGlobalTemplate_TestObjArray_DefaultTypeInternal _TestGlobalTemplate_TestObjArray__default_instance_;
class TestGlobalTemplate_TestObj_;
class TestGlobalTemplate_TestObj_DefaultTypeInternal;
extern TestGlobalTemplate_TestObj_DefaultTypeInternal _TestGlobalTemplate_TestObj__default_instance_;
}  // namespace Config
PROTOBUF_NAMESPACE_OPEN
template<> ::Config::TestGlobalTemplate* Arena::CreateMaybeMessage<::Config::TestGlobalTemplate>(Arena*);
template<> ::Config::TestGlobalTemplate_TestObj1_* Arena::CreateMaybeMessage<::Config::TestGlobalTemplate_TestObj1_>(Arena*);
template<> ::Config::TestGlobalTemplate_TestObjArray1_* Arena::CreateMaybeMessage<::Config::TestGlobalTemplate_TestObjArray1_>(Arena*);
template<> ::Config::TestGlobalTemplate_TestObjArray_* Arena::CreateMaybeMessage<::Config::TestGlobalTemplate_TestObjArray_>(Arena*);
template<> ::Config::TestGlobalTemplate_TestObj_* Arena::CreateMaybeMessage<::Config::TestGlobalTemplate_TestObj_>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Config {

// ===================================================================

class TestGlobalTemplate_TestObj_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.TestGlobalTemplate.TestObj_) */ {
 public:
  inline TestGlobalTemplate_TestObj_() : TestGlobalTemplate_TestObj_(nullptr) {}
  virtual ~TestGlobalTemplate_TestObj_();

  TestGlobalTemplate_TestObj_(const TestGlobalTemplate_TestObj_& from);
  TestGlobalTemplate_TestObj_(TestGlobalTemplate_TestObj_&& from) noexcept
    : TestGlobalTemplate_TestObj_() {
    *this = ::std::move(from);
  }

  inline TestGlobalTemplate_TestObj_& operator=(const TestGlobalTemplate_TestObj_& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestGlobalTemplate_TestObj_& operator=(TestGlobalTemplate_TestObj_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestGlobalTemplate_TestObj_& default_instance();

  static inline const TestGlobalTemplate_TestObj_* internal_default_instance() {
    return reinterpret_cast<const TestGlobalTemplate_TestObj_*>(
               &_TestGlobalTemplate_TestObj__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestGlobalTemplate_TestObj_& a, TestGlobalTemplate_TestObj_& b) {
    a.Swap(&b);
  }
  inline void Swap(TestGlobalTemplate_TestObj_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestGlobalTemplate_TestObj_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestGlobalTemplate_TestObj_* New() const final {
    return CreateMaybeMessage<TestGlobalTemplate_TestObj_>(nullptr);
  }

  TestGlobalTemplate_TestObj_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestGlobalTemplate_TestObj_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestGlobalTemplate_TestObj_& from);
  void MergeFrom(const TestGlobalTemplate_TestObj_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestGlobalTemplate_TestObj_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.TestGlobalTemplate.TestObj_";
  }
  protected:
  explicit TestGlobalTemplate_TestObj_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fTestGlobalTemplate_2eproto);
    return ::descriptor_table_protos_2fTestGlobalTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
  };
  // int32 a = 1;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float b = 2;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // bool c = 3;
  void clear_c();
  bool c() const;
  void set_c(bool value);
  private:
  bool _internal_c() const;
  void _internal_set_c(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Config.TestGlobalTemplate.TestObj_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  float b_;
  bool c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fTestGlobalTemplate_2eproto;
};
// -------------------------------------------------------------------

class TestGlobalTemplate_TestObj1_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.TestGlobalTemplate.TestObj1_) */ {
 public:
  inline TestGlobalTemplate_TestObj1_() : TestGlobalTemplate_TestObj1_(nullptr) {}
  virtual ~TestGlobalTemplate_TestObj1_();

  TestGlobalTemplate_TestObj1_(const TestGlobalTemplate_TestObj1_& from);
  TestGlobalTemplate_TestObj1_(TestGlobalTemplate_TestObj1_&& from) noexcept
    : TestGlobalTemplate_TestObj1_() {
    *this = ::std::move(from);
  }

  inline TestGlobalTemplate_TestObj1_& operator=(const TestGlobalTemplate_TestObj1_& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestGlobalTemplate_TestObj1_& operator=(TestGlobalTemplate_TestObj1_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestGlobalTemplate_TestObj1_& default_instance();

  static inline const TestGlobalTemplate_TestObj1_* internal_default_instance() {
    return reinterpret_cast<const TestGlobalTemplate_TestObj1_*>(
               &_TestGlobalTemplate_TestObj1__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestGlobalTemplate_TestObj1_& a, TestGlobalTemplate_TestObj1_& b) {
    a.Swap(&b);
  }
  inline void Swap(TestGlobalTemplate_TestObj1_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestGlobalTemplate_TestObj1_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestGlobalTemplate_TestObj1_* New() const final {
    return CreateMaybeMessage<TestGlobalTemplate_TestObj1_>(nullptr);
  }

  TestGlobalTemplate_TestObj1_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestGlobalTemplate_TestObj1_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestGlobalTemplate_TestObj1_& from);
  void MergeFrom(const TestGlobalTemplate_TestObj1_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestGlobalTemplate_TestObj1_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.TestGlobalTemplate.TestObj1_";
  }
  protected:
  explicit TestGlobalTemplate_TestObj1_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fTestGlobalTemplate_2eproto);
    return ::descriptor_table_protos_2fTestGlobalTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsFieldNumber = 2,
    kAFieldNumber = 1,
    kVFieldNumber = 3,
  };
  // repeated float bs = 2;
  int bs_size() const;
  private:
  int _internal_bs_size() const;
  public:
  void clear_bs();
  private:
  float _internal_bs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bs() const;
  void _internal_add_bs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bs();
  public:
  float bs(int index) const;
  void set_bs(int index, float value);
  void add_bs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bs();

  // int32 a = 1;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool v = 3;
  void clear_v();
  bool v() const;
  void set_v(bool value);
  private:
  bool _internal_v() const;
  void _internal_set_v(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Config.TestGlobalTemplate.TestObj1_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bs_;
  mutable std::atomic<int> _bs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  bool v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fTestGlobalTemplate_2eproto;
};
// -------------------------------------------------------------------

class TestGlobalTemplate_TestObjArray_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.TestGlobalTemplate.TestObjArray_) */ {
 public:
  inline TestGlobalTemplate_TestObjArray_() : TestGlobalTemplate_TestObjArray_(nullptr) {}
  virtual ~TestGlobalTemplate_TestObjArray_();

  TestGlobalTemplate_TestObjArray_(const TestGlobalTemplate_TestObjArray_& from);
  TestGlobalTemplate_TestObjArray_(TestGlobalTemplate_TestObjArray_&& from) noexcept
    : TestGlobalTemplate_TestObjArray_() {
    *this = ::std::move(from);
  }

  inline TestGlobalTemplate_TestObjArray_& operator=(const TestGlobalTemplate_TestObjArray_& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestGlobalTemplate_TestObjArray_& operator=(TestGlobalTemplate_TestObjArray_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestGlobalTemplate_TestObjArray_& default_instance();

  static inline const TestGlobalTemplate_TestObjArray_* internal_default_instance() {
    return reinterpret_cast<const TestGlobalTemplate_TestObjArray_*>(
               &_TestGlobalTemplate_TestObjArray__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestGlobalTemplate_TestObjArray_& a, TestGlobalTemplate_TestObjArray_& b) {
    a.Swap(&b);
  }
  inline void Swap(TestGlobalTemplate_TestObjArray_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestGlobalTemplate_TestObjArray_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestGlobalTemplate_TestObjArray_* New() const final {
    return CreateMaybeMessage<TestGlobalTemplate_TestObjArray_>(nullptr);
  }

  TestGlobalTemplate_TestObjArray_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestGlobalTemplate_TestObjArray_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestGlobalTemplate_TestObjArray_& from);
  void MergeFrom(const TestGlobalTemplate_TestObjArray_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestGlobalTemplate_TestObjArray_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.TestGlobalTemplate.TestObjArray_";
  }
  protected:
  explicit TestGlobalTemplate_TestObjArray_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fTestGlobalTemplate_2eproto);
    return ::descriptor_table_protos_2fTestGlobalTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kCFieldNumber = 3,
  };
  // int32 a = 1;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 b = 2;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 c = 3;
  void clear_c();
  ::PROTOBUF_NAMESPACE_ID::int32 c() const;
  void set_c(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_c() const;
  void _internal_set_c(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Config.TestGlobalTemplate.TestObjArray_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  ::PROTOBUF_NAMESPACE_ID::int32 c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fTestGlobalTemplate_2eproto;
};
// -------------------------------------------------------------------

class TestGlobalTemplate_TestObjArray1_ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.TestGlobalTemplate.TestObjArray1_) */ {
 public:
  inline TestGlobalTemplate_TestObjArray1_() : TestGlobalTemplate_TestObjArray1_(nullptr) {}
  virtual ~TestGlobalTemplate_TestObjArray1_();

  TestGlobalTemplate_TestObjArray1_(const TestGlobalTemplate_TestObjArray1_& from);
  TestGlobalTemplate_TestObjArray1_(TestGlobalTemplate_TestObjArray1_&& from) noexcept
    : TestGlobalTemplate_TestObjArray1_() {
    *this = ::std::move(from);
  }

  inline TestGlobalTemplate_TestObjArray1_& operator=(const TestGlobalTemplate_TestObjArray1_& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestGlobalTemplate_TestObjArray1_& operator=(TestGlobalTemplate_TestObjArray1_&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestGlobalTemplate_TestObjArray1_& default_instance();

  static inline const TestGlobalTemplate_TestObjArray1_* internal_default_instance() {
    return reinterpret_cast<const TestGlobalTemplate_TestObjArray1_*>(
               &_TestGlobalTemplate_TestObjArray1__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestGlobalTemplate_TestObjArray1_& a, TestGlobalTemplate_TestObjArray1_& b) {
    a.Swap(&b);
  }
  inline void Swap(TestGlobalTemplate_TestObjArray1_* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestGlobalTemplate_TestObjArray1_* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestGlobalTemplate_TestObjArray1_* New() const final {
    return CreateMaybeMessage<TestGlobalTemplate_TestObjArray1_>(nullptr);
  }

  TestGlobalTemplate_TestObjArray1_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestGlobalTemplate_TestObjArray1_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestGlobalTemplate_TestObjArray1_& from);
  void MergeFrom(const TestGlobalTemplate_TestObjArray1_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestGlobalTemplate_TestObjArray1_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.TestGlobalTemplate.TestObjArray1_";
  }
  protected:
  explicit TestGlobalTemplate_TestObjArray1_(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fTestGlobalTemplate_2eproto);
    return ::descriptor_table_protos_2fTestGlobalTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsFieldNumber = 2,
    kAFieldNumber = 1,
  };
  // repeated float bs = 2;
  int bs_size() const;
  private:
  int _internal_bs_size() const;
  public:
  void clear_bs();
  private:
  float _internal_bs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bs() const;
  void _internal_add_bs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bs();
  public:
  float bs(int index) const;
  void set_bs(int index, float value);
  void add_bs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bs();

  // int32 a = 1;
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Config.TestGlobalTemplate.TestObjArray1_)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bs_;
  mutable std::atomic<int> _bs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fTestGlobalTemplate_2eproto;
};
// -------------------------------------------------------------------

class TestGlobalTemplate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Config.TestGlobalTemplate) */ {
 public:
  inline TestGlobalTemplate() : TestGlobalTemplate(nullptr) {}
  virtual ~TestGlobalTemplate();

  TestGlobalTemplate(const TestGlobalTemplate& from);
  TestGlobalTemplate(TestGlobalTemplate&& from) noexcept
    : TestGlobalTemplate() {
    *this = ::std::move(from);
  }

  inline TestGlobalTemplate& operator=(const TestGlobalTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestGlobalTemplate& operator=(TestGlobalTemplate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestGlobalTemplate& default_instance();

  static inline const TestGlobalTemplate* internal_default_instance() {
    return reinterpret_cast<const TestGlobalTemplate*>(
               &_TestGlobalTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TestGlobalTemplate& a, TestGlobalTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TestGlobalTemplate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestGlobalTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestGlobalTemplate* New() const final {
    return CreateMaybeMessage<TestGlobalTemplate>(nullptr);
  }

  TestGlobalTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestGlobalTemplate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestGlobalTemplate& from);
  void MergeFrom(const TestGlobalTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestGlobalTemplate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Config.TestGlobalTemplate";
  }
  protected:
  explicit TestGlobalTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protos_2fTestGlobalTemplate_2eproto);
    return ::descriptor_table_protos_2fTestGlobalTemplate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TestGlobalTemplate_TestObj_ TestObj_;
  typedef TestGlobalTemplate_TestObj1_ TestObj1_;
  typedef TestGlobalTemplate_TestObjArray_ TestObjArray_;
  typedef TestGlobalTemplate_TestObjArray1_ TestObjArray1_;

  // accessors -------------------------------------------------------

  enum : int {
    kTestStringArraysFieldNumber = 2,
    kTestIntArraysFieldNumber = 8,
    kTestFloatArraysFieldNumber = 9,
    kTestDoubleArraysFieldNumber = 10,
    kTestBoolArraysFieldNumber = 11,
    kTestObjArraysFieldNumber = 14,
    kTestObjArray1SFieldNumber = 15,
    kTestDefineFromGlobal2SFieldNumber = 17,
    kTestCustomObjArraysFieldNumber = 19,
    kTestStringFieldNumber = 4,
    kTestObjFieldNumber = 12,
    kTestObj1FieldNumber = 13,
    kTestDefineFromGlobalFieldNumber = 16,
    kTestCustomObjFieldNumber = 18,
    kTestString1FieldNumber = 3,
    kTestIntFieldNumber = 1,
    kTestFloatFieldNumber = 5,
    kTestDoubleFieldNumber = 6,
    kTestBoolFieldNumber = 7,
  };
  // repeated string TestStringArrays = 2;
  int teststringarrays_size() const;
  private:
  int _internal_teststringarrays_size() const;
  public:
  void clear_teststringarrays();
  const std::string& teststringarrays(int index) const;
  std::string* mutable_teststringarrays(int index);
  void set_teststringarrays(int index, const std::string& value);
  void set_teststringarrays(int index, std::string&& value);
  void set_teststringarrays(int index, const char* value);
  void set_teststringarrays(int index, const char* value, size_t size);
  std::string* add_teststringarrays();
  void add_teststringarrays(const std::string& value);
  void add_teststringarrays(std::string&& value);
  void add_teststringarrays(const char* value);
  void add_teststringarrays(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& teststringarrays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_teststringarrays();
  private:
  const std::string& _internal_teststringarrays(int index) const;
  std::string* _internal_add_teststringarrays();
  public:

  // repeated int32 TestIntArrays = 8;
  int testintarrays_size() const;
  private:
  int _internal_testintarrays_size() const;
  public:
  void clear_testintarrays();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_testintarrays(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_testintarrays() const;
  void _internal_add_testintarrays(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_testintarrays();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 testintarrays(int index) const;
  void set_testintarrays(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_testintarrays(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      testintarrays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_testintarrays();

  // repeated float TestFloatArrays = 9;
  int testfloatarrays_size() const;
  private:
  int _internal_testfloatarrays_size() const;
  public:
  void clear_testfloatarrays();
  private:
  float _internal_testfloatarrays(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_testfloatarrays() const;
  void _internal_add_testfloatarrays(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_testfloatarrays();
  public:
  float testfloatarrays(int index) const;
  void set_testfloatarrays(int index, float value);
  void add_testfloatarrays(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      testfloatarrays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_testfloatarrays();

  // repeated double TestDoubleArrays = 10;
  int testdoublearrays_size() const;
  private:
  int _internal_testdoublearrays_size() const;
  public:
  void clear_testdoublearrays();
  private:
  double _internal_testdoublearrays(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_testdoublearrays() const;
  void _internal_add_testdoublearrays(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_testdoublearrays();
  public:
  double testdoublearrays(int index) const;
  void set_testdoublearrays(int index, double value);
  void add_testdoublearrays(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      testdoublearrays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_testdoublearrays();

  // repeated bool TestBoolArrays = 11;
  int testboolarrays_size() const;
  private:
  int _internal_testboolarrays_size() const;
  public:
  void clear_testboolarrays();
  private:
  bool _internal_testboolarrays(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_testboolarrays() const;
  void _internal_add_testboolarrays(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_testboolarrays();
  public:
  bool testboolarrays(int index) const;
  void set_testboolarrays(int index, bool value);
  void add_testboolarrays(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      testboolarrays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_testboolarrays();

  // repeated .Config.TestGlobalTemplate.TestObjArray_ TestObjArrays = 14;
  int testobjarrays_size() const;
  private:
  int _internal_testobjarrays_size() const;
  public:
  void clear_testobjarrays();
  ::Config::TestGlobalTemplate_TestObjArray_* mutable_testobjarrays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Config::TestGlobalTemplate_TestObjArray_ >*
      mutable_testobjarrays();
  private:
  const ::Config::TestGlobalTemplate_TestObjArray_& _internal_testobjarrays(int index) const;
  ::Config::TestGlobalTemplate_TestObjArray_* _internal_add_testobjarrays();
  public:
  const ::Config::TestGlobalTemplate_TestObjArray_& testobjarrays(int index) const;
  ::Config::TestGlobalTemplate_TestObjArray_* add_testobjarrays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Config::TestGlobalTemplate_TestObjArray_ >&
      testobjarrays() const;

  // repeated .Config.TestGlobalTemplate.TestObjArray1_ TestObjArray1s = 15;
  int testobjarray1s_size() const;
  private:
  int _internal_testobjarray1s_size() const;
  public:
  void clear_testobjarray1s();
  ::Config::TestGlobalTemplate_TestObjArray1_* mutable_testobjarray1s(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Config::TestGlobalTemplate_TestObjArray1_ >*
      mutable_testobjarray1s();
  private:
  const ::Config::TestGlobalTemplate_TestObjArray1_& _internal_testobjarray1s(int index) const;
  ::Config::TestGlobalTemplate_TestObjArray1_* _internal_add_testobjarray1s();
  public:
  const ::Config::TestGlobalTemplate_TestObjArray1_& testobjarray1s(int index) const;
  ::Config::TestGlobalTemplate_TestObjArray1_* add_testobjarray1s();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Config::TestGlobalTemplate_TestObjArray1_ >&
      testobjarray1s() const;

  // repeated .Position3d TestDefineFromGlobal2s = 17;
  int testdefinefromglobal2s_size() const;
  private:
  int _internal_testdefinefromglobal2s_size() const;
  public:
  void clear_testdefinefromglobal2s();
  ::Position3d* mutable_testdefinefromglobal2s(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Position3d >*
      mutable_testdefinefromglobal2s();
  private:
  const ::Position3d& _internal_testdefinefromglobal2s(int index) const;
  ::Position3d* _internal_add_testdefinefromglobal2s();
  public:
  const ::Position3d& testdefinefromglobal2s(int index) const;
  ::Position3d* add_testdefinefromglobal2s();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Position3d >&
      testdefinefromglobal2s() const;

  // repeated .PositionArray3d TestCustomObjArrays = 19;
  int testcustomobjarrays_size() const;
  private:
  int _internal_testcustomobjarrays_size() const;
  public:
  void clear_testcustomobjarrays();
  ::PositionArray3d* mutable_testcustomobjarrays(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PositionArray3d >*
      mutable_testcustomobjarrays();
  private:
  const ::PositionArray3d& _internal_testcustomobjarrays(int index) const;
  ::PositionArray3d* _internal_add_testcustomobjarrays();
  public:
  const ::PositionArray3d& testcustomobjarrays(int index) const;
  ::PositionArray3d* add_testcustomobjarrays();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PositionArray3d >&
      testcustomobjarrays() const;

  // string TestString = 4;
  void clear_teststring();
  const std::string& teststring() const;
  void set_teststring(const std::string& value);
  void set_teststring(std::string&& value);
  void set_teststring(const char* value);
  void set_teststring(const char* value, size_t size);
  std::string* mutable_teststring();
  std::string* release_teststring();
  void set_allocated_teststring(std::string* teststring);
  private:
  const std::string& _internal_teststring() const;
  void _internal_set_teststring(const std::string& value);
  std::string* _internal_mutable_teststring();
  public:

  // .Config.TestGlobalTemplate.TestObj_ TestObj = 12;
  bool has_testobj() const;
  private:
  bool _internal_has_testobj() const;
  public:
  void clear_testobj();
  const ::Config::TestGlobalTemplate_TestObj_& testobj() const;
  ::Config::TestGlobalTemplate_TestObj_* release_testobj();
  ::Config::TestGlobalTemplate_TestObj_* mutable_testobj();
  void set_allocated_testobj(::Config::TestGlobalTemplate_TestObj_* testobj);
  private:
  const ::Config::TestGlobalTemplate_TestObj_& _internal_testobj() const;
  ::Config::TestGlobalTemplate_TestObj_* _internal_mutable_testobj();
  public:
  void unsafe_arena_set_allocated_testobj(
      ::Config::TestGlobalTemplate_TestObj_* testobj);
  ::Config::TestGlobalTemplate_TestObj_* unsafe_arena_release_testobj();

  // .Config.TestGlobalTemplate.TestObj1_ TestObj1 = 13;
  bool has_testobj1() const;
  private:
  bool _internal_has_testobj1() const;
  public:
  void clear_testobj1();
  const ::Config::TestGlobalTemplate_TestObj1_& testobj1() const;
  ::Config::TestGlobalTemplate_TestObj1_* release_testobj1();
  ::Config::TestGlobalTemplate_TestObj1_* mutable_testobj1();
  void set_allocated_testobj1(::Config::TestGlobalTemplate_TestObj1_* testobj1);
  private:
  const ::Config::TestGlobalTemplate_TestObj1_& _internal_testobj1() const;
  ::Config::TestGlobalTemplate_TestObj1_* _internal_mutable_testobj1();
  public:
  void unsafe_arena_set_allocated_testobj1(
      ::Config::TestGlobalTemplate_TestObj1_* testobj1);
  ::Config::TestGlobalTemplate_TestObj1_* unsafe_arena_release_testobj1();

  // .Position3d TestDefineFromGlobal = 16;
  bool has_testdefinefromglobal() const;
  private:
  bool _internal_has_testdefinefromglobal() const;
  public:
  void clear_testdefinefromglobal();
  const ::Position3d& testdefinefromglobal() const;
  ::Position3d* release_testdefinefromglobal();
  ::Position3d* mutable_testdefinefromglobal();
  void set_allocated_testdefinefromglobal(::Position3d* testdefinefromglobal);
  private:
  const ::Position3d& _internal_testdefinefromglobal() const;
  ::Position3d* _internal_mutable_testdefinefromglobal();
  public:
  void unsafe_arena_set_allocated_testdefinefromglobal(
      ::Position3d* testdefinefromglobal);
  ::Position3d* unsafe_arena_release_testdefinefromglobal();

  // .PositionArray3d TestCustomObj = 18;
  bool has_testcustomobj() const;
  private:
  bool _internal_has_testcustomobj() const;
  public:
  void clear_testcustomobj();
  const ::PositionArray3d& testcustomobj() const;
  ::PositionArray3d* release_testcustomobj();
  ::PositionArray3d* mutable_testcustomobj();
  void set_allocated_testcustomobj(::PositionArray3d* testcustomobj);
  private:
  const ::PositionArray3d& _internal_testcustomobj() const;
  ::PositionArray3d* _internal_mutable_testcustomobj();
  public:
  void unsafe_arena_set_allocated_testcustomobj(
      ::PositionArray3d* testcustomobj);
  ::PositionArray3d* unsafe_arena_release_testcustomobj();

  // double TestString1 = 3;
  void clear_teststring1();
  double teststring1() const;
  void set_teststring1(double value);
  private:
  double _internal_teststring1() const;
  void _internal_set_teststring1(double value);
  public:

  // int32 TestInt = 1;
  void clear_testint();
  ::PROTOBUF_NAMESPACE_ID::int32 testint() const;
  void set_testint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_testint() const;
  void _internal_set_testint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float TestFloat = 5;
  void clear_testfloat();
  float testfloat() const;
  void set_testfloat(float value);
  private:
  float _internal_testfloat() const;
  void _internal_set_testfloat(float value);
  public:

  // double TestDouble = 6;
  void clear_testdouble();
  double testdouble() const;
  void set_testdouble(double value);
  private:
  double _internal_testdouble() const;
  void _internal_set_testdouble(double value);
  public:

  // bool TestBool = 7;
  void clear_testbool();
  bool testbool() const;
  void set_testbool(bool value);
  private:
  bool _internal_testbool() const;
  void _internal_set_testbool(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Config.TestGlobalTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> teststringarrays_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > testintarrays_;
  mutable std::atomic<int> _testintarrays_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > testfloatarrays_;
  mutable std::atomic<int> _testfloatarrays_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > testdoublearrays_;
  mutable std::atomic<int> _testdoublearrays_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > testboolarrays_;
  mutable std::atomic<int> _testboolarrays_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Config::TestGlobalTemplate_TestObjArray_ > testobjarrays_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Config::TestGlobalTemplate_TestObjArray1_ > testobjarray1s_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Position3d > testdefinefromglobal2s_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PositionArray3d > testcustomobjarrays_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teststring_;
  ::Config::TestGlobalTemplate_TestObj_* testobj_;
  ::Config::TestGlobalTemplate_TestObj1_* testobj1_;
  ::Position3d* testdefinefromglobal_;
  ::PositionArray3d* testcustomobj_;
  double teststring1_;
  ::PROTOBUF_NAMESPACE_ID::int32 testint_;
  float testfloat_;
  double testdouble_;
  bool testbool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fTestGlobalTemplate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestGlobalTemplate_TestObj_

// int32 a = 1;
inline void TestGlobalTemplate_TestObj_::clear_a() {
  a_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObj_::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObj_::a() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObj_.a)
  return _internal_a();
}
inline void TestGlobalTemplate_TestObj_::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  a_ = value;
}
inline void TestGlobalTemplate_TestObj_::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObj_.a)
}

// float b = 2;
inline void TestGlobalTemplate_TestObj_::clear_b() {
  b_ = 0;
}
inline float TestGlobalTemplate_TestObj_::_internal_b() const {
  return b_;
}
inline float TestGlobalTemplate_TestObj_::b() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObj_.b)
  return _internal_b();
}
inline void TestGlobalTemplate_TestObj_::_internal_set_b(float value) {
  
  b_ = value;
}
inline void TestGlobalTemplate_TestObj_::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObj_.b)
}

// bool c = 3;
inline void TestGlobalTemplate_TestObj_::clear_c() {
  c_ = false;
}
inline bool TestGlobalTemplate_TestObj_::_internal_c() const {
  return c_;
}
inline bool TestGlobalTemplate_TestObj_::c() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObj_.c)
  return _internal_c();
}
inline void TestGlobalTemplate_TestObj_::_internal_set_c(bool value) {
  
  c_ = value;
}
inline void TestGlobalTemplate_TestObj_::set_c(bool value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObj_.c)
}

// -------------------------------------------------------------------

// TestGlobalTemplate_TestObj1_

// int32 a = 1;
inline void TestGlobalTemplate_TestObj1_::clear_a() {
  a_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObj1_::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObj1_::a() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObj1_.a)
  return _internal_a();
}
inline void TestGlobalTemplate_TestObj1_::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  a_ = value;
}
inline void TestGlobalTemplate_TestObj1_::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObj1_.a)
}

// repeated float bs = 2;
inline int TestGlobalTemplate_TestObj1_::_internal_bs_size() const {
  return bs_.size();
}
inline int TestGlobalTemplate_TestObj1_::bs_size() const {
  return _internal_bs_size();
}
inline void TestGlobalTemplate_TestObj1_::clear_bs() {
  bs_.Clear();
}
inline float TestGlobalTemplate_TestObj1_::_internal_bs(int index) const {
  return bs_.Get(index);
}
inline float TestGlobalTemplate_TestObj1_::bs(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObj1_.bs)
  return _internal_bs(index);
}
inline void TestGlobalTemplate_TestObj1_::set_bs(int index, float value) {
  bs_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObj1_.bs)
}
inline void TestGlobalTemplate_TestObj1_::_internal_add_bs(float value) {
  bs_.Add(value);
}
inline void TestGlobalTemplate_TestObj1_::add_bs(float value) {
  _internal_add_bs(value);
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestObj1_.bs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGlobalTemplate_TestObj1_::_internal_bs() const {
  return bs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGlobalTemplate_TestObj1_::bs() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestObj1_.bs)
  return _internal_bs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGlobalTemplate_TestObj1_::_internal_mutable_bs() {
  return &bs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGlobalTemplate_TestObj1_::mutable_bs() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestObj1_.bs)
  return _internal_mutable_bs();
}

// bool v = 3;
inline void TestGlobalTemplate_TestObj1_::clear_v() {
  v_ = false;
}
inline bool TestGlobalTemplate_TestObj1_::_internal_v() const {
  return v_;
}
inline bool TestGlobalTemplate_TestObj1_::v() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObj1_.v)
  return _internal_v();
}
inline void TestGlobalTemplate_TestObj1_::_internal_set_v(bool value) {
  
  v_ = value;
}
inline void TestGlobalTemplate_TestObj1_::set_v(bool value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObj1_.v)
}

// -------------------------------------------------------------------

// TestGlobalTemplate_TestObjArray_

// int32 a = 1;
inline void TestGlobalTemplate_TestObjArray_::clear_a() {
  a_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObjArray_::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObjArray_::a() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObjArray_.a)
  return _internal_a();
}
inline void TestGlobalTemplate_TestObjArray_::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  a_ = value;
}
inline void TestGlobalTemplate_TestObjArray_::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObjArray_.a)
}

// int32 b = 2;
inline void TestGlobalTemplate_TestObjArray_::clear_b() {
  b_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObjArray_::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObjArray_::b() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObjArray_.b)
  return _internal_b();
}
inline void TestGlobalTemplate_TestObjArray_::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  b_ = value;
}
inline void TestGlobalTemplate_TestObjArray_::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObjArray_.b)
}

// int32 c = 3;
inline void TestGlobalTemplate_TestObjArray_::clear_c() {
  c_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObjArray_::_internal_c() const {
  return c_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObjArray_::c() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObjArray_.c)
  return _internal_c();
}
inline void TestGlobalTemplate_TestObjArray_::_internal_set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  c_ = value;
}
inline void TestGlobalTemplate_TestObjArray_::set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObjArray_.c)
}

// -------------------------------------------------------------------

// TestGlobalTemplate_TestObjArray1_

// int32 a = 1;
inline void TestGlobalTemplate_TestObjArray1_::clear_a() {
  a_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObjArray1_::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate_TestObjArray1_::a() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObjArray1_.a)
  return _internal_a();
}
inline void TestGlobalTemplate_TestObjArray1_::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  a_ = value;
}
inline void TestGlobalTemplate_TestObjArray1_::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObjArray1_.a)
}

// repeated float bs = 2;
inline int TestGlobalTemplate_TestObjArray1_::_internal_bs_size() const {
  return bs_.size();
}
inline int TestGlobalTemplate_TestObjArray1_::bs_size() const {
  return _internal_bs_size();
}
inline void TestGlobalTemplate_TestObjArray1_::clear_bs() {
  bs_.Clear();
}
inline float TestGlobalTemplate_TestObjArray1_::_internal_bs(int index) const {
  return bs_.Get(index);
}
inline float TestGlobalTemplate_TestObjArray1_::bs(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObjArray1_.bs)
  return _internal_bs(index);
}
inline void TestGlobalTemplate_TestObjArray1_::set_bs(int index, float value) {
  bs_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestObjArray1_.bs)
}
inline void TestGlobalTemplate_TestObjArray1_::_internal_add_bs(float value) {
  bs_.Add(value);
}
inline void TestGlobalTemplate_TestObjArray1_::add_bs(float value) {
  _internal_add_bs(value);
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestObjArray1_.bs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGlobalTemplate_TestObjArray1_::_internal_bs() const {
  return bs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGlobalTemplate_TestObjArray1_::bs() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestObjArray1_.bs)
  return _internal_bs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGlobalTemplate_TestObjArray1_::_internal_mutable_bs() {
  return &bs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGlobalTemplate_TestObjArray1_::mutable_bs() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestObjArray1_.bs)
  return _internal_mutable_bs();
}

// -------------------------------------------------------------------

// TestGlobalTemplate

// int32 TestInt = 1;
inline void TestGlobalTemplate::clear_testint() {
  testint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate::_internal_testint() const {
  return testint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate::testint() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestInt)
  return _internal_testint();
}
inline void TestGlobalTemplate::_internal_set_testint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  testint_ = value;
}
inline void TestGlobalTemplate::set_testint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_testint(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestInt)
}

// repeated string TestStringArrays = 2;
inline int TestGlobalTemplate::_internal_teststringarrays_size() const {
  return teststringarrays_.size();
}
inline int TestGlobalTemplate::teststringarrays_size() const {
  return _internal_teststringarrays_size();
}
inline void TestGlobalTemplate::clear_teststringarrays() {
  teststringarrays_.Clear();
}
inline std::string* TestGlobalTemplate::add_teststringarrays() {
  // @@protoc_insertion_point(field_add_mutable:Config.TestGlobalTemplate.TestStringArrays)
  return _internal_add_teststringarrays();
}
inline const std::string& TestGlobalTemplate::_internal_teststringarrays(int index) const {
  return teststringarrays_.Get(index);
}
inline const std::string& TestGlobalTemplate::teststringarrays(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestStringArrays)
  return _internal_teststringarrays(index);
}
inline std::string* TestGlobalTemplate::mutable_teststringarrays(int index) {
  // @@protoc_insertion_point(field_mutable:Config.TestGlobalTemplate.TestStringArrays)
  return teststringarrays_.Mutable(index);
}
inline void TestGlobalTemplate::set_teststringarrays(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestStringArrays)
  teststringarrays_.Mutable(index)->assign(value);
}
inline void TestGlobalTemplate::set_teststringarrays(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestStringArrays)
  teststringarrays_.Mutable(index)->assign(std::move(value));
}
inline void TestGlobalTemplate::set_teststringarrays(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  teststringarrays_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Config.TestGlobalTemplate.TestStringArrays)
}
inline void TestGlobalTemplate::set_teststringarrays(int index, const char* value, size_t size) {
  teststringarrays_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Config.TestGlobalTemplate.TestStringArrays)
}
inline std::string* TestGlobalTemplate::_internal_add_teststringarrays() {
  return teststringarrays_.Add();
}
inline void TestGlobalTemplate::add_teststringarrays(const std::string& value) {
  teststringarrays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestStringArrays)
}
inline void TestGlobalTemplate::add_teststringarrays(std::string&& value) {
  teststringarrays_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestStringArrays)
}
inline void TestGlobalTemplate::add_teststringarrays(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  teststringarrays_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Config.TestGlobalTemplate.TestStringArrays)
}
inline void TestGlobalTemplate::add_teststringarrays(const char* value, size_t size) {
  teststringarrays_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Config.TestGlobalTemplate.TestStringArrays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestGlobalTemplate::teststringarrays() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestStringArrays)
  return teststringarrays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestGlobalTemplate::mutable_teststringarrays() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestStringArrays)
  return &teststringarrays_;
}

// double TestString1 = 3;
inline void TestGlobalTemplate::clear_teststring1() {
  teststring1_ = 0;
}
inline double TestGlobalTemplate::_internal_teststring1() const {
  return teststring1_;
}
inline double TestGlobalTemplate::teststring1() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestString1)
  return _internal_teststring1();
}
inline void TestGlobalTemplate::_internal_set_teststring1(double value) {
  
  teststring1_ = value;
}
inline void TestGlobalTemplate::set_teststring1(double value) {
  _internal_set_teststring1(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestString1)
}

// string TestString = 4;
inline void TestGlobalTemplate::clear_teststring() {
  teststring_.ClearToEmpty();
}
inline const std::string& TestGlobalTemplate::teststring() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestString)
  return _internal_teststring();
}
inline void TestGlobalTemplate::set_teststring(const std::string& value) {
  _internal_set_teststring(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestString)
}
inline std::string* TestGlobalTemplate::mutable_teststring() {
  // @@protoc_insertion_point(field_mutable:Config.TestGlobalTemplate.TestString)
  return _internal_mutable_teststring();
}
inline const std::string& TestGlobalTemplate::_internal_teststring() const {
  return teststring_.Get();
}
inline void TestGlobalTemplate::_internal_set_teststring(const std::string& value) {
  
  teststring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TestGlobalTemplate::set_teststring(std::string&& value) {
  
  teststring_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Config.TestGlobalTemplate.TestString)
}
inline void TestGlobalTemplate::set_teststring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  teststring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Config.TestGlobalTemplate.TestString)
}
inline void TestGlobalTemplate::set_teststring(const char* value,
    size_t size) {
  
  teststring_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Config.TestGlobalTemplate.TestString)
}
inline std::string* TestGlobalTemplate::_internal_mutable_teststring() {
  
  return teststring_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TestGlobalTemplate::release_teststring() {
  // @@protoc_insertion_point(field_release:Config.TestGlobalTemplate.TestString)
  return teststring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestGlobalTemplate::set_allocated_teststring(std::string* teststring) {
  if (teststring != nullptr) {
    
  } else {
    
  }
  teststring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teststring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Config.TestGlobalTemplate.TestString)
}

// float TestFloat = 5;
inline void TestGlobalTemplate::clear_testfloat() {
  testfloat_ = 0;
}
inline float TestGlobalTemplate::_internal_testfloat() const {
  return testfloat_;
}
inline float TestGlobalTemplate::testfloat() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestFloat)
  return _internal_testfloat();
}
inline void TestGlobalTemplate::_internal_set_testfloat(float value) {
  
  testfloat_ = value;
}
inline void TestGlobalTemplate::set_testfloat(float value) {
  _internal_set_testfloat(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestFloat)
}

// double TestDouble = 6;
inline void TestGlobalTemplate::clear_testdouble() {
  testdouble_ = 0;
}
inline double TestGlobalTemplate::_internal_testdouble() const {
  return testdouble_;
}
inline double TestGlobalTemplate::testdouble() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestDouble)
  return _internal_testdouble();
}
inline void TestGlobalTemplate::_internal_set_testdouble(double value) {
  
  testdouble_ = value;
}
inline void TestGlobalTemplate::set_testdouble(double value) {
  _internal_set_testdouble(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestDouble)
}

// bool TestBool = 7;
inline void TestGlobalTemplate::clear_testbool() {
  testbool_ = false;
}
inline bool TestGlobalTemplate::_internal_testbool() const {
  return testbool_;
}
inline bool TestGlobalTemplate::testbool() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestBool)
  return _internal_testbool();
}
inline void TestGlobalTemplate::_internal_set_testbool(bool value) {
  
  testbool_ = value;
}
inline void TestGlobalTemplate::set_testbool(bool value) {
  _internal_set_testbool(value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestBool)
}

// repeated int32 TestIntArrays = 8;
inline int TestGlobalTemplate::_internal_testintarrays_size() const {
  return testintarrays_.size();
}
inline int TestGlobalTemplate::testintarrays_size() const {
  return _internal_testintarrays_size();
}
inline void TestGlobalTemplate::clear_testintarrays() {
  testintarrays_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate::_internal_testintarrays(int index) const {
  return testintarrays_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestGlobalTemplate::testintarrays(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestIntArrays)
  return _internal_testintarrays(index);
}
inline void TestGlobalTemplate::set_testintarrays(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  testintarrays_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestIntArrays)
}
inline void TestGlobalTemplate::_internal_add_testintarrays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  testintarrays_.Add(value);
}
inline void TestGlobalTemplate::add_testintarrays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_testintarrays(value);
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestIntArrays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestGlobalTemplate::_internal_testintarrays() const {
  return testintarrays_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TestGlobalTemplate::testintarrays() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestIntArrays)
  return _internal_testintarrays();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestGlobalTemplate::_internal_mutable_testintarrays() {
  return &testintarrays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TestGlobalTemplate::mutable_testintarrays() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestIntArrays)
  return _internal_mutable_testintarrays();
}

// repeated float TestFloatArrays = 9;
inline int TestGlobalTemplate::_internal_testfloatarrays_size() const {
  return testfloatarrays_.size();
}
inline int TestGlobalTemplate::testfloatarrays_size() const {
  return _internal_testfloatarrays_size();
}
inline void TestGlobalTemplate::clear_testfloatarrays() {
  testfloatarrays_.Clear();
}
inline float TestGlobalTemplate::_internal_testfloatarrays(int index) const {
  return testfloatarrays_.Get(index);
}
inline float TestGlobalTemplate::testfloatarrays(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestFloatArrays)
  return _internal_testfloatarrays(index);
}
inline void TestGlobalTemplate::set_testfloatarrays(int index, float value) {
  testfloatarrays_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestFloatArrays)
}
inline void TestGlobalTemplate::_internal_add_testfloatarrays(float value) {
  testfloatarrays_.Add(value);
}
inline void TestGlobalTemplate::add_testfloatarrays(float value) {
  _internal_add_testfloatarrays(value);
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestFloatArrays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGlobalTemplate::_internal_testfloatarrays() const {
  return testfloatarrays_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestGlobalTemplate::testfloatarrays() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestFloatArrays)
  return _internal_testfloatarrays();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGlobalTemplate::_internal_mutable_testfloatarrays() {
  return &testfloatarrays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestGlobalTemplate::mutable_testfloatarrays() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestFloatArrays)
  return _internal_mutable_testfloatarrays();
}

// repeated double TestDoubleArrays = 10;
inline int TestGlobalTemplate::_internal_testdoublearrays_size() const {
  return testdoublearrays_.size();
}
inline int TestGlobalTemplate::testdoublearrays_size() const {
  return _internal_testdoublearrays_size();
}
inline void TestGlobalTemplate::clear_testdoublearrays() {
  testdoublearrays_.Clear();
}
inline double TestGlobalTemplate::_internal_testdoublearrays(int index) const {
  return testdoublearrays_.Get(index);
}
inline double TestGlobalTemplate::testdoublearrays(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestDoubleArrays)
  return _internal_testdoublearrays(index);
}
inline void TestGlobalTemplate::set_testdoublearrays(int index, double value) {
  testdoublearrays_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestDoubleArrays)
}
inline void TestGlobalTemplate::_internal_add_testdoublearrays(double value) {
  testdoublearrays_.Add(value);
}
inline void TestGlobalTemplate::add_testdoublearrays(double value) {
  _internal_add_testdoublearrays(value);
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestDoubleArrays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestGlobalTemplate::_internal_testdoublearrays() const {
  return testdoublearrays_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestGlobalTemplate::testdoublearrays() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestDoubleArrays)
  return _internal_testdoublearrays();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestGlobalTemplate::_internal_mutable_testdoublearrays() {
  return &testdoublearrays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestGlobalTemplate::mutable_testdoublearrays() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestDoubleArrays)
  return _internal_mutable_testdoublearrays();
}

// repeated bool TestBoolArrays = 11;
inline int TestGlobalTemplate::_internal_testboolarrays_size() const {
  return testboolarrays_.size();
}
inline int TestGlobalTemplate::testboolarrays_size() const {
  return _internal_testboolarrays_size();
}
inline void TestGlobalTemplate::clear_testboolarrays() {
  testboolarrays_.Clear();
}
inline bool TestGlobalTemplate::_internal_testboolarrays(int index) const {
  return testboolarrays_.Get(index);
}
inline bool TestGlobalTemplate::testboolarrays(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestBoolArrays)
  return _internal_testboolarrays(index);
}
inline void TestGlobalTemplate::set_testboolarrays(int index, bool value) {
  testboolarrays_.Set(index, value);
  // @@protoc_insertion_point(field_set:Config.TestGlobalTemplate.TestBoolArrays)
}
inline void TestGlobalTemplate::_internal_add_testboolarrays(bool value) {
  testboolarrays_.Add(value);
}
inline void TestGlobalTemplate::add_testboolarrays(bool value) {
  _internal_add_testboolarrays(value);
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestBoolArrays)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestGlobalTemplate::_internal_testboolarrays() const {
  return testboolarrays_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestGlobalTemplate::testboolarrays() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestBoolArrays)
  return _internal_testboolarrays();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestGlobalTemplate::_internal_mutable_testboolarrays() {
  return &testboolarrays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestGlobalTemplate::mutable_testboolarrays() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestBoolArrays)
  return _internal_mutable_testboolarrays();
}

// .Config.TestGlobalTemplate.TestObj_ TestObj = 12;
inline bool TestGlobalTemplate::_internal_has_testobj() const {
  return this != internal_default_instance() && testobj_ != nullptr;
}
inline bool TestGlobalTemplate::has_testobj() const {
  return _internal_has_testobj();
}
inline void TestGlobalTemplate::clear_testobj() {
  if (GetArena() == nullptr && testobj_ != nullptr) {
    delete testobj_;
  }
  testobj_ = nullptr;
}
inline const ::Config::TestGlobalTemplate_TestObj_& TestGlobalTemplate::_internal_testobj() const {
  const ::Config::TestGlobalTemplate_TestObj_* p = testobj_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::TestGlobalTemplate_TestObj_&>(
      ::Config::_TestGlobalTemplate_TestObj__default_instance_);
}
inline const ::Config::TestGlobalTemplate_TestObj_& TestGlobalTemplate::testobj() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObj)
  return _internal_testobj();
}
inline void TestGlobalTemplate::unsafe_arena_set_allocated_testobj(
    ::Config::TestGlobalTemplate_TestObj_* testobj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(testobj_);
  }
  testobj_ = testobj;
  if (testobj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.TestGlobalTemplate.TestObj)
}
inline ::Config::TestGlobalTemplate_TestObj_* TestGlobalTemplate::release_testobj() {
  
  ::Config::TestGlobalTemplate_TestObj_* temp = testobj_;
  testobj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::TestGlobalTemplate_TestObj_* TestGlobalTemplate::unsafe_arena_release_testobj() {
  // @@protoc_insertion_point(field_release:Config.TestGlobalTemplate.TestObj)
  
  ::Config::TestGlobalTemplate_TestObj_* temp = testobj_;
  testobj_ = nullptr;
  return temp;
}
inline ::Config::TestGlobalTemplate_TestObj_* TestGlobalTemplate::_internal_mutable_testobj() {
  
  if (testobj_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::TestGlobalTemplate_TestObj_>(GetArena());
    testobj_ = p;
  }
  return testobj_;
}
inline ::Config::TestGlobalTemplate_TestObj_* TestGlobalTemplate::mutable_testobj() {
  // @@protoc_insertion_point(field_mutable:Config.TestGlobalTemplate.TestObj)
  return _internal_mutable_testobj();
}
inline void TestGlobalTemplate::set_allocated_testobj(::Config::TestGlobalTemplate_TestObj_* testobj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete testobj_;
  }
  if (testobj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(testobj);
    if (message_arena != submessage_arena) {
      testobj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testobj, submessage_arena);
    }
    
  } else {
    
  }
  testobj_ = testobj;
  // @@protoc_insertion_point(field_set_allocated:Config.TestGlobalTemplate.TestObj)
}

// .Config.TestGlobalTemplate.TestObj1_ TestObj1 = 13;
inline bool TestGlobalTemplate::_internal_has_testobj1() const {
  return this != internal_default_instance() && testobj1_ != nullptr;
}
inline bool TestGlobalTemplate::has_testobj1() const {
  return _internal_has_testobj1();
}
inline void TestGlobalTemplate::clear_testobj1() {
  if (GetArena() == nullptr && testobj1_ != nullptr) {
    delete testobj1_;
  }
  testobj1_ = nullptr;
}
inline const ::Config::TestGlobalTemplate_TestObj1_& TestGlobalTemplate::_internal_testobj1() const {
  const ::Config::TestGlobalTemplate_TestObj1_* p = testobj1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Config::TestGlobalTemplate_TestObj1_&>(
      ::Config::_TestGlobalTemplate_TestObj1__default_instance_);
}
inline const ::Config::TestGlobalTemplate_TestObj1_& TestGlobalTemplate::testobj1() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObj1)
  return _internal_testobj1();
}
inline void TestGlobalTemplate::unsafe_arena_set_allocated_testobj1(
    ::Config::TestGlobalTemplate_TestObj1_* testobj1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(testobj1_);
  }
  testobj1_ = testobj1;
  if (testobj1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.TestGlobalTemplate.TestObj1)
}
inline ::Config::TestGlobalTemplate_TestObj1_* TestGlobalTemplate::release_testobj1() {
  
  ::Config::TestGlobalTemplate_TestObj1_* temp = testobj1_;
  testobj1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Config::TestGlobalTemplate_TestObj1_* TestGlobalTemplate::unsafe_arena_release_testobj1() {
  // @@protoc_insertion_point(field_release:Config.TestGlobalTemplate.TestObj1)
  
  ::Config::TestGlobalTemplate_TestObj1_* temp = testobj1_;
  testobj1_ = nullptr;
  return temp;
}
inline ::Config::TestGlobalTemplate_TestObj1_* TestGlobalTemplate::_internal_mutable_testobj1() {
  
  if (testobj1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Config::TestGlobalTemplate_TestObj1_>(GetArena());
    testobj1_ = p;
  }
  return testobj1_;
}
inline ::Config::TestGlobalTemplate_TestObj1_* TestGlobalTemplate::mutable_testobj1() {
  // @@protoc_insertion_point(field_mutable:Config.TestGlobalTemplate.TestObj1)
  return _internal_mutable_testobj1();
}
inline void TestGlobalTemplate::set_allocated_testobj1(::Config::TestGlobalTemplate_TestObj1_* testobj1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete testobj1_;
  }
  if (testobj1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(testobj1);
    if (message_arena != submessage_arena) {
      testobj1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testobj1, submessage_arena);
    }
    
  } else {
    
  }
  testobj1_ = testobj1;
  // @@protoc_insertion_point(field_set_allocated:Config.TestGlobalTemplate.TestObj1)
}

// repeated .Config.TestGlobalTemplate.TestObjArray_ TestObjArrays = 14;
inline int TestGlobalTemplate::_internal_testobjarrays_size() const {
  return testobjarrays_.size();
}
inline int TestGlobalTemplate::testobjarrays_size() const {
  return _internal_testobjarrays_size();
}
inline void TestGlobalTemplate::clear_testobjarrays() {
  testobjarrays_.Clear();
}
inline ::Config::TestGlobalTemplate_TestObjArray_* TestGlobalTemplate::mutable_testobjarrays(int index) {
  // @@protoc_insertion_point(field_mutable:Config.TestGlobalTemplate.TestObjArrays)
  return testobjarrays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Config::TestGlobalTemplate_TestObjArray_ >*
TestGlobalTemplate::mutable_testobjarrays() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestObjArrays)
  return &testobjarrays_;
}
inline const ::Config::TestGlobalTemplate_TestObjArray_& TestGlobalTemplate::_internal_testobjarrays(int index) const {
  return testobjarrays_.Get(index);
}
inline const ::Config::TestGlobalTemplate_TestObjArray_& TestGlobalTemplate::testobjarrays(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObjArrays)
  return _internal_testobjarrays(index);
}
inline ::Config::TestGlobalTemplate_TestObjArray_* TestGlobalTemplate::_internal_add_testobjarrays() {
  return testobjarrays_.Add();
}
inline ::Config::TestGlobalTemplate_TestObjArray_* TestGlobalTemplate::add_testobjarrays() {
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestObjArrays)
  return _internal_add_testobjarrays();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Config::TestGlobalTemplate_TestObjArray_ >&
TestGlobalTemplate::testobjarrays() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestObjArrays)
  return testobjarrays_;
}

// repeated .Config.TestGlobalTemplate.TestObjArray1_ TestObjArray1s = 15;
inline int TestGlobalTemplate::_internal_testobjarray1s_size() const {
  return testobjarray1s_.size();
}
inline int TestGlobalTemplate::testobjarray1s_size() const {
  return _internal_testobjarray1s_size();
}
inline void TestGlobalTemplate::clear_testobjarray1s() {
  testobjarray1s_.Clear();
}
inline ::Config::TestGlobalTemplate_TestObjArray1_* TestGlobalTemplate::mutable_testobjarray1s(int index) {
  // @@protoc_insertion_point(field_mutable:Config.TestGlobalTemplate.TestObjArray1s)
  return testobjarray1s_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Config::TestGlobalTemplate_TestObjArray1_ >*
TestGlobalTemplate::mutable_testobjarray1s() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestObjArray1s)
  return &testobjarray1s_;
}
inline const ::Config::TestGlobalTemplate_TestObjArray1_& TestGlobalTemplate::_internal_testobjarray1s(int index) const {
  return testobjarray1s_.Get(index);
}
inline const ::Config::TestGlobalTemplate_TestObjArray1_& TestGlobalTemplate::testobjarray1s(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestObjArray1s)
  return _internal_testobjarray1s(index);
}
inline ::Config::TestGlobalTemplate_TestObjArray1_* TestGlobalTemplate::_internal_add_testobjarray1s() {
  return testobjarray1s_.Add();
}
inline ::Config::TestGlobalTemplate_TestObjArray1_* TestGlobalTemplate::add_testobjarray1s() {
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestObjArray1s)
  return _internal_add_testobjarray1s();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Config::TestGlobalTemplate_TestObjArray1_ >&
TestGlobalTemplate::testobjarray1s() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestObjArray1s)
  return testobjarray1s_;
}

// .Position3d TestDefineFromGlobal = 16;
inline bool TestGlobalTemplate::_internal_has_testdefinefromglobal() const {
  return this != internal_default_instance() && testdefinefromglobal_ != nullptr;
}
inline bool TestGlobalTemplate::has_testdefinefromglobal() const {
  return _internal_has_testdefinefromglobal();
}
inline const ::Position3d& TestGlobalTemplate::_internal_testdefinefromglobal() const {
  const ::Position3d* p = testdefinefromglobal_;
  return p != nullptr ? *p : reinterpret_cast<const ::Position3d&>(
      ::_Position3d_default_instance_);
}
inline const ::Position3d& TestGlobalTemplate::testdefinefromglobal() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestDefineFromGlobal)
  return _internal_testdefinefromglobal();
}
inline void TestGlobalTemplate::unsafe_arena_set_allocated_testdefinefromglobal(
    ::Position3d* testdefinefromglobal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(testdefinefromglobal_);
  }
  testdefinefromglobal_ = testdefinefromglobal;
  if (testdefinefromglobal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.TestGlobalTemplate.TestDefineFromGlobal)
}
inline ::Position3d* TestGlobalTemplate::release_testdefinefromglobal() {
  
  ::Position3d* temp = testdefinefromglobal_;
  testdefinefromglobal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Position3d* TestGlobalTemplate::unsafe_arena_release_testdefinefromglobal() {
  // @@protoc_insertion_point(field_release:Config.TestGlobalTemplate.TestDefineFromGlobal)
  
  ::Position3d* temp = testdefinefromglobal_;
  testdefinefromglobal_ = nullptr;
  return temp;
}
inline ::Position3d* TestGlobalTemplate::_internal_mutable_testdefinefromglobal() {
  
  if (testdefinefromglobal_ == nullptr) {
    auto* p = CreateMaybeMessage<::Position3d>(GetArena());
    testdefinefromglobal_ = p;
  }
  return testdefinefromglobal_;
}
inline ::Position3d* TestGlobalTemplate::mutable_testdefinefromglobal() {
  // @@protoc_insertion_point(field_mutable:Config.TestGlobalTemplate.TestDefineFromGlobal)
  return _internal_mutable_testdefinefromglobal();
}
inline void TestGlobalTemplate::set_allocated_testdefinefromglobal(::Position3d* testdefinefromglobal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(testdefinefromglobal_);
  }
  if (testdefinefromglobal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(testdefinefromglobal)->GetArena();
    if (message_arena != submessage_arena) {
      testdefinefromglobal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testdefinefromglobal, submessage_arena);
    }
    
  } else {
    
  }
  testdefinefromglobal_ = testdefinefromglobal;
  // @@protoc_insertion_point(field_set_allocated:Config.TestGlobalTemplate.TestDefineFromGlobal)
}

// repeated .Position3d TestDefineFromGlobal2s = 17;
inline int TestGlobalTemplate::_internal_testdefinefromglobal2s_size() const {
  return testdefinefromglobal2s_.size();
}
inline int TestGlobalTemplate::testdefinefromglobal2s_size() const {
  return _internal_testdefinefromglobal2s_size();
}
inline ::Position3d* TestGlobalTemplate::mutable_testdefinefromglobal2s(int index) {
  // @@protoc_insertion_point(field_mutable:Config.TestGlobalTemplate.TestDefineFromGlobal2s)
  return testdefinefromglobal2s_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Position3d >*
TestGlobalTemplate::mutable_testdefinefromglobal2s() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestDefineFromGlobal2s)
  return &testdefinefromglobal2s_;
}
inline const ::Position3d& TestGlobalTemplate::_internal_testdefinefromglobal2s(int index) const {
  return testdefinefromglobal2s_.Get(index);
}
inline const ::Position3d& TestGlobalTemplate::testdefinefromglobal2s(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestDefineFromGlobal2s)
  return _internal_testdefinefromglobal2s(index);
}
inline ::Position3d* TestGlobalTemplate::_internal_add_testdefinefromglobal2s() {
  return testdefinefromglobal2s_.Add();
}
inline ::Position3d* TestGlobalTemplate::add_testdefinefromglobal2s() {
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestDefineFromGlobal2s)
  return _internal_add_testdefinefromglobal2s();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Position3d >&
TestGlobalTemplate::testdefinefromglobal2s() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestDefineFromGlobal2s)
  return testdefinefromglobal2s_;
}

// .PositionArray3d TestCustomObj = 18;
inline bool TestGlobalTemplate::_internal_has_testcustomobj() const {
  return this != internal_default_instance() && testcustomobj_ != nullptr;
}
inline bool TestGlobalTemplate::has_testcustomobj() const {
  return _internal_has_testcustomobj();
}
inline const ::PositionArray3d& TestGlobalTemplate::_internal_testcustomobj() const {
  const ::PositionArray3d* p = testcustomobj_;
  return p != nullptr ? *p : reinterpret_cast<const ::PositionArray3d&>(
      ::_PositionArray3d_default_instance_);
}
inline const ::PositionArray3d& TestGlobalTemplate::testcustomobj() const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestCustomObj)
  return _internal_testcustomobj();
}
inline void TestGlobalTemplate::unsafe_arena_set_allocated_testcustomobj(
    ::PositionArray3d* testcustomobj) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(testcustomobj_);
  }
  testcustomobj_ = testcustomobj;
  if (testcustomobj) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Config.TestGlobalTemplate.TestCustomObj)
}
inline ::PositionArray3d* TestGlobalTemplate::release_testcustomobj() {
  
  ::PositionArray3d* temp = testcustomobj_;
  testcustomobj_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PositionArray3d* TestGlobalTemplate::unsafe_arena_release_testcustomobj() {
  // @@protoc_insertion_point(field_release:Config.TestGlobalTemplate.TestCustomObj)
  
  ::PositionArray3d* temp = testcustomobj_;
  testcustomobj_ = nullptr;
  return temp;
}
inline ::PositionArray3d* TestGlobalTemplate::_internal_mutable_testcustomobj() {
  
  if (testcustomobj_ == nullptr) {
    auto* p = CreateMaybeMessage<::PositionArray3d>(GetArena());
    testcustomobj_ = p;
  }
  return testcustomobj_;
}
inline ::PositionArray3d* TestGlobalTemplate::mutable_testcustomobj() {
  // @@protoc_insertion_point(field_mutable:Config.TestGlobalTemplate.TestCustomObj)
  return _internal_mutable_testcustomobj();
}
inline void TestGlobalTemplate::set_allocated_testcustomobj(::PositionArray3d* testcustomobj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(testcustomobj_);
  }
  if (testcustomobj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(testcustomobj)->GetArena();
    if (message_arena != submessage_arena) {
      testcustomobj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testcustomobj, submessage_arena);
    }
    
  } else {
    
  }
  testcustomobj_ = testcustomobj;
  // @@protoc_insertion_point(field_set_allocated:Config.TestGlobalTemplate.TestCustomObj)
}

// repeated .PositionArray3d TestCustomObjArrays = 19;
inline int TestGlobalTemplate::_internal_testcustomobjarrays_size() const {
  return testcustomobjarrays_.size();
}
inline int TestGlobalTemplate::testcustomobjarrays_size() const {
  return _internal_testcustomobjarrays_size();
}
inline ::PositionArray3d* TestGlobalTemplate::mutable_testcustomobjarrays(int index) {
  // @@protoc_insertion_point(field_mutable:Config.TestGlobalTemplate.TestCustomObjArrays)
  return testcustomobjarrays_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PositionArray3d >*
TestGlobalTemplate::mutable_testcustomobjarrays() {
  // @@protoc_insertion_point(field_mutable_list:Config.TestGlobalTemplate.TestCustomObjArrays)
  return &testcustomobjarrays_;
}
inline const ::PositionArray3d& TestGlobalTemplate::_internal_testcustomobjarrays(int index) const {
  return testcustomobjarrays_.Get(index);
}
inline const ::PositionArray3d& TestGlobalTemplate::testcustomobjarrays(int index) const {
  // @@protoc_insertion_point(field_get:Config.TestGlobalTemplate.TestCustomObjArrays)
  return _internal_testcustomobjarrays(index);
}
inline ::PositionArray3d* TestGlobalTemplate::_internal_add_testcustomobjarrays() {
  return testcustomobjarrays_.Add();
}
inline ::PositionArray3d* TestGlobalTemplate::add_testcustomobjarrays() {
  // @@protoc_insertion_point(field_add:Config.TestGlobalTemplate.TestCustomObjArrays)
  return _internal_add_testcustomobjarrays();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PositionArray3d >&
TestGlobalTemplate::testcustomobjarrays() const {
  // @@protoc_insertion_point(field_list:Config.TestGlobalTemplate.TestCustomObjArrays)
  return testcustomobjarrays_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fTestGlobalTemplate_2eproto
